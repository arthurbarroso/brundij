{"version":3,"sources":["datascript/db.cljc"],"mappings":"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","names":["datascript.db/Exception","js/Error","datascript.db/IllegalArgumentException","datascript.db/UnsupportedOperationException","datascript.db/e0","datascript.db/tx0","datascript.db/emax","datascript.db/txmax","datascript.db/implicit-schema","datascript.db/seqable?","x","cljs.core/seqable?","me.tonsky.persistent-sorted-set.arrays/array?","datascript.db/conjv","cljs.core.fnil","cljs.core/conj","datascript.db/conjs","datascript.db/reduce-indexed","f","init","xs","cljs.core/first","cljs.core.reduce","p__60554","vec__60555","cljs.core.nth","acc","idx","res","cljs.core/reduced?","cljs.core/reduced","datascript.db/cljs-env?","env","cljs.core/boolean","datascript.db/combine-hashes","y","cljs.core/hash-combine","datascript$db$IDatom$datom_tx$dyn","x__4509__auto__","m__4510__auto__","datascript.db/datom-tx","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","datascript$db$IDatom$datom_added$dyn","datascript.db/datom-added","datascript.db/IDatom","this","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","datascript.db/Datom","datascript.db/->Datom","e","a","v","tx","_hash","d","datascript.db/hash-datom","o","and__4210__auto__","datascript.db/equiv-datom","datascript.db/seq-datom","k","datascript.db/val-at-datom","nf","i","datascript.db/nth-datom","not-found","datascript.db/assoc-datom","writer","opts","cljs.core/pr-sequential-writer","cljs.core/pr-writer","goog/exportSymbol","var_args","G__60559","datascript.db/datom","added","datascript.db/datom?","cljs.core/hash","cljs.core._EQ_","cljs.core/List","G__60560","G__60562","G__60563","G__60564","G__60565","cljs.core/Keyword","datascript.db.datom","datascript.db/datom-from-reader","vec","cljs.core.apply","datascript.db/cmp","cljs.core/compare","datascript.db/class-identical?","cljs.core/type","datascript.db/class-compare","goog.array/defaultCompare","cljs.core/type->str","datascript.db/value-compare","e60567","cljs.core/native-satisfies?","cljs.core/IComparable","cljs.core/-compare","cljs.core/array?","datascript.db/value-cmp","datascript.db/cmp-datoms-eavt","d1","d2","c__59929__auto__","datascript.db/cmp-datoms-aevt","datascript.db/cmp-datoms-avet","datascript.db/cmp-attr-quick","a1","a2","datascript.db/cmp-datoms-eav-quick","datascript.db/cmp-datoms-eavt-quick","datascript.db/cmp-datoms-aevt-quick","datascript.db/cmp-datoms-avet-quick","datascript.db/diff-sorted","b","cmp","only-a","only-b","both","cljs.core/empty?","cljs.core/not-empty","cljs.core.into","first-a","first-b","diff","e60570","_","cljs.core.conj","cljs.core/next","datascript$db$ISearch$_search$dyn","datascript.db/-search","datascript.db/ISearch","data","pattern","datascript.db/fsearch","datascript$db$IIndexAccess$_datoms$dyn","datascript.db/-datoms","datascript$db$IIndexAccess$_seek_datoms$dyn","datascript.db/-seek-datoms","datascript$db$IIndexAccess$_rseek_datoms$dyn","datascript.db/-rseek-datoms","datascript$db$IIndexAccess$_index_range$dyn","datascript.db/-index-range","datascript.db/IIndexAccess","db","index","components","attr","start","end","datascript.db/validate-indexed","temp__5739__auto__","datascript.db/indexing?","cljs.core.ex_info","cljs.core.pr_str","datascript$db$IDB$_schema$dyn","datascript.db/-schema","datascript$db$IDB$_attrs_by$dyn","datascript.db/-attrs-by","datascript.db/IDB","property","datascript.db/db-transient","cljs.core.update","cljs.core/transient","datascript.db/db-persistent!","cljs.core/persistent!","this__4461__auto__","k__4462__auto__","this__4463__auto__","k60573","else__4464__auto__","G__60577","schema","eavt","aevt","avet","max-eid","max-tx","rschema","hash","cljs.core.get","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","ret__4484__auto__","p__60578","vec__60579","k__4485__auto__","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core.concat","cljs.core/PersistentVector","G__60572","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","cljs.core/count","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this60574","other60575","this__4471__auto__","k__4472__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","this__4468__auto__","G__60582","this__4469__auto__","k__4470__auto__","pred__60583","cljs.core/keyword-identical?","expr__60584","cljs.core.assoc","this__4474__auto__","cljs.core/seq","cljs.core/MapEntry","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","datascript.db/DB","this__4505__auto__","writer__4506__auto__","G__60576","extmap__4501__auto__","G__60586","cljs.core/record?","datascript.db/->DB","datascript.db/map->DB","datascript.db/hash-db","other","datascript.db/equiv-db","cljs.core/-rseq","cljs.core/with-meta","G__60587","datascript.db/empty-db","cljs.core/meta","w","datascript.db/pr-db","key","fexpr__60590","vec__60591","multival?","me.tonsky.persistent_sorted_set.slice","cljs.core.filter","cs","datascript.db/components->pattern","me.tonsky.persistent_sorted_set.rslice","G__60588","G__60589","datascript.db/validate-attr","datascript.db/resolve-datom","datascript.db/db?","k60601","G__60605","unfiltered-db","pred","p__60606","vec__60607","G__60600","this60602","other60603","G__60610","pred__60611","expr__60612","datascript.db/FilteredDB","G__60604","G__60614","datascript.db/->FilteredDB","datascript.db/map->FilteredDB","datascript.db/hash-fdb","datascript.db/attr->properties","G__60615","datascript.db/attr-tuples","m","tuple-attr","src-attr","cljs.core/assoc","datascript.db/rschema","cljs.core/reduce-kv","attr-schema","value","prop","datascript.db/validate-schema-key","expected","datascript.db/validate-schema","seq__60616","chunk__60617","count__60618","i__60619","vec__60638","temp__5735__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__60647","kv","comp?","cljs.core.not_EQ_","ex-data","attrs","cljs.core/sequential?","seq__60641","chunk__60643","count__60644","i__60645","seq__60650","chunk__60652","count__60653","i__60654","G__60657","datascript.db.empty_db","cljs.core/map?","cljs.core.merge","me.tonsky.persistent_sorted_set.sorted_set_by","cljs.core.atom","datascript.db/init-max-eid","or__4212__auto__","G__60659","datascript.db/init-db","datoms","datascript.db.init_db","not-datom","cljs.core.drop_while","indexed","arr","G__60660","me.tonsky.persistent-sorted-set.arrays/into-array","me.tonsky.persistent-sorted-set.arrays/asort","me.tonsky.persistent-sorted-set/from-sorted-array","avet-datoms","avet-arr","cljs.core/to-array","cljs.core.transduce","cljs.core.map","cljs.core/max","datascript.db/equiv-db-index","ys","cljs.core/deref","h","cljs.core/reset!","p__60661","map__60662","cljs.core/--destructure-map","datascript.db/db-from-reader","p__60663","vec__60664","t","default-e","default-tx","G__60667","G__60668","datascript.db/entid-some","datascript.db/ref?","datascript.db/entid-strict","p__60669","vec__60670","c0","c1","c2","c3","G__60673","k60675","G__60679","db-before","db-after","tx-data","tempids","tx-meta","p__60680","vec__60681","G__60674","this60676","other60677","G__60684","pred__60685","expr__60686","datascript.db/TxReport","G__60678","G__60688","datascript.db/->TxReport","datascript.db/map->TxReport","datascript.db/is-attr?","datascript.db/multival?","datascript.db/component?","datascript.db/tuple?","datascript.db/tuple-source?","datascript.db/entid","eid","vec__60689","cljs.core.array_seq","datascript.db/validate-datom","datom","found","at","datascript.db/validate-val","datascript.db/current-tx","report","cljs.core.get_in","datascript.db/next-eid","datascript.db/tx-id?","datascript.db/tempid?","datascript.db/new-eid?","datascript.db/advance-max-eid","G__60692","G__60694","datascript.db/allocate-eid","G__60695","datascript.db/with-datom","indexing?","G__60696","me.tonsky.persistent-sorted-set/conj","temp__5737__auto__","removing","G__60697","me.tonsky.persistent-sorted-set/disj","datascript.db/queue-tuple","queue","tuple","tuple-value","cljs.core/vec","cljs.core.repeat","tuple-value'","datascript.db/queue-tuples","tuples","datascript.db/transact-report","report'","queue'","datascript.db/reverse-ref?","cljs.core/name","cljs.core/re-matches","datascript.db/reverse-ref","cljs.core.keyword","cljs.core/namespace","cljs.core.subs","vec__60698","ns","name","datascript.db/resolve-upserts","entity","idents","resolve","split","vs","p__60701","vec__60702","upserts","cljs.core/coll?","vec__60705","insert","upsert","G__60708","G__60709","datascript.db/validate-upserts","upsert-ids","v->e","vec__60710","vec__60713","vec__60716","vec__60719","e1","v1","e2","v2","cljs.core/second","vec__60722","vec__60725","upsert-id","datascript.db/maybe-wrap-multival","datascript.db/explode","iter__4611__auto__","s__60729","cljs.core/LazySeq","xs__6292__auto__","vec__60734","iterys__4607__auto__","s__60731","c__4609__auto__","size__4610__auto__","b__60733","cljs.core/chunk-buffer","i__60732","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60730","cljs.core/cons","cljs.core/rest","fs__4608__auto__","iter__60728","reverse?","straight-a","p__60737","vec__60738","datascript.db/transact-add","ent","new-datom","old-datom","datascript.db/transact-retract-datom","datascript.db/retract-components","cljs.core.comp","datascript.db/retry-with-tempid","initial-report","es","tempid","upserted-eid","tempids'","datascript.db/transact-tx-data","datascript.db/builtin-fn?","datascript.db/flush-tuples","attr-tuples","entities","tuples+values","cljs.core/every?","cljs.core/nil?","current","datascript.db/check-value-tempids","all-tempids","reduce-fn","unused","cljs.core.sort","cljs.core/vals","initial-es","initial-report'","has-tuples?","initial-es'","cljs.core.interleave","vec__60759","seq__60760","first__60761","cljs.core/update","cljs.core/inc","old-eid","vec__60762","id","datascript.db.allocate_eid","entity'","new-eid","new-entity","vec__60765","op","vec__60768","seq__60769","first__60770","args","cljs.core/not","ident","fun","cljs.core/fn?","vec__60771","ov","nv","cljs.core/some","resolved","allocated-eid","e-datoms","v-datoms","cljs.core.mapcat","vec__60774"],"sourcesContent":["(ns ^:no-doc ^:lean-ns datascript.db\n  (:require\n    #?(:cljs [goog.array :as garray])\n    [clojure.walk]\n    [clojure.data]\n    [me.tonsky.persistent-sorted-set :as set]\n    [me.tonsky.persistent-sorted-set.arrays :as arrays])\n  #?(:cljs (:require-macros [datascript.db :refer [case-tree combine-cmp raise defrecord-updatable cond+]]))\n  (:refer-clojure :exclude [seqable?])) \n\n;; ----------------------------------------------------------------------------\n\n#?(:cljs\n   (do\n     (def Exception js/Error)\n     (def IllegalArgumentException js/Error)\n     (def UnsupportedOperationException js/Error)))\n\n(def ^:const e0    0)\n(def ^:const tx0   0x20000000)\n(def ^:const emax  0x7FFFFFFF)\n(def ^:const txmax 0x7FFFFFFF)\n(def ^:const implicit-schema {:db/ident {:db/unique :db.unique/identity}})\n\n;; ----------------------------------------------------------------------------\n\n#?(:clj\n  (defmacro raise [& fragments]\n    (let [msgs (butlast fragments)\n          data (last fragments)]\n      `(throw (ex-info (str ~@(map (fn [m#] (if (string? m#) m# (list 'pr-str m#))) msgs)) ~data)))))\n\n(defn #?@(:clj  [^Boolean seqable?]  \n          :cljs [^boolean seqable?])\n  [x]\n  (and (not (string? x))\n  #?(:cljs (or (cljs.core/seqable? x)\n               (arrays/array? x))\n     :clj  (or (seq? x)\n               (instance? clojure.lang.Seqable x)\n               (nil? x)\n               (instance? Iterable x)\n               (arrays/array? x)\n               (instance? java.util.Map x)))))\n\n#?(:clj\n  (defmacro cond+ [& clauses]\n    (when-some [[test expr & rest] clauses]\n      (case test\n        :let `(let ~expr (cond+ ~@rest))\n        `(if ~test ~expr (cond+ ~@rest))))))\n\n#?(:clj\n(defmacro some-of\n  ([] nil)\n  ([x] x)\n  ([x & more]\n    `(let [x# ~x] (if (nil? x#) (some-of ~@more) x#)))))\n\n(def conjv (fnil conj []))\n(def conjs (fnil conj #{}))\n\n(defn reduce-indexed\n  \"Same as reduce, but `f` takes [acc el idx]\"\n  [f init xs]\n  (first\n    (reduce\n      (fn [[acc idx] x]\n        (let [res (f acc x idx)]\n          (if (reduced? res)\n            (reduced [res idx])\n            [res (inc idx)])))\n      [init 0]\n      xs)))\n\n;; ----------------------------------------------------------------------------\n;; macros and funcs to support writing defrecords and updating\n;; (replacing) builtins, i.e., Object/hashCode, IHashEq hasheq, etc.\n;; code taken from prismatic:\n;;  https://github.com/Prismatic/schema/commit/e31c419c56555c83ef9ee834801e13ef3c112597\n;;\n\n(defn- cljs-env?\n  \"Take the &env from a macro, and tell whether we are expanding into cljs.\"\n  [env]\n  (boolean (:ns env)))\n\n#?(:clj\n   (defmacro if-cljs\n     \"Return then if we are generating cljs code and else for Clojure code.\n     https://groups.google.com/d/msg/clojurescript/iBY5HaQda4A/w1lAQi9_AwsJ\"\n     [then else]\n     (if (cljs-env? &env) then else)))\n\n(defn combine-hashes [x y]\n  #?(:clj  (clojure.lang.Util/hashCombine x y)\n     :cljs (hash-combine x y)))\n\n#?(:clj\n   (defn- get-sig [method]\n     ;; expects something like '(method-symbol [arg arg arg] ...)\n     ;; if the thing matches, returns [fully-qualified-symbol arity], otherwise nil\n     (and (sequential? method)\n          (symbol? (first method))\n          (vector? (second method))\n          (let [sym (first method)\n                ns  (or (some->> sym resolve meta :ns str) \"clojure.core\")]\n            [(symbol ns (name sym)) (-> method second count)]))))\n\n#?(:clj\n   (defn- dedupe-interfaces [deftype-form]\n     ;; get the interfaces list, remove any duplicates, similar to remove-nil-implements in potemkin\n     ;; verified w/ deftype impl in compiler:\n     ;; (deftype* tagname classname [fields] :implements [interfaces] :tag tagname methods*)\n     (let [[deftype* tagname classname fields implements interfaces & rest] deftype-form]\n       (when (or (not= deftype* 'deftype*) (not= implements :implements))\n         (throw (IllegalArgumentException. \"deftype-form mismatch\")))\n       (list* deftype* tagname classname fields implements (vec (distinct interfaces)) rest))))\n\n#?(:clj\n   (defn- make-record-updatable-clj [name fields & impls]\n     (let [impl-map (->> impls (map (juxt get-sig identity)) (filter first) (into {}))\n           body     (macroexpand-1 (list* 'defrecord name fields impls))]\n       (clojure.walk/postwalk\n        (fn [form]\n          (if (and (sequential? form) (= 'deftype* (first form)))\n            (->> form\n                 dedupe-interfaces\n                 (remove (fn [method]\n                           (when-some [impl (-> method get-sig impl-map)]\n                             (not= method impl)))))\n            form))\n        body))))\n\n#?(:clj\n   (defn- make-record-updatable-cljs [name fields & impls]\n     `(do\n        (defrecord ~name ~fields)\n        (extend-type ~name ~@impls))))\n\n#?(:clj\n   (defmacro defrecord-updatable [name fields & impls]\n     `(if-cljs\n       ~(apply make-record-updatable-cljs name fields impls)\n       ~(apply make-record-updatable-clj  name fields impls))))\n\n;; ----------------------------------------------------------------------------\n\n(declare hash-datom equiv-datom seq-datom nth-datom assoc-datom val-at-datom)\n\n(defprotocol IDatom\n  (datom-tx [this])\n  (datom-added [this]))\n\n(deftype Datom #?(:clj [^int e a v ^int tx ^:unsynchronized-mutable ^int _hash]\n                  :cljs [^number e a v ^number tx ^:mutable ^number _hash])\n  IDatom\n  (datom-tx [d] (if (pos? tx) tx (- tx)))\n  (datom-added [d] (pos? tx))\n\n  #?@(:cljs\n       [IHash\n        (-hash [d] (if (zero? _hash)\n                     (set! _hash (hash-datom d))\n                     _hash))\n        IEquiv\n        (-equiv [d o] (and (instance? Datom o) (equiv-datom d o)))\n\n        ISeqable\n        (-seq [d] (seq-datom d))\n\n        ILookup\n        (-lookup [d k] (val-at-datom d k nil))\n        (-lookup [d k nf] (val-at-datom d k nf))\n\n        IIndexed\n        (-nth [this i] (nth-datom this i))\n        (-nth [this i not-found] (nth-datom this i not-found))\n        \n        IAssociative\n        (-assoc [d k v] (assoc-datom d k v))\n\n        IPrintWithWriter\n        (-pr-writer [d writer opts]\n                    (pr-sequential-writer writer pr-writer\n                                          \"#datascript/Datom [\" \" \" \"]\"\n                                          opts [(.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)]))]\n      :clj\n       [Object\n        (hashCode [d]\n          (if (zero? _hash)\n            (let [h (int (hash-datom d))]\n              (set! _hash h)\n              h)\n            _hash))\n        (toString [d] (pr-str d))\n\n        clojure.lang.IHashEq\n        (hasheq [d] (.hashCode d))\n\n        clojure.lang.Seqable\n        (seq [d] (seq-datom d))\n\n        clojure.lang.IPersistentCollection\n        (equiv [d o] (and (instance? Datom o) (equiv-datom d o)))\n        (empty [d] (throw (UnsupportedOperationException. \"empty is not supported on Datom\")))\n        (count [d] 5)\n        (cons [d [k v]] (assoc-datom d k v))\n        \n        clojure.lang.Indexed\n        (nth [this i]           (nth-datom this i))\n        (nth [this i not-found] (nth-datom this i not-found))\n\n        clojure.lang.ILookup\n        (valAt [d k] (val-at-datom d k nil))\n        (valAt [d k nf] (val-at-datom d k nf))\n\n        clojure.lang.Associative\n        (entryAt [d k] (some->> (val-at-datom d k nil) (clojure.lang.MapEntry k)))\n        (containsKey [e k] (#{:e :a :v :tx :added} k))\n        (assoc [d k v] (assoc-datom d k v))]\n))\n\n#?(:cljs (goog/exportSymbol \"datascript.db.Datom\" Datom))\n\n(defn ^Datom datom\n  ([e a v] (Datom. e a v tx0 0))\n  ([e a v tx] (Datom. e a v tx 0))\n  ([e a v tx added] (Datom. e a v (if added tx (- tx)) 0)))\n\n(defn datom? [x] (instance? Datom x))\n\n(defn- hash-datom [^Datom d]\n  (-> (hash (.-e d))\n      (combine-hashes (hash (.-a d)))\n      (combine-hashes (hash (.-v d)))))\n\n(defn- equiv-datom [^Datom d ^Datom o]\n  (and (== (.-e d) (.-e o))\n       (= (.-a d) (.-a o))\n       (= (.-v d) (.-v o))))\n\n(defn- seq-datom [^Datom d]\n  (list (.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)))\n\n;; keep it fast by duplicating for both keyword and string cases\n;; instead of using sets or some other matching func\n(defn- val-at-datom [^Datom d k not-found]\n  (case k\n    :e      (.-e d) \"e\"     (.-e d)\n    :a      (.-a d) \"a\"     (.-a d)\n    :v      (.-v d) \"v\"     (.-v d)\n    :tx     (datom-tx d)\n    \"tx\"    (datom-tx d)\n    :added  (datom-added d)\n    \"added\" (datom-added d)\n    not-found))\n\n(defn- nth-datom\n  ([^Datom d ^long i]\n    (case i\n      0 (.-e d)\n      1 (.-a d)\n      2 (.-v d)\n      3 (datom-tx d)\n      4 (datom-added d)\n        #?(:clj  (throw (IndexOutOfBoundsException.))\n           :cljs (throw (js/Error. (str \"Datom/-nth: Index out of bounds: \" i))))))\n  ([^Datom d ^long i not-found]\n    (case i\n      0 (.-e d)\n      1 (.-a d)\n      2 (.-v d)\n      3 (datom-tx d)\n      4 (datom-added d)\n        not-found)))\n\n(defn- ^Datom assoc-datom [^Datom d k v]\n  (case k\n    :e     (datom v       (.-a d) (.-v d) (datom-tx d) (datom-added d))\n    :a     (datom (.-e d) v       (.-v d) (datom-tx d) (datom-added d))\n    :v     (datom (.-e d) (.-a d) v       (datom-tx d) (datom-added d))\n    :tx    (datom (.-e d) (.-a d) (.-v d) v            (datom-added d))\n    :added (datom (.-e d) (.-a d) (.-v d) (datom-tx d) v)\n    (throw (IllegalArgumentException. (str \"invalid key for #datascript/Datom: \" k)))))\n\n;; printing and reading\n;; #datomic/DB {:schema <map>, :datoms <vector of [e a v tx]>}\n\n(defn ^Datom datom-from-reader [vec]\n  (apply datom vec))\n\n#?(:clj\n   (defmethod print-method Datom [^Datom d, ^java.io.Writer w]\n     (.write w (str \"#datascript/Datom \"))\n     (binding [*out* w]\n       (pr [(.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)]))))\n\n;; ----------------------------------------------------------------------------\n;; datom cmp macros/funcs\n;;\n\n#?(:clj\n  (defmacro combine-cmp [& comps]\n    (loop [comps (reverse comps)\n           res   (num 0)]\n      (if (not-empty comps)\n        (recur\n          (next comps)\n          `(let [c# ~(first comps)]\n             (if (== 0 c#)\n               ~res\n               c#)))\n        res))))\n\n#?(:clj\n   (defn- -case-tree [queries variants]\n     (if queries\n       (let [v1 (take (/ (count variants) 2) variants)\n             v2 (drop (/ (count variants) 2) variants)]\n         (list 'if (first queries)\n               (-case-tree (next queries) v1)\n               (-case-tree (next queries) v2)))\n       (first variants))))\n\n#?(:clj\n   (defmacro case-tree [qs vs]\n     (-case-tree qs vs)))\n\n(defn cmp [x y]\n  (if (nil? x) 0\n    (if (nil? y) 0\n      (compare x y))))\n\n(defn class-identical? [x y]\n  #?(:clj  (identical? (class x) (class y))\n     :cljs (identical? (type x) (type y))))\n\n(defn class-compare [x y]\n  #?(:clj  (compare (.getName (class x)) (.getName (class y)))\n     :cljs (garray/defaultCompare (type->str (type x)) (type->str (type y)))))\n\n(defn value-compare [x y]\n  (try \n    (cond\n      (= x y) 0\n      #?@(:clj  [(instance? Number x)       (clojure.lang.Numbers/compare x y)])\n      #?@(:clj  [(instance? Comparable x)   (.compareTo ^Comparable x y)]\n          :cljs [(satisfies? IComparable x) (-compare x y)])\n      (not (class-identical? x y)) (class-compare x y)\n      #?@(:cljs [(or (string? x) (array? x) (true? x) (false? x)) (garray/defaultCompare x y)])\n      :else (- (hash x) (hash y)))\n    (catch #?(:clj ClassCastException :cljs js/Error) e\n      (if (not (class-identical? x y))\n        (class-compare x y)\n        (throw e)))))\n\n(defn value-cmp [x y]\n  (cond \n    (nil? x) 0\n    (nil? y) 0\n    :else     (value-compare x y)))\n\n;; Slower cmp-* fns allows for datom fields to be nil.\n;; Such datoms come from slice method where they are used as boundary markers.\n\n(defn cmp-datoms-eavt [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp (.-a d1) (.-a d2))\n    (value-cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-aevt [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp (.-a d1) (.-a d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (value-cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-avet [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp (.-a d1) (.-a d2))\n    (value-cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n;; fast versions without nil checks\n\n(defn- cmp-attr-quick [a1 a2]\n  ;; either both are keywords or both are strings\n  #?(:cljs\n     (if (keyword? a1)\n       (-compare a1 a2)\n       (garray/defaultCompare a1 a2))\n     :clj\n     (.compareTo ^Comparable a1 a2)))\n\n(defn cmp-datoms-eav-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (value-compare (.-v d1) (.-v d2))))\n\n(defn cmp-datoms-eavt-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (value-compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-aevt-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (value-compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-avet-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (value-compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn- diff-sorted [a b cmp]\n  (loop [only-a []\n         only-b []\n         both   []\n         a      a\n         b      b]\n    (cond\n      (empty? a) [(not-empty only-a) (not-empty (into only-b b)) (not-empty both)]\n      (empty? b) [(not-empty (into only-a a)) (not-empty only-b) (not-empty both)]\n      :else\n      (let [first-a (first a)\n            first-b (first b)\n            diff (try\n                   (cmp first-a first-b)\n                   (catch #?(:clj ClassCastException :cljs js/Error) _\n                     :incomparable))]\n        (cond\n          (= diff :incomparable) (recur (conj only-a first-a) (conj only-b first-b) both                (next a) (next b))\n          (== diff 0)            (recur only-a                only-b                (conj both first-a) (next a) (next b))\n          (< diff 0)             (recur (conj only-a first-a) only-b                both                (next a) b)\n          (> diff 0)             (recur only-a                (conj only-b first-b) both                a        (next b)))))))\n\n;; ----------------------------------------------------------------------------\n\n(declare hash-db hash-fdb equiv-db empty-db resolve-datom validate-attr components->pattern indexing?)\n#?(:cljs (declare pr-db))\n\n;;;;;;;;;; Searching\n\n(defprotocol ISearch\n  (-search [data pattern]))\n\n(defn- ^Datom fsearch [data pattern]\n  (first (-search data pattern)))\n\n(defprotocol IIndexAccess\n  (-datoms [db index components])\n  (-seek-datoms [db index components])\n  (-rseek-datoms [db index components])\n  (-index-range [db attr start end]))\n\n(defn validate-indexed [db index components]\n  (when (= index :avet)\n    (when-some [attr (first components)]\n      (when-not (indexing? db attr)\n        (raise \"Attribute \" attr \" should be marked as :db/index true\"\n          {:error :index-access :index :avet :components components})))))\n\n(defprotocol IDB\n  (-schema [db])\n  (-attrs-by [db property]))\n\n;; ----------------------------------------------------------------------------\n\n(defn db-transient [db]\n  (-> db\n    (update :eavt transient)\n    (update :aevt transient)\n    (update :avet transient)))\n\n(defn db-persistent! [db]\n  (-> db\n    (update :eavt persistent!)\n    (update :aevt persistent!)\n    (update :avet persistent!)))\n\n(defrecord-updatable DB [schema eavt aevt avet max-eid max-tx rschema hash]\n  #?@(:cljs\n      [IHash                (-hash  [db]        (hash-db db))\n       IEquiv               (-equiv [db other]  (equiv-db db other))\n       IReversible          (-rseq  [db]        (-rseq (.-eavt db)))\n       ICounted             (-count [db]        (count (.-eavt db)))\n       IEmptyableCollection (-empty [db]        (with-meta (empty-db (.-schema db)) (meta db)))\n       IPrintWithWriter     (-pr-writer [db w opts] (pr-db db w opts))\n       IEditableCollection  (-as-transient [db] (db-transient db))\n       ITransientCollection (-conj! [db key] (throw (ex-info \"datascript.DB/conj! is not supported\" {})))\n                            (-persistent! [db] (db-persistent! db))]\n\n      :clj\n      [Object               (hashCode [db]      (hash-db db))\n       clojure.lang.IHashEq (hasheq [db]        (hash-db db))\n       clojure.lang.IPersistentCollection\n                            (count [db]         (count eavt))\n                            (equiv [db other]   (equiv-db db other))\n       clojure.lang.IEditableCollection \n                            (empty [db]         (with-meta (empty-db schema) (meta db)))\n                            (asTransient [db] (db-transient db))\n       clojure.lang.ITransientCollection\n                            (conj [db key] (throw (ex-info \"datascript.DB/conj! is not supported\" {})))\n                            (persistent [db] (db-persistent! db))])\n\n  IDB\n  (-schema [db] (.-schema db))\n  (-attrs-by [db property] ((.-rschema db) property))\n\n  ISearch\n  (-search [db pattern]\n    (let [[e a v tx] pattern\n          eavt       (.-eavt db)\n          aevt       (.-aevt db)\n          avet       (.-avet db)\n          multival?  (contains? (-attrs-by db :db.cardinality/many) a)]\n      (case-tree [e a (some? v) tx]\n        [(set/slice eavt (datom e a v tx) (datom e a v tx))                   ;; e a v tx\n         (set/slice eavt (datom e a v tx0) (datom e a v txmax))               ;; e a v _\n         (->> (set/slice eavt (datom e a nil tx0) (datom e a nil txmax))      ;; e a _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice eavt (datom e a nil tx0) (datom e a nil txmax))           ;; e a _ _\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ v tx\n              (filter (fn [^Datom d] (and (= v (.-v d))\n                                          (= tx (datom-tx d))))))\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ v _\n              (filter (fn [^Datom d] (= v (.-v d)))))\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))       ;; e _ _ _\n         (if (indexing? db a)                                                   ;; _ a v tx\n           (->> (set/slice avet (datom e0 a v tx0) (datom emax a v txmax))      \n                (filter (fn [^Datom d] (= tx (datom-tx d)))))\n           (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))\n                (filter (fn [^Datom d] (and (= v (.-v d))\n                                            (= tx (datom-tx d)))))))\n         (if (indexing? db a)                                                   ;; _ a v _\n           (set/slice avet (datom e0 a v tx0) (datom emax a v txmax))\n           (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))\n                (filter (fn [^Datom d] (= v (.-v d))))))\n         (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))  ;; _ a _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))       ;; _ a _ _\n         (filter (fn [^Datom d] (and (= v (.-v d))\n                                     (= tx (datom-tx d)))) eavt)                ;; _ _ v tx\n         (filter (fn [^Datom d] (= v (.-v d))) eavt)                            ;; _ _ v _\n         (filter (fn [^Datom d] (= tx (datom-tx d))) eavt)                      ;; _ _ _ tx\n         eavt])))                                                               ;; _ _ _ _\n\n  IIndexAccess\n  (-datoms [db index cs]\n    (validate-indexed db index cs)\n    (set/slice (get db index) (components->pattern db index cs e0 tx0) (components->pattern db index cs emax txmax)))\n\n  (-seek-datoms [db index cs]\n    (validate-indexed db index cs)\n    (set/slice (get db index) (components->pattern db index cs e0 tx0) (datom emax nil nil txmax)))\n\n  (-rseek-datoms [db index cs]\n    (validate-indexed db index cs)\n    (set/rslice (get db index) (components->pattern db index cs emax txmax) (datom e0 nil nil tx0)))\n\n  (-index-range [db attr start end]\n    (validate-indexed db :avet [attr])\n    (validate-attr attr (list '-index-range 'db attr start end))\n    (set/slice (.-avet db)\n      (resolve-datom db nil attr start nil e0 tx0)\n      (resolve-datom db nil attr end nil emax txmax)))\n                \n  clojure.data/EqualityPartition\n  (equality-partition [x] :datascript/db)\n\n  clojure.data/Diff\n  (diff-similar [a b]\n    (diff-sorted (:eavt a) (:eavt b) cmp-datoms-eav-quick)))\n\n(defn db? [x]\n  (and (satisfies? ISearch x)\n       (satisfies? IIndexAccess x)\n       (satisfies? IDB x)))\n\n;; ----------------------------------------------------------------------------\n(defrecord-updatable FilteredDB [unfiltered-db pred hash]\n  #?@(:cljs\n      [IHash                (-hash  [db]        (hash-fdb db))\n       IEquiv               (-equiv [db other]  (equiv-db db other))\n       ICounted             (-count [db]        (count (-datoms db :eavt [])))\n       IPrintWithWriter     (-pr-writer [db w opts] (pr-db db w opts))\n\n       IEmptyableCollection (-empty [_]         (throw (js/Error. \"-empty is not supported on FilteredDB\")))\n\n       ILookup              (-lookup ([_ _]     (throw (js/Error. \"-lookup is not supported on FilteredDB\")))\n                                     ([_ _ _]   (throw (js/Error. \"-lookup is not supported on FilteredDB\"))))\n\n\n       IAssociative         (-contains-key? [_ _] (throw (js/Error. \"-contains-key? is not supported on FilteredDB\")))\n                            (-assoc [_ _ _]       (throw (js/Error. \"-assoc is not supported on FilteredDB\")))]\n\n      :clj\n      [Object               (hashCode [db]      (hash-fdb db))\n\n       clojure.lang.IHashEq (hasheq [db]        (hash-fdb db))\n\n       clojure.lang.IPersistentCollection\n                            (count [db]         (count (-datoms db :eavt [])))\n                            (equiv [db o]       (equiv-db db o))\n                            (cons [db [k v]]    (throw (UnsupportedOperationException. \"cons is not supported on FilteredDB\")))\n                            (empty [db]         (throw (UnsupportedOperationException. \"empty is not supported on FilteredDB\")))\n\n       clojure.lang.ILookup (valAt [db k]       (throw (UnsupportedOperationException. \"valAt/2 is not supported on FilteredDB\")))\n                            (valAt [db k nf]    (throw (UnsupportedOperationException. \"valAt/3 is not supported on FilteredDB\")))\n       clojure.lang.IKeywordLookup (getLookupThunk [db k]\n                                                (throw (UnsupportedOperationException. \"getLookupThunk is not supported on FilteredDB\")))\n\n       clojure.lang.Associative\n                            (containsKey [e k]  (throw (UnsupportedOperationException. \"containsKey is not supported on FilteredDB\")))\n                            (entryAt [db k]     (throw (UnsupportedOperationException. \"entryAt is not supported on FilteredDB\")))\n                            (assoc [db k v]     (throw (UnsupportedOperationException. \"assoc is not supported on FilteredDB\")))])\n\n  IDB\n  (-schema [db]\n    (-schema (.-unfiltered-db db)))\n\n  (-attrs-by [db property]\n    (-attrs-by (.-unfiltered-db db) property))\n\n  ISearch\n  (-search [db pattern]\n    (filter (.-pred db) (-search (.-unfiltered-db db) pattern)))\n\n  IIndexAccess\n  (-datoms [db index cs]\n    (filter (.-pred db) (-datoms (.-unfiltered-db db) index cs)))\n\n  (-seek-datoms [db index cs]\n    (filter (.-pred db) (-seek-datoms (.-unfiltered-db db) index cs)))\n\n  (-rseek-datoms [db index cs]\n    (filter (.-pred db) (-rseek-datoms (.-unfiltered-db db) index cs)))\n\n  (-index-range [db attr start end]\n    (filter (.-pred db) (-index-range (.-unfiltered-db db) attr start end))))\n\n;; ----------------------------------------------------------------------------\n\n(defn attr->properties [k v]\n  (case v\n    :db.unique/identity  [:db/unique :db.unique/identity :db/index]\n    :db.unique/value     [:db/unique :db.unique/value :db/index]\n    :db.cardinality/many [:db.cardinality/many]\n    :db.type/ref         [:db.type/ref :db/index]\n    (cond\n      (and (= :db/isComponent k) (true? v)) [:db/isComponent]\n      (and (= :db/index k) (true? v))       [:db/index]\n      (= :db/tupleAttrs k)                  [:db.type/tuple :db/index]\n      :else [])))\n\n(defn attr-tuples\n  \"e.g. :reg/semester => #{:reg/semester+course+student ...}\"\n  [schema rschema]\n  (reduce\n    (fn [m tuple-attr] ;; e.g. :reg/semester+course+student\n      (reduce-indexed\n        (fn [m src-attr idx] ;; e.g. :reg/semester\n          (update m src-attr assoc tuple-attr idx))\n        m\n        (-> schema tuple-attr :db/tupleAttrs)))\n    {}\n    (:db.type/tuple rschema)))\n\n(defn- rschema\n  \":db/unique           => #{attr ...}\n   :db.unique/identity  => #{attr ...}\n   :db.unique/value     => #{attr ...}\n   :db/index            => #{attr ...}\n   :db.cardinality/many => #{attr ...}\n   :db.type/ref         => #{attr ...}\n   :db/isComponent      => #{attr ...}\n   :db.type/tuple       => #{attr ...}\n   :db/attrTuples       => {attr => {tuple-attr => idx}}\"\n  [schema]\n  (let [rschema (reduce-kv\n                  (fn [rschema attr attr-schema]\n                    (reduce-kv\n                      (fn [rschema key value]\n                        (reduce\n                          (fn [rschema prop]\n                            (update rschema prop conjs attr))\n                          rschema (attr->properties key value)))\n                      rschema attr-schema))\n                  {} schema)]\n    (assoc rschema :db/attrTuples (attr-tuples schema rschema))))\n\n(defn- validate-schema-key [a k v expected]\n  (when-not (or (nil? v)\n                (contains? expected v))\n    (throw (ex-info (str \"Bad attribute specification for \" (pr-str {a {k v}}) \", expected one of \" expected)\n                    {:error :schema/validation\n                     :attribute a\n                     :key k\n                     :value v}))))\n\n(defn- validate-schema [schema]\n  (doseq [[a kv] schema]\n\n    ;; isComponent\n    (let [comp? (:db/isComponent kv false)]\n      (validate-schema-key a :db/isComponent (:db/isComponent kv) #{true false})\n      (when (and comp? (not= (:db/valueType kv) :db.type/ref))\n        (raise \"Bad attribute specification for \" a \": {:db/isComponent true} should also have {:db/valueType :db.type/ref}\"\n          {:error     :schema/validation\n           :attribute a\n           :key       :db/isComponent})))\n\n    (validate-schema-key a :db/unique (:db/unique kv) #{:db.unique/value :db.unique/identity})\n    (validate-schema-key a :db/valueType (:db/valueType kv) #{:db.type/ref})\n    (validate-schema-key a :db/cardinality (:db/cardinality kv) #{:db.cardinality/one :db.cardinality/many})\n\n    ;; :db/tupleAttrs is a non-empty sequential coll\n    (when (contains? kv :db/tupleAttrs)\n      (let [ex-data {:error :schema/validation\n                     :attribute a\n                     :key :db/tupleAttrs}]\n        (when (= :db.cardinality/many (:db/cardinality kv))\n          (raise a \" has :db/tupleAttrs, must be :db.cardinality/one\" ex-data))\n\n        (let [attrs (:db/tupleAttrs kv)]\n          (when-not (sequential? attrs)\n            (raise a \" :db/tupleAttrs must be a sequential collection, got: \" attrs ex-data))\n\n          (when (empty? attrs)\n            (raise a \" :db/tupleAttrs can\u2019t be empty\" ex-data))\n\n          (doseq [attr attrs\n                  :let [ex-data (assoc ex-data :value attr)]]\n            (when (contains? (get schema attr) :db/tupleAttrs)\n              (raise a \" :db/tupleAttrs can\u2019t depend on another tuple attribute: \" attr ex-data))\n\n            (when (= :db.cardinality/many (:db/cardinality (get schema attr)))\n              (raise a \" :db/tupleAttrs can\u2019t depend on :db.cardinality/many attribute: \" attr ex-data))))))))\n\n(defn ^DB empty-db\n  ([] (empty-db nil))\n  ([schema]\n    {:pre [(or (nil? schema) (map? schema))]}\n    (validate-schema schema)\n    (map->DB\n      {:schema  schema\n       :rschema (rschema (merge implicit-schema schema))\n       :eavt    (set/sorted-set-by cmp-datoms-eavt)\n       :aevt    (set/sorted-set-by cmp-datoms-aevt)\n       :avet    (set/sorted-set-by cmp-datoms-avet)\n       :max-eid e0\n       :max-tx  tx0\n       :hash    (atom 0)})))\n\n(defn- init-max-eid [eavt]\n  (or (-> (set/rslice eavt (datom (dec tx0) nil nil txmax) (datom e0 nil nil tx0))\n        (first)\n        (:e))\n    e0))\n\n(defn ^DB init-db\n  ([datoms] (init-db datoms nil))\n  ([datoms schema]\n    (when-some [not-datom (first (drop-while datom? datoms))]\n      (raise \"init-db expects list of Datoms, got \" (type not-datom)\n        {:error :init-db}))\n    (validate-schema schema)\n    (let [rschema     (rschema (merge implicit-schema schema))\n          indexed     (:db/index rschema)\n          arr         (cond-> datoms\n                        (not (arrays/array? datoms)) (arrays/into-array))\n          _           (arrays/asort arr cmp-datoms-eavt-quick)\n          eavt        (set/from-sorted-array cmp-datoms-eavt arr)\n          _           (arrays/asort arr cmp-datoms-aevt-quick)\n          aevt        (set/from-sorted-array cmp-datoms-aevt arr)\n          avet-datoms (filter (fn [^Datom d] (contains? indexed (.-a d))) datoms)\n          avet-arr    (to-array avet-datoms)\n          _           (arrays/asort avet-arr cmp-datoms-avet-quick)\n          avet        (set/from-sorted-array cmp-datoms-avet avet-arr)\n          max-eid     (init-max-eid eavt)\n          max-tx      (transduce (map (fn [^Datom d] (datom-tx d))) max tx0 eavt)]\n      (map->DB {\n        :schema  schema\n        :rschema rschema\n        :eavt    eavt\n        :aevt    aevt\n        :avet    avet\n        :max-eid max-eid\n        :max-tx  max-tx\n        :hash    (atom 0)}))))\n\n(defn- equiv-db-index [x y]\n  (loop [xs (seq x)\n         ys (seq y)]\n    (cond\n      (nil? xs) (nil? ys)\n      (= (first xs) (first ys)) (recur (next xs) (next ys))\n      :else false)))\n\n(defn- hash-db [^DB db]\n  (let [h @(.-hash db)]\n    (if (zero? h)\n      (reset! (.-hash db) (combine-hashes (hash (.-schema db))\n                                          (hash (.-eavt db))))\n      h)))\n\n(defn- hash-fdb [^FilteredDB db]\n  (let [h @(.-hash db)\n        datoms (or (-datoms db :eavt []) #{})]\n    (if (zero? h)\n      (let [datoms (or (-datoms db :eavt []) #{})]\n        (reset! (.-hash db) (combine-hashes (hash (-schema db))\n                                            (hash-unordered-coll datoms))))\n      h)))\n\n(defn- equiv-db [db other]\n  (and (or (instance? DB other) (instance? FilteredDB other))\n       (= (-schema db) (-schema other))\n       (equiv-db-index (-datoms db :eavt []) (-datoms other :eavt []))))\n\n#?(:cljs\n   (defn pr-db [db w opts]\n     (-write w \"#datascript/DB {\")\n     (-write w \":schema \")\n     (pr-writer (-schema db) w opts)\n     (-write w \", :datoms \")\n     (pr-sequential-writer w\n                           (fn [d w opts]\n                             (pr-sequential-writer w pr-writer \"[\" \" \" \"]\" opts [(.-e d) (.-a d) (.-v d) (datom-tx d)]))\n                           \"[\" \" \" \"]\" opts (-datoms db :eavt []))\n     (-write w \"}\")))\n\n#?(:clj\n   (do\n     (defn pr-db [db, ^java.io.Writer w]\n       (.write w (str \"#datascript/DB {\"))\n       (.write w \":schema \")\n       (binding [*out* w]\n         (pr (-schema db))\n         (.write w \", :datoms [\")\n         (apply pr (map (fn [^Datom d] [(.-e d) (.-a d) (.-v d) (datom-tx d)]) (-datoms db :eavt []))))\n       (.write w \"]}\"))\n\n     (defmethod print-method DB [db w] (pr-db db w))\n     (defmethod print-method FilteredDB [db w] (pr-db db w))     \n))\n\n(defn db-from-reader [{:keys [schema datoms]}]\n  (init-db (map (fn [[e a v tx]] (datom e a v tx)) datoms) schema))\n\n;; ----------------------------------------------------------------------------\n\n(declare entid-strict entid-some ref?)\n\n(defn- resolve-datom [db e a v t default-e default-tx]\n  (when a (validate-attr a (list 'resolve-datom 'db e a v t)))\n  (datom\n    (or (entid-some db e) default-e)  ;; e\n    a                                 ;; a\n    (if (and (some? v) (ref? db a))   ;; v\n      (entid-strict db v)\n      v)\n    (or (entid-some db t) default-tx))) ;; t\n\n(defn- components->pattern [db index [c0 c1 c2 c3] default-e default-tx]\n  (case index\n    :eavt (resolve-datom db c0 c1 c2 c3 default-e default-tx)\n    :aevt (resolve-datom db c1 c0 c2 c3 default-e default-tx)\n    :avet (resolve-datom db c2 c0 c1 c3 default-e default-tx)))\n\n;; ----------------------------------------------------------------------------\n\n(defrecord TxReport [db-before db-after tx-data tempids tx-meta])\n\n(defn #?@(:clj  [^Boolean is-attr?]\n          :cljs [^boolean is-attr?]) [db attr property]\n  (contains? (-attrs-by db property) attr))\n\n(defn #?@(:clj  [^Boolean multival?]\n          :cljs [^boolean multival?]) [db attr]\n  (is-attr? db attr :db.cardinality/many))\n\n(defn #?@(:clj  [^Boolean ref?]\n          :cljs [^boolean ref?]) [db attr]\n  (is-attr? db attr :db.type/ref))\n\n(defn #?@(:clj  [^Boolean component?]\n          :cljs [^boolean component?]) [db attr]\n  (is-attr? db attr :db/isComponent))\n\n(defn #?@(:clj  [^Boolean indexing?]\n          :cljs [^boolean indexing?]) [db attr]\n  (is-attr? db attr :db/index))\n\n(defn #?@(:clj  [^Boolean tuple?]\n          :cljs [^boolean tuple?]) [db attr]\n  (is-attr? db attr :db.type/tuple))\n\n(defn #?@(:clj  [^Boolean tuple-source?]\n          :cljs [^boolean tuple-source?]) [db attr]\n  (is-attr? db attr :db/attrTuples))\n\n(defn entid [db eid]\n  {:pre [(db? db)]}\n  (cond\n    (and (number? eid) (pos? eid))\n    (if (> eid emax)\n      (raise \"Highest supported entity id is \" emax \", got \" eid {:error :entity-id :value eid})\n      eid)\n    \n    (sequential? eid)\n    (let [[attr value] eid]\n      (cond\n        (not= (count eid) 2)\n          (raise \"Lookup ref should contain 2 elements: \" eid\n            {:error :lookup-ref/syntax, :entity-id eid})\n        (not (is-attr? db attr :db/unique))\n          (raise \"Lookup ref attribute should be marked as :db/unique: \" eid\n            {:error :lookup-ref/unique, :entity-id eid})\n        (nil? value)\n          nil\n        :else\n          (-> (-datoms db :avet eid) first :e)))\n    \n    #?@(:cljs [(array? eid) (recur db (array-seq eid))])\n    \n    (keyword? eid)\n    (-> (-datoms db :avet [:db/ident eid]) first :e)\n\n    :else\n    (raise \"Expected number or lookup ref for entity id, got \" eid\n      {:error :entity-id/syntax, :entity-id eid})))\n\n(defn entid-strict [db eid]\n  (or (entid db eid)\n      (raise \"Nothing found for entity id \" eid\n             {:error :entity-id/missing\n              :entity-id eid})))\n\n(defn entid-some [db eid]\n  (when eid\n    (entid-strict db eid)))\n\n;;;;;;;;;; Transacting\n\n(defn validate-datom [db ^Datom datom]\n  (when (and (datom-added datom)\n             (is-attr? db (.-a datom) :db/unique))\n    (when-some [found (not-empty (-datoms db :avet [(.-a datom) (.-v datom)]))]\n      (raise \"Cannot add \" datom \" because of unique constraint: \" found\n             {:error :transact/unique\n              :attribute (.-a datom)\n              :datom datom}))))\n\n(defn- validate-attr [attr at]\n  (when-not (or (keyword? attr) (string? attr))\n    (raise \"Bad entity attribute \" attr \" at \" at \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr, :context at})))\n\n(defn- validate-val [v at]\n  (when (nil? v)\n    (raise \"Cannot store nil as a value at \" at\n           {:error :transact/syntax, :value v, :context at})))\n\n(defn- current-tx [report]\n  (inc (get-in report [:db-before :max-tx])))\n\n(defn- next-eid [db]\n  (inc (:max-eid db)))\n\n(defn- #?@(:clj  [^Boolean tx-id?]\n           :cljs [^boolean tx-id?])\n  [e]\n  (or (= e :db/current-tx)\n      (= e \":db/current-tx\") ;; for datascript.js interop\n      (= e \"datomic.tx\")\n      (= e \"datascript.tx\")))\n\n(defn- #?@(:clj  [^Boolean tempid?]\n           :cljs [^boolean tempid?])\n  [x]\n  (or (and (number? x) (neg? x)) (string? x)))\n\n(defn- new-eid? [db eid]\n  (and (> eid (:max-eid db))\n       (< eid tx0))) ;; tx0 is max eid\n\n(defn- advance-max-eid [db eid]\n  (cond-> db\n    (new-eid? db eid)\n      (assoc :max-eid eid)))\n\n(defn- allocate-eid\n  ([report eid]\n    (update report :db-after advance-max-eid eid))\n  ([report e eid]\n    (cond-> report\n      (tx-id? e)\n      (update :tempids assoc e eid)\n\n      (tempid? e)\n      (update :tempids assoc e eid)\n\n      (and (not (tempid? e)) (new-eid? (:db-after report) eid))\n      (update :tempids assoc eid eid)\n\n      true\n      (update :db-after advance-max-eid eid))))\n\n;; In context of `with-datom` we can use faster comparators which\n;; do not check for nil (~10-15% performance gain in `transact`)\n\n(defn- with-datom [db ^Datom datom]\n  (validate-datom db datom)\n  (let [indexing? (indexing? db (.-a datom))]\n    (if (datom-added datom)\n      (cond-> db\n        true      (update :eavt set/conj datom cmp-datoms-eavt-quick)\n        true      (update :aevt set/conj datom cmp-datoms-aevt-quick)\n        indexing? (update :avet set/conj datom cmp-datoms-avet-quick)\n        true      (advance-max-eid (.-e datom))\n        true      (assoc :hash (atom 0)))\n      (if-some [removing (fsearch db [(.-e datom) (.-a datom) (.-v datom)])]\n        (cond-> db\n          true      (update :eavt set/disj removing cmp-datoms-eavt-quick)\n          true      (update :aevt set/disj removing cmp-datoms-aevt-quick)\n          indexing? (update :avet set/disj removing cmp-datoms-avet-quick)\n          true      (assoc :hash (atom 0)))\n        db))))\n\n(defn- queue-tuple [queue tuple idx db e a v]\n  (let [tuple-value  (or (get queue tuple)\n                       (:v (first (-datoms db :eavt [e tuple])))\n                       (vec (repeat (-> db (-schema) (get tuple) :db/tupleAttrs count) nil)))\n        tuple-value' (assoc tuple-value idx v)]\n    (assoc queue tuple tuple-value')))\n\n(defn- queue-tuples [queue tuples db e a v]\n  (reduce-kv\n    (fn [queue tuple idx]\n      (queue-tuple queue tuple idx db e a v))\n    queue\n    tuples))\n\n(defn- transact-report [report datom]\n  (let [db      (:db-after report)\n        a       (:a datom)\n        report' (-> report\n                  (assoc :db-after (with-datom db datom))\n                  (update :tx-data conj datom))]\n    (if (tuple-source? db a)\n      (let [e      (:e datom)\n            v      (if (datom-added datom) (:v datom) nil)\n            queue  (or (-> report' ::queued-tuples (get e)) {})\n            tuples (get (-attrs-by db :db/attrTuples) a)\n            queue' (queue-tuples queue tuples db e a v)]\n        (update report' ::queued-tuples assoc e queue'))\n      report')))\n\n(defn #?@(:clj  [^Boolean reverse-ref?]\n          :cljs [^boolean reverse-ref?]) [attr]\n  (cond\n    (keyword? attr)\n    (= \\_ (nth (name attr) 0))\n    \n    (string? attr)\n    (boolean (re-matches #\"(?:([^/]+)/)?_([^/]+)\" attr))\n   \n    :else\n    (raise \"Bad attribute type: \" attr \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr})))\n\n(defn reverse-ref [attr]\n  (cond\n    (keyword? attr)\n    (if (reverse-ref? attr)\n      (keyword (namespace attr) (subs (name attr) 1))\n      (keyword (namespace attr) (str \"_\" (name attr))))\n\n   (string? attr)\n   (let [[_ ns name] (re-matches #\"(?:([^/]+)/)?([^/]+)\" attr)]\n     (if (= \\_ (nth name 0))\n       (if ns (str ns \"/\" (subs name 1)) (subs name 1))\n       (if ns (str ns \"/_\" name) (str \"_\" name))))\n   \n   :else\n    (raise \"Bad attribute type: \" attr \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr})))\n\n(defn- resolve-upserts\n  \"Returns [entity' upserts]. Upsert attributes that resolve to existing entities\n   are removed from entity, rest are kept in entity for insertion. No validation is performed.\n\n   upserts :: {:name  {\\\"Ivan\\\"  1}\n               :email {\\\"ivan@\\\" 2}\n               :alias {\\\"abc\\\"   3\n                       \\\"def\\\"   4}}}\"\n  [db entity]\n  (if-some [idents (not-empty (-attrs-by db :db.unique/identity))]\n    (let [resolve (fn [a v]\n                    (:e (first (-datoms db :avet [a v]))))\n          split   (fn [a vs]\n                    (reduce\n                      (fn [acc v]\n                        (if-some [e (resolve a v)]\n                          (update acc 1 assoc v e)\n                          (update acc 0 conj v)))\n                      [[] {}] vs))]\n      (reduce-kv\n        (fn [[entity upserts] a v]\n          (cond\n            (not (contains? idents a))\n            [(assoc entity a v) upserts]\n\n            (and\n              (multival? db a)\n              (or\n                (arrays/array? v)\n                (and (coll? v) (not (map? v)))))\n            (let [[insert upsert] (split a v)]\n              [(cond-> entity\n                 (not (empty? insert)) (assoc a insert))\n               (cond-> upserts\n                 (not (empty? upsert)) (assoc a upsert))])\n\n            :else\n            (if-some [e (resolve a v)]\n              [entity (assoc upserts a {v e})]\n              [(assoc entity a v) upserts])))\n        [{} {}]\n        entity))\n    [entity nil]))\n\n(defn validate-upserts\n  \"Throws if not all upserts point to the same entity. \n   Returns single eid that all upserts point to, or null.\"\n  [entity upserts]\n  (let [upsert-ids (reduce-kv\n                     (fn [m a v->e]\n                       (reduce-kv\n                         (fn [m v e]\n                           (assoc m e [a v]))\n                         m v->e))\n                     {} upserts)]\n    (if (<= 2 (count upsert-ids))\n      (let [[e1 [a1 v1]] (first upsert-ids)\n            [e2 [a2 v2]] (second upsert-ids)]\n        (raise \"Conflicting upserts: \" [a1 v1] \" resolves to \" e1 \", but \" [a2 v2] \" resolves to \" e2\n          {:error     :transact/upsert\n           :assertion [e1 a1 v1]\n           :conflict  [e2 a2 v2]}))\n      (let [[upsert-id [a v]] (first upsert-ids)\n            eid (:db/id entity)]\n        (when (and\n                (some? upsert-id)\n                (some? eid)\n                (not (tempid? eid))\n                (not= upsert-id eid))\n          (raise \"Conflicting upsert: \" [a v] \" resolves to \" upsert-id \", but entity already has :db/id \" eid\n            {:error     :transact/upsert\n             :assertion [upsert-id a v]\n             :conflict  {:db/id eid}}))\n        upsert-id))))\n\n;; multivals/reverse can be specified as coll or as a single value, trying to guess\n(defn- maybe-wrap-multival [db a vs]\n  (cond\n    ;; not a multival context\n    (not (or (reverse-ref? a)\n             (multival? db a)))\n    [vs]\n\n    ;; not a collection at all, so definitely a single value\n    (not (or (arrays/array? vs)\n             (and (coll? vs) (not (map? vs)))))\n    [vs]\n    \n    ;; probably lookup ref\n    (and (= (count vs) 2)\n         (is-attr? db (first vs) :db.unique/identity))\n    [vs]\n    \n    :else vs))\n\n(defn- explode [db entity]\n  (let [eid (:db/id entity)]\n    (for [[a vs] entity\n          :when  (not= a :db/id)\n          :let   [_          (validate-attr a {:db/id eid, a vs})\n                  reverse?   (reverse-ref? a)\n                  straight-a (if reverse? (reverse-ref a) a)\n                  _          (when (and reverse? (not (ref? db straight-a)))\n                               (raise \"Bad attribute \" a \": reverse attribute name requires {:db/valueType :db.type/ref} in schema\"\n                                      {:error :transact/syntax, :attribute a, :context {:db/id eid, a vs}}))]\n          v      (maybe-wrap-multival db a vs)]\n      (if (and (ref? db straight-a) (map? v)) ;; another entity specified as nested map\n        (assoc v (reverse-ref a) eid)\n        (if reverse?\n          [:db/add v   straight-a eid]\n          [:db/add eid straight-a v])))))\n\n(defn- transact-add [report [_ e a v tx :as ent]]\n  (validate-attr a ent)\n  (validate-val  v ent)\n  (let [tx        (or tx (current-tx report))\n        db        (:db-after report)\n        e         (entid-strict db e)\n        v         (if (ref? db a) (entid-strict db v) v)\n        new-datom (datom e a v tx)\n        multival? (multival? db a)\n        old-datom ^Datom (if multival?\n                           (fsearch db [e a v])\n                           (fsearch db [e a]))]\n      (cond\n        (nil? old-datom)\n        (transact-report report new-datom)\n\n        (= (.-v old-datom) v)\n        (update report ::tx-redundant conjv new-datom)\n\n        :else\n        (-> report\n          (transact-report (datom e a (.-v old-datom) tx false))\n          (transact-report new-datom)))))\n\n(defn- transact-retract-datom [report ^Datom d]\n  (let [tx (current-tx report)]\n    (transact-report report (datom (.-e d) (.-a d) (.-v d) tx false))))\n\n(defn- retract-components [db datoms]\n  (into #{} (comp\n              (filter (fn [^Datom d] (component? db (.-a d))))\n              (map (fn [^Datom d] [:db.fn/retractEntity (.-v d)]))) datoms))\n\n(declare transact-tx-data)\n\n(defn- retry-with-tempid [initial-report report es tempid upserted-eid]\n  (if (contains? (:tempids initial-report) tempid)\n    (raise \"Conflicting upsert: \" tempid \" resolves\"\n           \" both to \" upserted-eid \" and \" (get-in initial-report [:tempids tempid])\n      {:error :transact/upsert})\n    ;; try to re-run from the beginning\n    ;; but remembering that `tempid` will resolve to `upserted-eid`\n    (let [tempids' (-> (:tempids report)\n                     (assoc tempid upserted-eid))\n          report'  (assoc initial-report :tempids tempids')]\n      (transact-tx-data report' es))))\n\n(def builtin-fn?\n  #{:db.fn/call\n    :db.fn/cas\n    :db/cas\n    :db/add\n    :db/retract\n    :db.fn/retractAttribute\n    :db.fn/retractEntity\n    :db/retractEntity})\n\n(defn flush-tuples [report]\n  (let [db          (:db-after report)\n        schema      (-schema db)\n        attr-tuples (-attrs-by db :db/attrTuples)]\n    (reduce-kv\n      (fn [entities eid tuples+values]\n        (reduce-kv\n          (fn [entities tuple value]\n            (let [value   (if (every? nil? value) nil value)\n                  current (:v (first (-datoms db :eavt [eid tuple])))]\n              (cond\n                (= value current) entities\n                (nil? value)      (conj entities ^::internal [:db/retract eid tuple current])\n                :else             (conj entities ^::internal [:db/add eid tuple value]))))\n          entities\n          tuples+values))\n      []\n      (::queued-tuples report))))\n\n(defn check-value-tempids [report]\n  (let [all-tempids (::value-tempids report)\n        reduce-fn   (fn [tempids datom]\n                      (if (datom-added datom)\n                        (dissoc tempids (:e datom))\n                        tempids))\n        unused      (reduce reduce-fn all-tempids (concat (:tx-data report) (::tx-redundant report)))]\n    (if (empty? unused)\n      (dissoc report ::value-tempids ::tx-redundant)\n      (raise \"Tempids used only as value in transaction: \" (sort (vals unused))\n        {:error :transact/syntax, :tempids unused}))))\n\n(defn transact-tx-data [initial-report initial-es]\n  (when-not (or (nil? initial-es)\n                (sequential? initial-es))\n    (raise \"Bad transaction data \" initial-es \", expected sequential collection\"\n           {:error :transact/syntax, :tx-data initial-es}))\n  (let [initial-report' (-> initial-report\n                          #_(update :db-after transient))\n        has-tuples?     (not (empty? (-attrs-by (:db-after initial-report) :db.type/tuple)))\n        initial-es'     (if has-tuples?\n                          (interleave initial-es (repeat ::flush-tuples))\n                          initial-es)]\n    (loop [report initial-report'\n           es     initial-es']\n      (cond+\n        (empty? es)\n        (-> report\n          (check-value-tempids)\n          (update :tempids assoc :db/current-tx (current-tx report))\n          (update :db-after update :max-tx inc)\n          #_(update :db-after persistent!))\n\n        :let [[entity & entities] es]\n\n        (nil? entity)\n        (recur report entities)\n\n        (= ::flush-tuples entity)\n        (if (contains? report ::queued-tuples)\n          (recur\n            (dissoc report ::queued-tuples)\n            (concat (flush-tuples report) entities))\n          (recur report entities))\n\n        :let [db      (:db-after report)\n              tempids (:tempids report)]\n\n        (map? entity)\n        (let [old-eid (:db/id entity)]\n          (cond+\n            ;; trivial entity\n            ; (if (contains? entity :db/id)\n            ;   (= 1 (count entity))\n            ;   (= 0 (count entity)))\n            ; (recur report entities)\n\n            ;; :db/current-tx / \"datomic.tx\" => tx\n            (tx-id? old-eid)\n            (let [id (current-tx report)]\n              (recur (allocate-eid report old-eid id)\n                     (cons (assoc entity :db/id id) entities)))\n           \n            ;; lookup-ref => resolved | error\n            (sequential? old-eid)\n            (let [id (entid-strict db old-eid)]\n              (recur report\n                     (cons (assoc entity :db/id id) entities)))\n           \n            ;; upserted => explode | error\n            :let [[entity' upserts] (resolve-upserts db entity)\n                  upserted-eid      (validate-upserts entity' upserts)]\n\n            (some? upserted-eid)\n            (if (and (tempid? old-eid)\n                     (contains? tempids old-eid)\n                     (not= upserted-eid (get tempids old-eid)))\n              (retry-with-tempid initial-report report initial-es old-eid upserted-eid)\n              (recur (allocate-eid report old-eid upserted-eid)\n                     (concat (explode db (assoc entity' :db/id upserted-eid)) entities)))\n           \n            ;; resolved | allocated-tempid | tempid | nil => explode\n            (or (number? old-eid)\n                (nil?    old-eid)\n                (string? old-eid))\n            (let [new-eid (cond\n                            (nil? old-eid)    (next-eid db)\n                            (tempid? old-eid) (or (get tempids old-eid) (next-eid db))\n                            :else             old-eid)\n                  new-entity (assoc entity :db/id new-eid)]                \n              (recur (allocate-eid report old-eid new-eid)\n                     (concat (explode db new-entity) entities)))\n           \n            ;; trash => error\n            :else\n            (raise \"Expected number, string or lookup ref for :db/id, got \" old-eid\n              { :error :entity-id/syntax, :entity entity })))\n\n        (sequential? entity)\n        (let [[op e a v] entity]\n          (cond\n            (= op :db.fn/call)\n            (let [[_ f & args] entity]\n              (recur report (concat (apply f db args) entities)))\n            \n            (and (keyword? op)\n              (not (builtin-fn? op)))\n            (if-some [ident (entid db op)]\n              (let [fun  (:v (fsearch db [ident :db/fn]))\n                    args (next entity)]\n                (if (fn? fun)\n                  (recur report (concat (apply fun db args) entities))\n                  (raise \"Entity \" op \" expected to have :db/fn attribute with fn? value\"\n                         {:error :transact/syntax, :operation :db.fn/call, :tx-data entity})))\n              (raise \"Can\u2019t find entity for transaction fn \" op\n                     {:error :transact/syntax, :operation :db.fn/call, :tx-data entity}))\n            \n            (and (tempid? e)\n              (not= op :db/add))\n            (raise \"Can't use tempid in '\" entity \"'. Tempids are allowed in :db/add only\"\n              { :error :transact/syntax, :op entity })\n\n            (or (= op :db.fn/cas)\n              (= op :db/cas))\n            (let [[_ e a ov nv] entity\n                  e (entid-strict db e)\n                  _ (validate-attr a entity)\n                  ov (if (ref? db a) (entid-strict db ov) ov)\n                  nv (if (ref? db a) (entid-strict db nv) nv)\n                  _ (validate-val nv entity)\n                  datoms (vec (-search db [e a]))]\n              (if (multival? db a)\n                (if (some (fn [^Datom d] (= (.-v d) ov)) datoms)\n                  (recur (transact-add report [:db/add e a nv]) entities)\n                  (raise \":db.fn/cas failed on datom [\" e \" \" a \" \" (map :v datoms) \"], expected \" ov\n                         {:error :transact/cas, :old datoms, :expected ov, :new nv}))\n                (let [v (:v (first datoms))]\n                  (if (= v ov)\n                    (recur (transact-add report [:db/add e a nv]) entities)\n                    (raise \":db.fn/cas failed on datom [\" e \" \" a \" \" v \"], expected \" ov\n                           {:error :transact/cas, :old (first datoms), :expected ov, :new nv })))))\n\n            (tx-id? e)\n            (recur (allocate-eid report e (current-tx report)) (cons [op (current-tx report) a v] entities))\n\n            (and (ref? db a) (tx-id? v))\n            (recur (allocate-eid report v (current-tx report)) (cons [op e a (current-tx report)] entities))\n\n            (and (ref? db a) (tempid? v))\n            (if-some [resolved (get tempids v)]\n              (let [report' (update report ::value-tempids assoc resolved v)]\n                (recur report' (cons [op e a resolved] entities)))\n              (let [resolved (next-eid db)\n                    report'  (-> report\n                               (allocate-eid v resolved)\n                               (update ::value-tempids assoc resolved v))]\n                (recur report' es)))\n\n            (tempid? e)\n            (let [upserted-eid  (when (is-attr? db a :db.unique/identity)\n                                  (:e (first (-datoms db :avet [a v]))))\n                  allocated-eid (get tempids e)]\n              (if (and upserted-eid allocated-eid (not= upserted-eid allocated-eid))\n                (retry-with-tempid initial-report report initial-es e upserted-eid)\n                (let [eid (or upserted-eid allocated-eid (next-eid db))]\n                  (recur (allocate-eid report e eid) (cons [op eid a v] entities)))))\n\n            (and (not (::internal (meta entity)))\n              (tuple? db a))\n            (raise \"Can\u2019t modify tuple attrs directly: \" entity\n              {:error :transact/syntax, :tx-data entity})\n\n            (= op :db/add)\n            (recur (transact-add report entity) entities)\n\n            (and (= op :db/retract) (some? v))\n            (if-some [e (entid db e)]\n              (let [v (if (ref? db a) (entid-strict db v) v)]\n                (validate-attr a entity)\n                (validate-val v entity)\n                (if-some [old-datom (fsearch db [e a v])]\n                  (recur (transact-retract-datom report old-datom) entities)\n                  (recur report entities)))\n              (recur report entities))\n\n            (or (= op :db.fn/retractAttribute)\n                (= op :db/retract))\n            (if-some [e (entid db e)]\n              (let [_      (validate-attr a entity)\n                    datoms (vec (-search db [e a]))]\n                (recur (reduce transact-retract-datom report datoms)\n                       (concat (retract-components db datoms) entities)))\n              (recur report entities))\n\n            (or (= op :db.fn/retractEntity)\n                (= op :db/retractEntity))\n            (if-some [e (entid db e)]\n              (let [e-datoms (vec (-search db [e]))\n                    v-datoms (vec (mapcat (fn [a] (-search db [nil a e])) (-attrs-by db :db.type/ref)))]\n                (recur (reduce transact-retract-datom report (concat e-datoms v-datoms))\n                       (concat (retract-components db e-datoms) entities)))\n              (recur report entities))\n\n           :else\n           (raise \"Unknown operation at \" entity \", expected :db/add, :db/retract, :db.fn/call, :db.fn/retractAttribute, :db.fn/retractEntity or an ident corresponding to an installed transaction function (e.g. {:db/ident <keyword> :db/fn <Ifn>}, usage of :db/ident requires {:db/unique :db.unique/identity} in schema)\" {:error :transact/syntax, :operation op, :tx-data entity})))\n       \n       (datom? entity)\n       (let [[e a v tx added] entity]\n         (if added\n           (recur (transact-add report [:db/add e a v tx]) entities)\n           (recur report (cons [:db/retract e a v] entities))))\n\n       :else\n       (raise \"Bad entity type at \" entity \", expected map or vector\"\n              {:error :transact/syntax, :tx-data entity})))))\n"]}