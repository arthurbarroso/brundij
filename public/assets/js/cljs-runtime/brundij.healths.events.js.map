{"version":3,"sources":["brundij/healths/events.cljs"],"mappings":"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","names":["brundij.healths.events/download-file!","data","content-type","file-name","data-blob","js/Blob","link","js/document.createElement","js/URL.createObjectURL","js/document.body.appendChild","js/document.body.removeChild","re-frame.core/reg-fx","response","js/JSON","cljs.core/clj->js","re_frame.core.reg_event_db","p__49734","vec__49735","cljs.core.nth","db","_","new-input","cljs.core.assoc","p__49738","vec__49739","current-input-state","cljs.core/not","re_frame.core.reg_event_fx","p__49742","p__49743","map__49744","cljs.core/--destructure-map","cljs.core.get","vec__49745","health-id","p__49748","p__49749","map__49750","vec__49751","p__49754","p__49755","map__49756","vec__49757","uuid","brundij.uuids/generate-uuid","brundij.date/get-inst","p__49760","p__49761","map__49762","vec__49763","_data","p__49766","p__49767","map__49768","vec__49769"],"sourcesContent":["(ns brundij.healths.events\n  (:require [brundij.date :as date]\n            [brundij.shared.events :as events]\n            [brundij.uuids :as uuids]\n            [re-frame.core :as re-frame]))\n\n(defn download-file!\n  [data content-type file-name]\n  (let [data-blob (js/Blob. #js [data] #js {:type content-type})\n        link (js/document.createElement \"a\")]\n    (set! (.-href link) (js/URL.createObjectURL data-blob))\n    (.setAttribute link \"download\" file-name)\n    (js/document.body.appendChild link)\n    (.click link)\n    (js/document.body.removeChild link)))\n\n(re-frame/reg-fx\n ::download!\n (fn [response]\n   (download-file!\n    (.stringify js/JSON (clj->js response))\n    \"application/json\" \"results.json\")\n   {}))\n\n(re-frame/reg-event-db\n ::change-health-id-input\n (fn [db [_ new-input]]\n   (assoc db :health-id-input new-input)))\n\n(re-frame/reg-event-db\n ::toggle-pre-existing-input?\n (fn [db [_ _]]\n   (let [current-input-state (:pre-existing-input? db)]\n     (assoc db :pre-existing-input? (not current-input-state)))))\n\n(re-frame/reg-event-fx\n ::fetch-results\n (fn [{:keys [db]} [_ health-id]]\n   {:db (assoc db :loading true)\n    :http-xhrio {:method :get\n                 ; :uri (str config/url \"/v1/healths/\" health-id \"/answers\")\n                 ; :format (ajax/json-request-format)\n                 :timeout 8000\n                 ; :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [::fetch-results-success]\n                 :on-failure [::fetch-results-failure]}}))\n\n(re-frame/reg-event-fx\n ::fetch-results-success\n (fn [{:keys [db]} [_ response]]\n   {:db (assoc db :loading false)\n    ::download! response}))\n\n(re-frame/reg-event-fx\n ::fetch-results-failure\n (fn [_]\n   {::events/show-failure-toast\n    {:toast-content\n     \"Failure downloading your health check's results. Please try again later\"}}))\n\n(re-frame/reg-event-fx\n ::add-health-check-to-ds\n (fn [{:keys [db]} [_ _]]\n   (let [uuid (uuids/generate-uuid)]\n     {::events/transact! {:db/id -1\n                          :health/uuid uuid\n                          :health/created_at (date/get-inst)}\n      ::events/navigate! [:questions]\n      :db (assoc db :health-uuid uuid :loading false)})))\n\n(re-frame/reg-event-fx\n ::create-health\n (fn [{:keys [db]} [_ _data]]\n   (if (true? (:is-online? db))\n     {:db (assoc db :loading true)\n      :http-xhrio {:method :post\n                   ; :uri (str config/url \"/v1/healths\")\n                   ; :format (ajax/json-request-format)\n                   :timeout 8000\n                   ; :response-format (ajax/json-response-format {:keywords? true})\n                   :on-success [::health-creation-success]\n                   :on-failure [::health-creation-failure]}\n      ::events/navigate! [:questions]}\n     {:db (assoc db :loading true)\n      :dispatch [::add-health-check-to-ds]})))\n\n(re-frame/reg-event-fx\n ::health-creation-success\n (fn [{:keys [db]} [_ response]]\n   {:db (assoc db\n               :loading false\n               :health-uuid (:health/uuid response))}))\n\n(re-frame/reg-event-fx\n ::health-creation-failure\n (fn [_]\n   {::events/navigate! [:create]\n    ::events/show-failure-toast\n    {:toast-content\n     \"Failure creating your health check. Please try again later\"}}))\n"]}