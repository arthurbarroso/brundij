{"version":3,"sources":["brundij/utils.cljs"],"mappings":";AAQA,2BAAA,3BAAeA,8DAASC;AAAxB,AACE,OAACC,mDAAQD;;;AAEX,6BAAA,7BAAeE,kEAAcC;AAA7B,AACE,kIAAA,KAAA,hIAACC,8DAAW,AAACC,sDAAmBF;;;AAElC,gCAAA,hCAAMG;AAAN,AACE,UAAK,mCAAA,lCAAM,wBAAA,xBAAiBC;;AAE9B,6BAAA,7BAAeC;AAAf,AACE,SACE,AAACF,qCACD,iEAAA,jEAACG,6CAAE,AAAcF;;;AAErB,gCAAA,hCAAeG;AAAf,AACE,OAAcC;;;AAEhB,6BAAA,7BAAeC,kEAAcC;AAA7B,AACE,OAACZ,mDAAQY;;;AAEX,0BAAA,1BAAeC;AAAf,AACE,IAAAC,mBAAA,KAAAC;AAAA,AAAA,IAAAC,kDAAAC;IAAAC,6CAAAC;IAAAC,kDAAA;IAAAC,6CAAA,WAAAC;AAAA,AAAA,OAAAR,wBAAAQ;;AAAA,AAAA,CAAAL,sCAAAG;;AAAA,CAAAD,iCAAAE;;AAAA,IAAA,AACE,AAACE,yQACM,sDAAA,mFAAA,zIAACC,lEACF,kDAAA,AAAAC,4OAAA,mFAAA,uEAAA,8EAAA,tgBAACC,qfAAiCC,viBAClC,qnBAAA,mFAAA,uEAAA,8EAAA,71BAACD,40BAAiCC,93BAClC,q8BAAA,mFAAA,uEAAA,8EAAA,7qCAACD,4pCAAiCC,9sCAClC,kyCAAA,mFAAA,uEAAA,kFAAA,9gDAACD,6/CAAmCC;UAN5C,AAAA,CAAAR,iCAAAD;;AAAA,CAAAD,sCAAAD;;AAAA,mDAAAF;;;AAQF,2CAAA,3CAAMc,8FAA4BC;AAAlC,oGACMA,/CACA,sDAAA,tDAACC,rDACD,iKAAA,1JAACC,kOAEa,4CAAA,WAAAC,vDAACC;AAAD,AAAM,sDAAAD,iBAAA,hEAACF;GADP,AAAA,sGAAkBD;;AAGtC,qCAAA,rCAAMK,kFAAsBC;AAA5B,AACE,IAAMC,YAAU,AAAQC;AAAxB,AACE,IAAAC,cAAA,WAAAC,iBAAAC;AAAA,AAAQ,sCAAAA,iBAAAD,hDAACG;;IAATD,cAA0BL;AAA1B,AAAA,GAAA,AAAAE,YAAA,WAAAG;AACa,wCAAA,jCAACE,uBAAQP,qBAAqB,CAAA,mDAAYD;;AADvD,GAAA,AAAAG,YAAA,QAAAG;AAEU,wCAAA,jCAACE,uBAAQP,kBAAkB,CAAA,mDAAYD;;AAC/C,+DAAA,XAAKC,8DAAiBD","names":["brundij.utils/js->edn","jso","cljs.core.js__GT_clj","brundij.utils/out-navigate","route","reitit.frontend.easy.push_state","cljs.reader.read_string","brundij.utils/rendered?","js/document","brundij.utils/ready?","cljs.core._EQ_","brundij.utils/get-rendered-db","js/window","brundij.utils/parse-to-clj","x","brundij.utils/export-db","sb__4749__auto__","goog.string/StringBuffer","*print-newline*-orig-val__65621","cljs.core/*print-newline*","*print-fn*-orig-val__65622","cljs.core/*print-fn*","*print-newline*-temp-val__65623","*print-fn*-temp-val__65624","x__4750__auto__","cljs.pprint.pprint","re_frame.core.subscribe","cljs.core/deref","cljs.core.update_in","cljs.core/dissoc","brundij.utils/dissoc-local-health-db-ids","health","cljs.core.dissoc","cljs.core.assoc","p1__65629#","cljs.core.map","brundij.utils/mount-shareable-link","health-id","local-url","js/window.location","pred__65632","p1__65631#","p2__65630#","expr__65633","clojure.string/includes?","clojure.string/replace"],"sourcesContent":["(ns brundij.utils\n  (:require [brundij.subs :as subs]\n            [cljs.reader :as reader]\n            [clojure.pprint :refer [pprint]]\n            [clojure.string :refer [replace includes?]]\n            [re-frame.core :as re-frame]\n            [reitit.frontend.easy :refer [push-state]]))\n\n(defn ^:export js->edn [jso]\n  (js->clj jso))\n\n(defn ^:export out-navigate [route]\n  (push-state (reader/read-string route) nil nil))\n\n(defn rendered? []\n  (not (nil? (.getElementById js/document \"app\"))))\n\n(defn ^:export ready? []\n  (and\n    (rendered?)\n    (= (.-readyState js/document) \"complete\")))\n\n(defn ^:export get-rendered-db []\n  (.-rendereddb js/window))\n\n(defn ^:export parse-to-clj [x]\n  (js->clj x))\n\n(defn ^:export export-db []\n  (with-out-str\n    (pprint\n      (-> @(re-frame/subscribe [::subs/db])\n          (update-in [:current-route :data] dissoc :coercion)\n          (update-in [:current-route :data] dissoc :view)\n          (update-in [:current-route :data] dissoc :parameters)\n          (update-in [:current-route :result] dissoc :query)))))\n\n(defn dissoc-local-health-db-ids [health]\n  (-> health\n      (dissoc :db/id)\n      (assoc :health/question\n               (->> (:health/question health)\n                    (map #(dissoc % :db/id))))))\n\n(defn mount-shareable-link [health-id]\n  (let [local-url (.-href js/window.location)]\n    (condp #(includes? %2 %1) local-url\n      \"/success\" (replace local-url \"/success\" (str \"?id=\" health-id))\n      \"/list\" (replace local-url \"/list\" (str \"?id=\" health-id))\n      (str local-url \"?id=\" health-id))))\n"]}