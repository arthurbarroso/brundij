{"version":3,"sources":["me/tonsky/persistent_sorted_set.cljs"],"mappings":"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","names":["me.tonsky.persistent-sorted-set/min-len","me.tonsky.persistent-sorted-set/max-len","me.tonsky.persistent-sorted-set/avg-len","me.tonsky.persistent-sorted-set/level-shift","cljs.core.range","p1__59460#","cljs.core.filter","cljs.core/first","me.tonsky.persistent-sorted-set/path-mask","me.tonsky.persistent-sorted-set/empty-path","me.tonsky.persistent-sorted-set/path-get","path","level","me.tonsky.persistent-sorted-set/path-set","idx","me.tonsky.persistent-sorted-set/binary-search-l","cmp","arr","r","k","l","cljs.core/long","m","mk","me.tonsky.persistent-sorted-set/binary-search-r","me.tonsky.persistent-sorted-set/lookup-exact","key","arr-l","G__59469","G__59470","me.tonsky.persistent-sorted-set/lookup-range","me.tonsky.persistent-sorted-set/cut-n-splice","cut-from","cut-to","splice-from","splice-to","xs","xs-l","l1","l2","l1xs","new-arr","me.tonsky.persistent-sorted-set.arrays/make-array","l__55522__auto__","n__4695__auto__","i__55523__auto__","me.tonsky.persistent-sorted-set/splice","me.tonsky.persistent-sorted-set/insert","me.tonsky.persistent-sorted-set/merge-n-split","a1","a2","a1-l","a2-l","total-l","r1-l","r2-l","r1","r2","me.tonsky.persistent-sorted-set/eq-arr","a1-from","a1-to","a2-from","a2-to","len","and__4210__auto__","i","G__59482","G__59483","me.tonsky.persistent-sorted-set/check-n-splice","from","to","var_args","G__59488","me.tonsky.persistent-sorted-set/return-array","js/Error","a3","me$tonsky$persistent-sorted-set$INode$node_lim_key$dyn","x__4509__auto__","m__4510__auto__","me.tonsky.persistent-sorted-set/node-lim-key","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","me$tonsky$persistent-sorted-set$INode$node_len$dyn","me.tonsky.persistent-sorted-set/node-len","me$tonsky$persistent-sorted-set$INode$node_merge$dyn","me.tonsky.persistent-sorted-set/node-merge","me$tonsky$persistent-sorted-set$INode$node_merge_n_split$dyn","me.tonsky.persistent-sorted-set/node-merge-n-split","me$tonsky$persistent-sorted-set$INode$node_lookup$dyn","me.tonsky.persistent-sorted-set/node-lookup","me$tonsky$persistent-sorted-set$INode$node_conj$dyn","me.tonsky.persistent-sorted-set/node-conj","me$tonsky$persistent-sorted-set$INode$node_disj$dyn","me.tonsky.persistent-sorted-set/node-disj","me.tonsky.persistent-sorted-set/INode","_","next","root?","left","right","me.tonsky.persistent-sorted-set/rotate","node","me.tonsky.persistent_sorted_set.return_array","nodes","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","me.tonsky.persistent-sorted-set/Node","me.tonsky.persistent-sorted-set/->Node","keys","pointers","arr__55541__auto__","me.tonsky.persistent-sorted-set.arrays/aconcat","ks","ps","new-keys","me.tonsky.persistent-sorted-set.arrays/amap","new-pointers","middle","child","left-child","right-child","disjned","left-idx","right-idx","me.tonsky.persistent-sorted-set/Leaf","me.tonsky.persistent-sorted-set/->Leaf","keys-l","G__59508","G__59509","me.tonsky.persistent-sorted-set/uninitialized-hash","unused__10816__auto__","self__","G__59533","args59516","cljs.core/aclone","me.tonsky.persistent-sorted-set/BTSet","me.tonsky.persistent-sorted-set/->BTSet","root","shift","cnt","comparator","meta","_hash","this","cljs.core/pr-str*","new-meta","other","cljs.core/set?","cljs.core/count","p1__59515#","cljs.core/every?","cljs.core/contains?","h__4319__auto__","cljs.core/hash-unordered-coll","me.tonsky.persistent-sorted-set/conj","me.tonsky.persistent-sorted-set/disj","not-found","or__4212__auto__","me.tonsky.persistent-sorted-set/btset-iter","f","temp__5733__auto__","cljs.core/-reduce","start","cljs.core/rseq","writer","opts","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core/seq","me.tonsky.persistent-sorted-set/keys-for","set","me.tonsky.persistent-sorted-set/alter-btset","me.tonsky.persistent-sorted-set/-next-path","sub-path","G__59538","G__59539","G__59540","me.tonsky.persistent-sorted-set/next-path","me.tonsky.persistent-sorted-set/-rpath","me.tonsky.persistent-sorted-set/-prev-path","sub-level","G__59542","G__59543","G__59544","me.tonsky.persistent-sorted-set/prev-path","me.tonsky.persistent-sorted-set/iter","me.tonsky.persistent-sorted-set/Chunk","me.tonsky.persistent-sorted-set/->Chunk","off","end","cljs.core/ArrayChunk","val","n","val'","G__59549","G__59550","cljs.core/deref","cljs.core/reduced?","me$tonsky$persistent-sorted-set$IIter$_copy$dyn","me.tonsky.persistent-sorted-set/-copy","me.tonsky.persistent-sorted-set/IIter","me.tonsky.persistent-sorted-set/Iter","me.tonsky.persistent-sorted-set/->Iter","cljs.core/equiv-sequential","left'","cljs.core.not_EQ_","end-idx","cljs.core._EQ_","first","temp__5737__auto__","acc","new-acc","G__59558","G__59559","new-left","G__59551","G__59552","G__59553","me.tonsky.persistent-sorted-set/riter","me.tonsky.persistent-sorted-set/ReverseIter","me.tonsky.persistent-sorted-set/->ReverseIter","new-right","me.tonsky.persistent-sorted-set/-distance","idx-l","idx-r","G__59622","G__59623","G__59624","G__59625","res","me.tonsky.persistent-sorted-set/distance","path-l","path-r","me.tonsky.persistent-sorted-set/est-count","iter","me.tonsky.persistent-sorted-set/-seek","me.tonsky.persistent-sorted-set/-rseek","me.tonsky.persistent-sorted-set/-slice","key-from","key-to","till-path","me.tonsky.persistent-sorted-set/arr-map-inplace","G__59626","me.tonsky.persistent-sorted-set/arr-partition-approx","min-len","max-len","chunk-len","cljs.core/transient","pos","rest","cljs.core.conj_BANG_","piece-len","cljs.core/to-array","cljs.core/persistent!","me.tonsky.persistent-sorted-set/sorted-arr-distinct?","al","p","e","me.tonsky.persistent-sorted-set/sorted-arr-distinct","cljs.core.into_array","roots","new-roots","new-root","G__59628","me.tonsky.persistent-sorted-set/slice","G__59630","me.tonsky.persistent-sorted-set/rslice","G__59631","G__59632","G__59633","me.tonsky.persistent-sorted-set/from-sorted-array","leaves","p1__59634#","current-level","G__59636","p1__59635#","me.tonsky.persistent-sorted-set/from-sequential","seq","me.tonsky.persistent-sorted-set.arrays/asort","G__59640","me.tonsky.persistent-sorted-set/sorted-set-by","args-arr__4839__auto__","len__4818__auto__","i__4819__auto__","argseq__4840__auto__","cljs.core/IndexedSeq","seq59638","G__59639","cljs.core/next","self__4805__auto__","G__59643","me.tonsky.persistent-sorted-set/sorted-set","seq59642","self__4806__auto__","me.tonsky.persistent_sorted_set.sorted_set_by","cljs.core/compare"],"sourcesContent":["(ns ^{:doc\n  \"A B-tree based persistent sorted set. Supports transients, custom comparators, fast iteration, efficient slices (iterator over a part of the set) and reverse slices. Almost a drop-in replacement for [[clojure.core/sorted-set]], the only difference being this one can\u2019t store nil.\"\n  :author \"Nikita Prokopov\"}\n  me.tonsky.persistent-sorted-set\n  (:refer-clojure :exclude [iter conj disj sorted-set sorted-set-by])\n  (:require\n    [me.tonsky.persistent-sorted-set.arrays :as arrays])\n  (:require-macros\n    [me.tonsky.persistent-sorted-set.arrays :as arrays]))\n\n\n; B+ tree\n; -------\n\n; Leaf:     keys[]     :: array of values\n\n; Node:     pointers[] :: links to children nodes\n;           keys[]     :: max value for whole subtree\n;                         node.keys[i] == max(node.pointers[i].keys)\n; All arrays are 16..32 elements, inclusive\n\n; BTSet:    root       :: Node or Leaf\n;           shift      :: path bit-shift of root level, == (depth - 1) * level-shift\n;           cnt        :: size of a set, integer, rolling\n;           comparator :: comparator used for ordering\n;           meta       :: clojure meta map\n;           _hash      :: hash code, same as for clojure collections, on-demand, cached\n\n; Path: conceptually a vector of indexes from root to leaf value, but encoded in a single int.\n;       E.g. we have path [7 53 11] representing root.pointers[7].pointers[3].keys[11].\n;       In our case level-shift is 8, meaning each index will take 8 bits:\n;       (7 << 16) | (53 << 8) | 11 = 472331\n;       0000 0111   0011 0101   0000 1011\n\n; Iter:     set       :: Set this iterator belongs to\n;           left      :: Current path\n;           right     :: Right bound path (exclusive)\n;           keys      :: Cached ref for keys array for a leaf\n;           idx       :: Cached idx in keys array\n; Keys and idx are cached for fast iteration inside a leaf\"\n\n\n(def ^:const min-len 16)\n(def ^:const max-len 32)\n(def ^:private ^:const avg-len (arrays/half (+ max-len min-len)))\n(def ^:private ^:const level-shift (->> (range 31 -1 -1)\n                                     (filter #(bit-test max-len %))\n                                     first\n                                     inc))\n(def ^:private ^:const path-mask (dec (bit-shift-left 1 level-shift)))\n(def ^:private ^:const empty-path 0)\n\n(defn- path-get [path level]\n  (bit-and path-mask\n           (unsigned-bit-shift-right path level)))\n\n(defn- path-set [path level idx]\n  (bit-or path \n          (bit-shift-left idx level)))\n\n(defn- binary-search-l [cmp arr r k]\n  (loop [l 0\n         r (long r)]\n    (if (<= l r)\n      (let [m  (arrays/half (+ l r))\n            mk (arrays/aget arr m)]\n        (if (neg? (cmp mk k))\n          (recur (inc m) r)\n          (recur l (dec m))))\n      l)))\n\n(defn- binary-search-r [cmp arr r k]\n  (loop [l 0\n         r (long r)]\n    (if (<= l r)\n      (let [m  (arrays/half (+ l r))\n            mk (arrays/aget arr m)]\n        (if (pos? (cmp mk k))\n          (recur l (dec m))\n          (recur (inc m) r)))\n      l)))\n\n(defn- lookup-exact [cmp arr key]\n  (let [arr-l (arrays/alength arr)\n        idx   (binary-search-l cmp arr (dec arr-l) key)]\n    (if (and (< idx arr-l)\n             (== 0 (cmp (arrays/aget arr idx) key)))\n      idx\n      -1)))\n\n(defn- lookup-range [cmp arr key]\n  (let [arr-l (arrays/alength arr)\n        idx   (binary-search-l cmp arr (dec arr-l) key)]\n    (if (== idx arr-l)\n      -1\n      idx)))\n\n;; Array operations\n\n(defn- cut-n-splice [arr cut-from cut-to splice-from splice-to xs]\n  (let [xs-l (arrays/alength xs)\n        l1   (- splice-from cut-from)\n        l2   (- cut-to splice-to)\n        l1xs (+ l1 xs-l)\n        new-arr (arrays/make-array (+ l1 xs-l l2))]\n    (arrays/acopy arr cut-from splice-from new-arr 0)\n    (arrays/acopy xs 0 xs-l new-arr l1)\n    (arrays/acopy arr splice-to cut-to new-arr l1xs)\n    new-arr))\n\n(defn- splice [arr splice-from splice-to xs]\n  (cut-n-splice arr 0 (arrays/alength arr) splice-from splice-to xs))\n\n(defn- insert [arr idx xs]\n  (cut-n-splice arr 0 (arrays/alength arr) idx idx xs))\n\n(defn- merge-n-split [a1 a2]\n  (let [a1-l    (arrays/alength a1)\n        a2-l    (arrays/alength a2)\n        total-l (+ a1-l a2-l)\n        r1-l    (arrays/half total-l)\n        r2-l    (- total-l r1-l)\n        r1      (arrays/make-array r1-l)\n        r2      (arrays/make-array r2-l)]\n    (if (<= a1-l r1-l)\n      (do\n        (arrays/acopy a1 0             a1-l          r1 0)\n        (arrays/acopy a2 0             (- r1-l a1-l) r1 a1-l)\n        (arrays/acopy a2 (- r1-l a1-l) a2-l          r2 0))\n      (do\n        (arrays/acopy a1 0    r1-l r1 0)\n        (arrays/acopy a1 r1-l a1-l r2 0)\n        (arrays/acopy a2 0    a2-l r2 (- a1-l r1-l))))\n    (arrays/array r1 r2)))\n\n(defn- ^boolean eq-arr [cmp a1 a1-from a1-to a2 a2-from a2-to]\n  (let [len (- a1-to a1-from)]\n    (and\n      (== len (- a2-to a2-from))\n      (loop [i 0]\n        (cond\n          (== i len)\n          true\n\n          (not (== 0 (cmp\n                       (arrays/aget a1 (+ i a1-from))\n                       (arrays/aget a2 (+ i a2-from)))))\n          false\n          \n          :else\n          (recur (inc i)))))))\n\n(defn- check-n-splice [cmp arr from to new-arr]\n  (if (eq-arr cmp arr from to new-arr 0 (arrays/alength new-arr))\n    arr\n    (splice arr from to new-arr)))\n\n(defn- return-array\n  \"Drop non-nil references and return array of arguments\"\n  ([a1]\n    (arrays/array a1))\n  ([a1 a2]\n    (if a1\n      (if a2\n        (arrays/array a1 a2)\n        (arrays/array a1))\n      (arrays/array a2)))\n  ([a1 a2 a3]\n    (if a1\n      (if a2\n        (if a3\n          (arrays/array a1 a2 a3)\n          (arrays/array a1 a2))\n        (if a3\n          (arrays/array a1 a3)\n          (arrays/array a1)))\n      (if a2\n        (if a3\n          (arrays/array a2 a3)\n          (arrays/array a2))\n        (arrays/array a3)))))\n\n;;\n\n(defprotocol INode\n  (node-lim-key       [_])\n  (node-len           [_])\n  (node-merge         [_ next])\n  (node-merge-n-split [_ next])\n  (node-lookup        [_ cmp key])\n  (node-conj          [_ cmp key])\n  (node-disj          [_ cmp key root? left right]))\n\n(defn- rotate [node root? left right]\n  (cond\n    ;; root never merges\n    root?\n    (return-array node)\n\n    ;; enough keys, nothing to merge\n    (> (node-len node) min-len)\n    (return-array left node right)\n\n    ;; left and this can be merged to one\n    (and left (<= (node-len left) min-len))\n    (return-array (node-merge left node) right)\n\n    ;; right and this can be merged to one\n    (and right (<= (node-len right) min-len))\n    (return-array left (node-merge node right))\n\n    ;; left has fewer nodes, redestribute with it\n    (and left (or (nil? right)\n                  (< (node-len left) (node-len right))))\n    (let [nodes (node-merge-n-split left node)]\n      (return-array (arrays/aget nodes 0) (arrays/aget nodes 1) right))\n\n    ;; right has fewer nodes, redestribute with it\n    :else\n    (let [nodes (node-merge-n-split node right)]\n      (return-array left (arrays/aget nodes 0) (arrays/aget nodes 1)))))\n\n(deftype Node [keys pointers]\n  INode\n  (node-lim-key [_]\n    (arrays/alast keys))\n  \n  (node-len [_]\n    (arrays/alength keys))\n  \n  (node-merge [_ next]\n    (Node. (arrays/aconcat keys (.-keys next))\n           (arrays/aconcat pointers (.-pointers next))))\n  \n  (node-merge-n-split [_ next]\n    (let [ks (merge-n-split keys     (.-keys next))\n          ps (merge-n-split pointers (.-pointers next))]\n      (return-array (Node. (arrays/aget ks 0) (arrays/aget ps 0))\n                    (Node. (arrays/aget ks 1) (arrays/aget ps 1)))))\n\n  (node-lookup [_ cmp key]\n    (let [idx (lookup-range cmp keys key)]\n      (when-not (== -1 idx)\n        (node-lookup (arrays/aget pointers idx) cmp key))))\n  \n  (node-conj [_ cmp key]\n    (let [idx   (binary-search-l cmp keys (- (arrays/alength keys) 2) key)\n          nodes (node-conj (arrays/aget pointers idx) cmp key)]\n      (when nodes\n        (let [new-keys     (check-n-splice cmp keys     idx (inc idx) (arrays/amap node-lim-key nodes))\n              new-pointers (splice             pointers idx (inc idx) nodes)]\n          (if (<= (arrays/alength new-pointers) max-len)\n            ;; ok as is\n            (arrays/array (Node. new-keys new-pointers))\n            ;; gotta split it up\n            (let [middle  (arrays/half (arrays/alength new-pointers))]\n              (arrays/array\n                (Node. (.slice new-keys     0 middle)\n                       (.slice new-pointers 0 middle))\n                (Node. (.slice new-keys     middle)\n                       (.slice new-pointers middle)))))))))\n\n  (node-disj [_ cmp key root? left right]\n    (let [idx (lookup-range cmp keys key)]\n      (when-not (== -1 idx) ;; short-circuit, key not here\n        (let [child       (arrays/aget pointers idx)\n              left-child  (when (>= (dec idx) 0)\n                            (arrays/aget pointers (dec idx)))\n              right-child (when (< (inc idx) (arrays/alength pointers))\n                            (arrays/aget pointers (inc idx)))\n              disjned     (node-disj child cmp key false left-child right-child)]\n          (when disjned     ;; short-circuit, key not here\n            (let [left-idx     (if left-child  (dec idx) idx)\n                  right-idx    (if right-child (+ 2 idx) (+ 1 idx))\n                  new-keys     (check-n-splice cmp keys     left-idx right-idx (arrays/amap node-lim-key disjned))\n                  new-pointers (splice             pointers left-idx right-idx disjned)]\n              (rotate (Node. new-keys new-pointers) root? left right))))))))\n\n(deftype Leaf [keys]\n  INode\n  (node-lim-key [_]\n    (arrays/alast keys))\n;;   Object\n;;   (toString [_] (pr-str* (vec keys)))\n  \n  (node-len [_]\n    (arrays/alength keys))\n  \n  (node-merge [_ next]\n    (Leaf. (arrays/aconcat keys (.-keys next))))\n  \n  (node-merge-n-split [_ next]\n    (let [ks (merge-n-split keys (.-keys next))]\n      (return-array (Leaf. (arrays/aget ks 0))\n                    (Leaf. (arrays/aget ks 1)))))\n  \n  (node-lookup [_ cmp key]\n    (let [idx (lookup-exact cmp keys key)]\n      (when-not (== -1 idx)\n        (arrays/aget keys idx))))\n\n  (node-conj [_ cmp key]\n    (let [idx    (binary-search-l cmp keys (dec (arrays/alength keys)) key)\n          keys-l (arrays/alength keys)]\n      (cond\n        ;; element already here\n        (and (< idx keys-l)\n             (== 0 (cmp key (arrays/aget keys idx))))\n          nil\n      \n        ;; splitting\n        (== keys-l max-len)\n          (let [middle (arrays/half (inc keys-l))]\n            (if (> idx middle)\n              ;; new key goes to the second half\n              (arrays/array\n                (Leaf. (.slice keys 0 middle))\n                (Leaf. (cut-n-splice keys middle keys-l idx idx (arrays/array key))))\n              ;; new key goes to the first half\n              (arrays/array\n                (Leaf. (cut-n-splice keys 0 middle idx idx (arrays/array key)))\n                (Leaf. (.slice keys middle keys-l)))))\n       \n        ;; ok as is\n        :else\n          (arrays/array (Leaf. (splice keys idx idx (arrays/array key)))))))\n  \n  (node-disj [_ cmp key root? left right]\n    (let [idx (lookup-exact cmp keys key)]\n      (when-not (== -1 idx) ;; key is here\n        (let [new-keys (splice keys idx (inc idx) (arrays/array))]\n          (rotate (Leaf. new-keys) root? left right))))))\n\n;; BTSet\n\n(declare conj disj btset-iter)\n\n(def ^:private ^:const uninitialized-hash nil)\n\n(deftype BTSet [root shift cnt comparator meta ^:mutable _hash]\n  Object\n  (toString [this] (pr-str* this))\n\n  ICloneable\n  (-clone [_] (BTSet. root shift cnt comparator meta _hash))\n\n  IWithMeta\n  (-with-meta [_ new-meta] (BTSet. root shift cnt comparator new-meta _hash))\n\n  IMeta\n  (-meta [_] meta)\n\n  IEmptyableCollection\n  (-empty [_] (BTSet. (Leaf. (arrays/array)) 0 0 comparator meta uninitialized-hash))\n\n  IEquiv\n  (-equiv [this other]\n    (and\n      (set? other)\n      (== cnt (count other))\n      (every? #(contains? this %) other)))\n\n  IHash\n  (-hash [this] (caching-hash this hash-unordered-coll _hash))\n\n  ICollection\n  (-conj [this key] (conj this key comparator))\n\n  ISet\n  (-disjoin [this key] (disj this key comparator))\n\n  ILookup \n  (-lookup [_ k]\n    (node-lookup root comparator k))\n  (-lookup [_ k not-found]\n    (or (node-lookup root comparator k) not-found))\n\n  ISeqable\n  (-seq [this] (btset-iter this))\n\n  IReduce\n  (-reduce [this f]\n    (if-let [i (btset-iter this)]\n      (-reduce i f)\n      (f)))\n  (-reduce [this f start]\n    (if-let [i (btset-iter this)]\n      (-reduce i f start)\n      start))\n           \n  IReversible\n  (-rseq [this] (rseq (btset-iter this)))\n\n  ; ISorted\n  ; (-sorted-seq [this ascending?])\n  ; (-sorted-seq-from [this k ascending?])\n  ; (-entry-key [this entry] entry)\n  ; (-comparator [this] comparator)\n\n  ICounted\n  (-count [_] cnt)\n\n  IEditableCollection\n  (-as-transient [this] this)\n\n  ITransientCollection\n  (-conj! [this key] (conj this key comparator))\n  (-persistent! [this] this)\n\n  ITransientSet\n  (-disjoin! [this key] (disj this key comparator))\n\n  IFn\n  (-invoke [this k] (-lookup this k))\n  (-invoke [this k not-found] (-lookup this k not-found))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (pr-sequential-writer writer pr-writer \"#{\" \" \" \"}\" opts (seq this))))\n  \n(defn- keys-for [set path]\n  (loop [level (.-shift set)\n         node  (.-root set)]\n    (if (pos? level)\n      (recur (- level level-shift)\n             (arrays/aget (.-pointers node)\n                   (path-get path level)))\n      (.-keys node))))\n\n(defn- alter-btset [set root shift cnt]\n  (BTSet. root shift cnt (.-comparator set) (.-meta set) uninitialized-hash))\n\n\n;; iteration\n\n(defn- -next-path [node path level]\n  (let [idx (path-get path level)]\n    (if (pos? level)\n      ;; inner node\n      (let [sub-path (-next-path (arrays/aget (.-pointers node) idx) path (- level level-shift))]\n        (if (== -1 sub-path)\n          ;; nested node overflow\n          (if (< (inc idx) (arrays/alength (.-pointers node)))\n            ;; advance current node idx, reset subsequent indexes\n            (path-set empty-path level (inc idx))\n            ;; current node overflow\n            -1)\n          ;; keep current idx\n          (path-set sub-path level idx)))\n      ;; leaf\n      (if (< (inc idx) (arrays/alength (.-keys node)))\n        ;; advance leaf idx\n        (path-set empty-path 0 (inc idx))\n        ;; leaf overflow\n        -1))))\n\n(defn- next-path\n  \"Returns path representing next item after `path` in natural traversal order,\n   or -1 if end of tree has been reached\"\n  [set path]\n  (-next-path (.-root set) path (.-shift set)))\n\n(defn- -rpath\n  \"Returns rightmost path possible starting from node and going deeper\"\n  [node level]\n  (loop [node  node\n         path  empty-path\n         level level]\n    (if (pos? level)\n      ;; inner node\n      (recur (arrays/alast (.-pointers node))\n             (path-set path level (dec (arrays/alength (.-pointers node))))\n             (- level level-shift))\n      ;; leaf\n      (path-set path 0 (dec (arrays/alength (.-keys node)))))))\n\n(defn- -prev-path [node path level]\n  (let [idx (path-get path level)]\n    (if (pos? level)\n      ;; inner node\n      (let [sub-level (- level level-shift)\n            sub-path  (-prev-path (arrays/aget (.-pointers node) idx) path sub-level)]\n        (if (== -1 sub-path)\n          ;; nested node overflow\n          (if (>= (dec idx) 0)\n            ;; advance current node idx, reset subsequent indexes\n            (let [idx      (dec idx)\n                  sub-path (-rpath (arrays/aget (.-pointers node) idx) sub-level)]\n              (path-set sub-path level idx))\n            ;; current node overflow\n            -1)\n          ;; keep current idx\n          (path-set sub-path level idx)))\n      ;; leaf\n      (if (>= (dec idx) 0)\n        ;; advance leaf idx\n        (path-set empty-path 0 (dec idx))\n        ;; leaf overflow\n        -1))))\n\n(defn- prev-path\n  \"Returns path representing previous item before `path` in natural traversal order,\n   or -1 if `path` was already beginning of a tree\"\n  [set path]\n  (-prev-path (.-root set) path (.-shift set)))\n\n(declare iter riter)\n\n(defn- btset-iter\n  \"Iterator that represents the whole set\"\n  [set]\n  (when (pos? (node-len (.-root set)))\n    (let [left   empty-path\n          right  (inc (-rpath (.-root set) (.-shift set)))]\n      (iter set left right))))\n\n;; replace with cljs.core/ArrayChunk after https://dev.clojure.org/jira/browse/CLJS-2470\n(deftype Chunk [arr off end]\n  ICounted\n  (-count [_] (- end off))\n\n  IIndexed\n  (-nth [this i]\n    (aget arr (+ off i)))\n  (-nth [this i not-found]\n    (if (and (>= i 0) (< i (- end off)))\n      (aget arr (+ off i))\n      not-found))\n\n  IChunk\n  (-drop-first [this]\n    (if (== off end)\n      (throw (js/Error. \"-drop-first of empty chunk\"))\n      (ArrayChunk. arr (inc off) end)))\n\n  IReduce\n  (-reduce [this f]\n    (if (== off end)\n      (f)\n      (-reduce (-drop-first this) f (aget arr off))))\n  (-reduce [this f start]\n    (loop [val start, n off]\n      (if (< n end)\n        (let [val' (f val (aget arr n))]\n          (if (reduced? val')\n            @val'\n            (recur val' (inc n))))\n        val))))\n\n(defprotocol IIter\n  (-copy [this left right]))\n\n(deftype Iter [set left right keys idx]\n  IIter\n  (-copy [_ l r]\n    (Iter. set l r (keys-for set l) (path-get l 0)))\n\n  IEquiv\n  (-equiv [this other] (equiv-sequential this other))\n\n  ISequential\n  ISeqable\n  (-seq [this] (when keys this))\n\n  ISeq\n  (-first [this]\n    (when keys\n      (arrays/aget keys idx)))\n\n  (-rest [this] (or (-next this) ()))\n\n  INext\n  (-next [this]\n    (when keys\n      (if (< (inc idx) (arrays/alength keys))\n        ;; can use cached array to move forward\n        (when (< (inc left) right)\n          (Iter. set (inc left) right keys (inc idx)))\n        (let [left' (next-path set left)]\n          (when (and (not= -1 left') (< left' right))\n            (-copy this left' right))))))\n\n  IChunkedSeq\n  (-chunked-first [this]\n    (let [end-idx (if (= (bit-or left path-mask)\n                         (bit-or right path-mask))\n                    (bit-and right path-mask)\n                    (arrays/alength keys))]\n      (Chunk. keys idx end-idx)))\n\n  (-chunked-rest [this]\n    (or (-chunked-next this) ()))\n\n  IChunkedNext\n  (-chunked-next [this]\n    (let [left' (next-path set (+ left (- (arrays/alength keys) idx 1)))]\n      (when (and (not= -1 left') (< left' right))\n        (-copy this left' right))))\n           \n  IReduce\n  (-reduce [this f]\n    (if (nil? keys)\n      (f)\n      (let [first (-first this)]\n        (if-some [next (-next this)]\n          (-reduce next f first)\n          first))))\n\n  (-reduce [this f start]\n    (loop [left left\n           keys keys\n           idx  idx\n           acc  start]\n      (if (nil? keys)\n        acc\n        (let [new-acc (f acc (arrays/aget keys idx))]\n          (cond\n            (reduced? new-acc)\n            @new-acc\n\n            (< (inc idx) (arrays/alength keys)) ;; can use cached array to move forward\n            (if (< (inc left) right)\n              (recur (inc left) keys (inc idx) new-acc)\n              new-acc)\n\n            :else\n            (let [new-left (next-path set left)]\n              (if (and (not (== -1 new-left)) (< new-left right))\n                (recur new-left (keys-for set new-left) (path-get new-left 0) new-acc)\n                new-acc)))))))\n\n  IReversible\n  (-rseq [this]\n    (when keys\n      (riter set (prev-path set left) (prev-path set right))))\n\n  Object\n  (toString [this] (pr-str* this))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts (seq this))))\n\n(defn iter [set left right]\n  (Iter. set left right (keys-for set left) (path-get left 0)))\n\n;; reverse iteration\n\n(deftype ReverseIter [set left right keys idx]\n  IIter\n  (-copy [_ l r]\n    (ReverseIter. set l r (keys-for set r) (path-get r 0)))\n\n  IEquiv\n  (-equiv [this other] (equiv-sequential this other))\n\n  ISequential\n  ISeqable\n  (-seq [this] (when keys this))\n\n  ISeq\n  (-first [this]\n    (when keys\n      (arrays/aget keys idx)))\n\n  (-rest [this]  (or (-next this) ()))\n\n  INext\n  (-next [this]\n    (when keys\n      (if (>= (dec idx) 0)\n        ;; can use cached array to advance\n        (when (> (dec right) left)\n          (ReverseIter. set left (dec right) keys (dec idx)))\n        (let [right (prev-path set right)]\n          (when (and (not= -1 right) (> right left))\n            (-copy this left right))))))\n\n  IReversible\n  (-rseq [this]\n    (when keys\n      (let [new-left  (if (== left -1) 0 (next-path set left))\n            new-right (next-path set right)\n            new-right (if (== new-right -1) (inc right) new-right)]\n        (iter set new-left new-right))))\n\n  Object\n  (toString [this] (pr-str* this))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts (seq this))))\n\n(defn riter [set left right]\n  (ReverseIter. set left right (keys-for set right) (path-get right 0)))\n\n;; distance\n\n(defn- -distance [node left right level]\n  (let [idx-l (path-get left level)\n        idx-r (path-get right level)]\n    (if (pos? level)\n      ;; inner node\n      (if (== idx-l idx-r)\n        (-distance (arrays/aget (.-pointers node) idx-l) left right (- level level-shift))\n        (loop [level level\n               res   (- idx-r idx-l)]\n          (if (== 0 level)\n            res\n            (recur (- level level-shift) (* res avg-len)))))\n      (- idx-r idx-l))))\n\n(defn- distance [set path-l path-r]\n  (cond\n    (== path-l path-r) 0\n    (== (inc path-l) path-r) 1\n    (== (next-path set path-l) path-r) 1\n    :else (-distance (.-root set) path-l path-r (.-shift set))))\n\n(defn est-count [iter]\n  (distance (.-set iter) (.-left iter) (.-right iter)))\n\n\n;; Slicing\n\n(defn- -seek\n  \"Returns path to first element >= key,\n   or -1 if all elements in a set < key\"\n  [set key comparator]\n  (loop [node  (.-root set)\n         path  empty-path\n         level (.-shift set)]\n    (let [keys-l (node-len node)]\n      (if (== 0 level)\n        (let [keys (.-keys node)\n              idx  (binary-search-l comparator keys (dec keys-l) key)]\n          (if (== keys-l idx) -1 (path-set path 0 idx)))\n        (let [keys (.-keys node)\n              idx  (binary-search-l comparator keys (- keys-l 2) key)]\n          (recur (arrays/aget (.-pointers node) idx)\n                 (path-set path level idx)\n                 (- level level-shift)))))))\n\n(defn- -rseek\n  \"Returns path to the first element that is > key.\n   If all elements in a set are <= key, returns `(-rpath set) + 1`.\n   It\u2019s a virtual path that is bigger than any path in a tree\"\n  [set key comparator]\n  (loop [node  (.-root set)\n         path  empty-path\n         level (.-shift set)]\n    (let [keys-l (node-len node)]\n      (if (== 0 level)\n        (let [keys (.-keys node)\n              idx  (binary-search-r comparator keys (dec keys-l) key)]\n          (path-set path 0 idx))\n        (let [keys (.-keys node)\n              idx  (binary-search-r comparator keys (- keys-l 2) key)]\n          (recur (arrays/aget (.-pointers node) idx)\n                 (path-set path level idx)\n                 (- level level-shift)))))))\n\n(defn- -slice [set key-from key-to comparator]\n  (let [path (-seek set key-from comparator)]\n    (when-not (neg? path)\n      (let [till-path (-rseek set key-to comparator)]\n        (when (> till-path path)\n          (Iter. set path till-path (keys-for set path) (path-get path 0)))))))\n\n\n(defn- arr-map-inplace [f arr]\n  (let [len (arrays/alength arr)]\n    (loop [i 0]\n      (when (< i len)\n        (arrays/aset arr i (f (arrays/aget arr i)))\n        (recur (inc i))))\n    arr))\n\n\n(defn- arr-partition-approx\n  \"Splits `arr` into arrays of size between min-len and max-len,\n   trying to stick to (min+max)/2\"\n  [min-len max-len arr]\n  (let [chunk-len avg-len\n        len       (arrays/alength arr)\n        acc       (transient [])]\n    (when (pos? len)\n      (loop [pos 0]\n        (let [rest (- len pos)]\n          (cond\n            (<= rest max-len)\n              (conj! acc (.slice arr pos))\n            (>= rest (+ chunk-len min-len))\n              (do\n                (conj! acc (.slice arr pos (+ pos chunk-len)))\n                (recur (+ pos chunk-len)))\n            :else\n              (let [piece-len (arrays/half rest)]\n                (conj! acc (.slice arr pos (+ pos piece-len)))\n                (recur (+ pos piece-len)))))))\n    (to-array (persistent! acc))))\n\n\n(defn- sorted-arr-distinct? [arr cmp]\n  (let [al (arrays/alength arr)]\n    (if (<= al 1)\n      true\n      (loop [i 1\n             p (arrays/aget arr 0)]\n        (if (>= i al)\n          true\n          (let [e (arrays/aget arr i)]\n            (if (== 0 (cmp e p))\n              false\n              (recur (inc i) e))))))))\n\n\n(defn- sorted-arr-distinct\n  \"Filter out repetitive values in a sorted array.\n   Optimized for no-duplicates case\"\n  [arr cmp]\n  (if (sorted-arr-distinct? arr cmp)\n    arr\n    (let [al (arrays/alength arr)]\n      (loop [acc (transient [(arrays/aget arr 0)])\n             i   1\n             p   (arrays/aget arr 0)]\n        (if (>= i al)\n          (into-array (persistent! acc))\n          (let [e (arrays/aget arr i)]\n            (if (== 0 (cmp e p))\n              (recur acc (inc i) e)\n              (recur (conj! acc e) (inc i) e))))))))\n\n\n;; Public interface\n\n(defn conj\n  \"Analogue to [[clojure.core/conj]] with comparator that overrides the one stored in set.\"\n  [set key cmp]\n  (let [roots (node-conj (.-root set) cmp key)]\n    (cond\n      ;; tree not changed\n      (nil? roots)\n        set\n     \n      ;; keeping single root\n      (== (arrays/alength roots) 1)\n        (alter-btset set\n          (arrays/aget roots 0)\n          (.-shift set)\n          (inc (.-cnt set)))\n     \n      ;; introducing new root\n      :else\n        (alter-btset set\n          (Node. (arrays/amap node-lim-key roots) roots)\n          (+ (.-shift set) level-shift)\n          (inc (.-cnt set))))))\n\n\n(defn disj\n  \"Analogue to [[clojure.core/disj]] with comparator that overrides the one stored in set.\"\n  [set key cmp]\n  (let [new-roots (node-disj (.-root set) cmp key true nil nil)]\n    (if (nil? new-roots) ;; nothing changed, key wasn't in the set\n      set\n      (let [new-root (arrays/aget new-roots 0)]\n        (if (and (instance? Node new-root)\n                 (== 1 (arrays/alength (.-pointers new-root))))\n          \n          ;; root has one child, make him new root\n          (alter-btset set\n            (arrays/aget (.-pointers new-root) 0)\n            (- (.-shift set) level-shift)\n            (dec (.-cnt set)))\n          \n          ;; keeping root level\n          (alter-btset set\n            new-root\n            (.-shift set)\n            (dec (.-cnt set))))))))\n\n\n(defn slice\n  \"An iterator for part of the set with provided boundaries.\n   `(slice set from to)` returns iterator for all Xs where from <= X <= to.\n   Optionally pass in comparator that will override the one that set uses. Supports efficient [[clojure.core/rseq]].\"\n  ([set key-from key-to]\n    (-slice set key-from key-to (.-comparator set)))\n  ([set key-from key-to comparator]\n    (-slice set key-from key-to comparator)))\n\n\n(defn rslice\n  \"A reverse iterator for part of the set with provided boundaries.\n   `(rslice set from to)` returns backwards iterator for all Xs where from <= X <= to.\n   Optionally pass in comparator that will override the one that set uses. Supports efficient [[clojure.core/rseq]].\"\n  ([set key]\n    (some-> (-slice set key key (.-comparator set)) rseq))\n  ([set key-from key-to]\n    (some-> (-slice set key-to key-from (.-comparator set)) rseq))\n  ([set key-from key-to comparator]\n    (some-> (-slice set key-to key-from comparator) rseq)))\n\n\n(defn from-sorted-array\n  \"Fast path to create a set if you already have a sorted array of elements on your hands.\"\n  [cmp arr]\n  (let [leaves (->> arr\n                   (arr-partition-approx min-len max-len)\n                   (arr-map-inplace #(Leaf. %)))]\n    (loop [current-level leaves\n           shift 0]\n      (case (count current-level)\n        0 (BTSet. (Leaf. (arrays/array)) 0 0 cmp nil uninitialized-hash)\n        1 (BTSet. (first current-level) shift (arrays/alength arr) cmp nil uninitialized-hash)\n        (recur (->> current-level\n                    (arr-partition-approx min-len max-len)\n                    (arr-map-inplace #(Node. (arrays/amap node-lim-key %) %)))\n               (+ shift level-shift))))))\n\n\n(defn from-sequential\n  \"Create a set with custom comparator and a collection of keys. Useful when you don\u2019t want to call [[clojure.core/apply]] on [[sorted-set-by]].\"\n  [cmp seq]\n  (let [arr (-> (into-array seq) (arrays/asort cmp) (sorted-arr-distinct cmp))]\n    (from-sorted-array cmp arr)))\n\n\n(defn sorted-set-by\n  ([cmp] (BTSet. (Leaf. (arrays/array)) 0 0 cmp nil uninitialized-hash))\n  ([cmp & keys] (from-sequential cmp keys)))\n\n\n(defn sorted-set\n  ([] (sorted-set-by compare))\n  ([& keys] (from-sequential compare keys)))"]}