{"version":3,"sources":["brundij/ds.cljs"],"mappings":";AAMA,GAAA,QAAAA,oCAAAC,uCAAAC;AAAA;AAAA,AAAA,AAASC,sBAAS,AAACC,uDAAO,iBAAAC,WAAY,AAACE;AAAb,AAAA,wHAAAF,+CAAAA,/JAACC,yDAAAA,mEAAAA;uDAAT,qDAAA,2CAAA,8DAC0B,6CAAA,7CAACE;;AAE7C;;;2BAAA,3BAAMC,8DAEHC;AAFH,AAGE,mCAAA,5BAAU,AAAgBC,0DAAyC,AAACC,qCAAqBF;;AAE3F;;;iCAAA,jCAAMG;AAAN,AAGE,IAAMC,YAAU,4BAAA,5BAAU,AAAgBH;IACpCI,oBAAkB,AAACC,oCAAoBF;AAD7C,AAEE,GAAM,GAAK,cAAA,bAAMA;AAAjB,AACE,AAACG,+DAAcd,oBAASY;;AAD1B;;AAEA,sFAAA,/EAACG,2DAAUf,uFACA,WAAKgB;AAAL,AACE,IAAAC,qBAAc,AAAA,2FAAWD;AAAzB,AAAA,oBAAAC;AAAA,AAAA,SAAAA,LAAWV;AAAX,AACE,kBAAA,XAACW;AAAD,AAAgB,OAACZ,yBAASC;GAA1B;;AADF;;;;AAGjB,4BAAA,5BAAMY,gEAAWC;AAAjB,AACE,GAAI,AAACC,qBAAKD;AACR,OAACE,uDAAWtB,oBAASoB;;AACrB,kFAAA,3EAACE,uDAAWtB,uGAAUoB;;;AAE1B,yCAAA,zCAAMG,0FAAwBC;AAA9B,AACE,kFAAA,mFAAA,mFAAA,iFAAA,mFAAA,rZAACF,uDAAWtB,+ZAA8CwB;;AAE5D,+BAAA,/BAAMC;AAAN,AACE,IAAAC,WAAA,AAAA;IAAAC,WAAA,AAAAC,gBAIM5B;AAJN,AAAA,0GAAA0B,SAAAC,wCAAAD,SAAAC,5JAACE,kDAAAA,qEAAAA;;AAMH,yCAAA,zCAAMC;AAAN,AACE,IAAAC,WAAA,AAAA;IAAAC,WAAA,AAAAJ,gBAEM5B;AAFN,AAAA,0GAAA+B,SAAAC,wCAAAD,SAAAC,5JAACH,kDAAAA,qEAAAA","names":["js/brundij","js/brundij.ds","js/brundij.ds.database","brundij.ds/database","reagent.core.atom","G__63948","datascript.core/empty-db","brundij.schema/schema","cljs.core.atom","brundij.ds/persist!","db","js/window","datascript.transit/write-transit-str","brundij.ds/initialize-ds!","persisted","transit-persisted","datascript.transit/read-transit-str","datascript.core.reset_conn_BANG_","datascript.core.listen_BANG_","tx-report","temp__5735__auto__","js/setTimeout","brundij.ds/transact!","data","cljs.core/seq?","datascript.core.transact","brundij.ds/retract-health-entity!","uuid","brundij.ds/get-health-checks","G__64001","G__64002","cljs.core/deref","datascript.core/q","brundij.ds/get-published-health-checks","G__64015","G__64016"],"sourcesContent":["(ns brundij.ds\n  (:require [brundij.schema :refer [schema]]\n            [datascript.core :as d]\n            [datascript.transit :as dt]\n            [reagent.core :as r]))\n\n(defonce database (r/atom (d/empty-db (schema))\n                          :meta {:listeners (atom {})}))\n\n(defn persist!\n  \"Persists a datascript database to localStorage\"\n  [db]\n  (.setItem (.-localStorage js/window) \"datascript-brundij-database\" (dt/write-transit-str db)))\n\n(defn initialize-ds!\n  \"Initializes datascript database. Will create a database from the data on localStoragge if possible. Also listens for changes and persists those\"\n  []\n  (let [persisted (.getItem (.-localStorage js/window) \"datascript-brundij-database\")\n        transit-persisted (dt/read-transit-str persisted)]\n    (when (not (nil? persisted))\n      (d/reset-conn! database transit-persisted))\n    (d/listen! database :persistence\n               (fn [tx-report]\n                 (when-let [db (:db-after tx-report)]\n                   (js/setTimeout #(persist! db) 0))))))\n\n(defn transact! [data]\n  (if (seq? data)\n    (d/transact database data)\n    (d/transact database [data])))\n\n(defn retract-health-entity! [uuid]\n  (d/transact database [[:db.fn/retractEntity [:health/uuid uuid]]]))\n\n(defn get-health-checks []\n  (d/q '[:find (pull ?e [* {:health/question [:question/uuid\n                                              :question/created_at\n                                              :question/content]}])\n         :where [?e :health/uuid _]]\n       @database))\n\n(defn get-published-health-checks []\n  (d/q '[:find (pull ?e [*])\n         :where [?e :published/uuid _]]\n       @database))\n"]}