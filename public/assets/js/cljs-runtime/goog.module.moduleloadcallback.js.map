{
"version":3,
"file":"goog.module.moduleloadcallback.js",
"lineCount":22,
"mappings":"AAWAA,IAAKC,CAAAA,OAAL,CAAa,gCAAb,CAAA;AAEAD,IAAKE,CAAAA,OAAL,CAAa,+BAAb,CAAA;AAEAF,IAAKE,CAAAA,OAAL,CAAa,aAAb,CAAA;AAYAF,IAAKG,CAAAA,MAAOC,CAAAA,kBAAZ,GAAiCC,QAAQ,CAACC,EAAD,EAAKC,WAAL,CAAkB;AAOzD,MAAKC,CAAAA,GAAL,GAAWF,EAAX;AAOA,MAAKG,CAAAA,QAAL,GAAgBF,WAAhB;AAdyD,CAA3D;AAsBAP,IAAKG,CAAAA,MAAOC,CAAAA,kBAAmBM,CAAAA,SAAUC,CAAAA,OAAzC,GAAmDC,QAAQ,CAACC,OAAD,CAAU;AAEnE,MAAI,IAAKL,CAAAA,GAAT,CAAc;AACZ,QAAKA,CAAAA,GAAIM,CAAAA,IAAT,CAAc,IAAKL,CAAAA,QAAnB,IAA+B,IAA/B,EAAqCI,OAArC,CAAA;AACA,QAAKJ,CAAAA,QAAL,GAAgB,IAAhB;AACA,QAAKD,CAAAA,GAAL,GAAW,IAAX;AAHY;AAFqD,CAArE;AAaAR,IAAKG,CAAAA,MAAOC,CAAAA,kBAAmBM,CAAAA,SAAUK,CAAAA,KAAzC,GAAiDC,QAAQ,EAAG;AAE1D,MAAKR,CAAAA,GAAL,GAAW,IAAX;AACA,MAAKC,CAAAA,QAAL,GAAgB,IAAhB;AAH0D,CAA5D;AASAT,IAAKiB,CAAAA,KAAMC,CAAAA,kBAAmBC,CAAAA,QAA9B,CAKI,QAAQ,CAACC,WAAD,CAAc;AAEpBpB,MAAKG,CAAAA,MAAOC,CAAAA,kBAAmBM,CAAAA,SAAUC,CAAAA,OAAzC,GACIS,WAAA,CAAYpB,IAAKG,CAAAA,MAAOC,CAAAA,kBAAmBM,CAAAA,SAAUC,CAAAA,OAArD,CADJ;AAFoB,CAL1B,CAAA;;",
"sources":["goog/module/moduleloadcallback.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview A simple callback mechanism for notification about module\n * loads. Should be considered package-private to goog.module.\n */\n\ngoog.provide('goog.module.ModuleLoadCallback');\n\ngoog.require('goog.debug.entryPointRegistry');\n/** @suppress {extraRequire} */\ngoog.require('goog.module');\n\n\n\n/**\n * Class used to encapsulate the callbacks to be called when a module loads.\n * @param {Function} fn Callback function.\n * @param {Object=} opt_handler Optional handler under whose scope to execute\n *     the callback.\n * @constructor\n * @final\n */\ngoog.module.ModuleLoadCallback = function(fn, opt_handler) {\n  'use strict';\n  /**\n   * Callback function.\n   * @type {Function}\n   * @private\n   */\n  this.fn_ = fn;\n\n  /**\n   * Optional handler under whose scope to execute the callback.\n   * @type {Object|undefined}\n   * @private\n   */\n  this.handler_ = opt_handler;\n};\n\n\n/**\n * Completes the operation and calls the callback function if appropriate.\n * @param {*} context The module context.\n */\ngoog.module.ModuleLoadCallback.prototype.execute = function(context) {\n  'use strict';\n  if (this.fn_) {\n    this.fn_.call(this.handler_ || null, context);\n    this.handler_ = null;\n    this.fn_ = null;\n  }\n};\n\n\n/**\n * Abort the callback, but not the actual module load.\n */\ngoog.module.ModuleLoadCallback.prototype.abort = function() {\n  'use strict';\n  this.fn_ = null;\n  this.handler_ = null;\n};\n\n\n// Register the browser event handler as an entry point, so that\n// it can be monitored for exception handling, etc.\ngoog.debug.entryPointRegistry.register(\n    /**\n     * @param {function(!Function): !Function} transformer The transforming\n     *     function.\n     */\n    function(transformer) {\n      'use strict';\n      goog.module.ModuleLoadCallback.prototype.execute =\n          transformer(goog.module.ModuleLoadCallback.prototype.execute);\n    });\n"],
"names":["goog","provide","require","module","ModuleLoadCallback","goog.module.ModuleLoadCallback","fn","opt_handler","fn_","handler_","prototype","execute","goog.module.ModuleLoadCallback.prototype.execute","context","call","abort","goog.module.ModuleLoadCallback.prototype.abort","debug","entryPointRegistry","register","transformer"]
}
