{"version":3,"sources":["brundij/shared/events.cljs"],"mappings":"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","names":["re-frame.core/reg-fx","args","cljs.core.apply","cljs.core/aset","re_frame.core.reg_event_db","_","data","brundij.shared.ds/transact!","uuid","brundij.shared.ds/retract-health-entity!","re_frame.core.reg_event_fx","p__49646","vec__49647","cljs.core.nth","p__49650","vec__49651","route","params","query","p__49654","vec__49655","cljs.core.println","p__49658","map__49659","cljs.core/--destructure-map","cljs.core.get","toast-content","js/module$node_modules$react_toastify$dist$index.toast","p__49660","map__49661","p__49662","map__49663","p__49664","map__49665","p__49666","p__49667","map__49668","vec__49669","db","is-online?","cljs.core.assoc","p__49672","p__49673","map__49674","vec__49675","health-id","p__49678","p__49679","map__49680","vec__49681","response","parsed-questions","cljs.core.map_indexed","index","item","cljs.core/first","cljs.core/vec","p__49684","p__49685","map__49686","vec__49687","health-uuid","p__49690","p__49691","map__49692","vec__49693","_res","brundij.date/get-inst"],"sourcesContent":["(ns brundij.shared.events\n  (:require [brundij.date :as date]\n            [brundij.shared.ds :as ds]\n            [re-frame.core :as re-frame]\n            [\"react-toastify\" :refer (toast)]))\n\n(re-frame/reg-fx\n ::aset\n (fn [args]\n   (apply aset args)))\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn [_]\n   {}))\n\n;; ds\n(re-frame/reg-fx\n ::transact!\n (fn [data]\n   (ds/transact! data)))\n\n(re-frame/reg-fx\n ::retract-health-entity!\n (fn [uuid]\n   (ds/retract-health-entity! uuid)))\n\n(re-frame/reg-event-fx\n ::retract-health\n (fn [_ [_ uuid]]\n   {::retract-health-entity! uuid}))\n\n;; Reitit events and effects\n(re-frame/reg-event-fx\n ::navigate\n (fn [_ [_ route params query]]\n   {::navigate! [route params query]}))\n\n(re-frame/reg-fx\n ::navigate!\n (fn [[route params query]]\n   (println route params query)))\n\n;; toasts\n(re-frame/reg-fx\n ::show-toast\n (fn [{:keys [toast-content]}]\n   (toast toast-content)))\n\n(re-frame/reg-fx\n ::show-success-toast\n (fn [{:keys [toast-content]}]\n   (.success toast toast-content)))\n\n(re-frame/reg-fx\n ::show-failure-toast\n (fn [{:keys [toast-content]}]\n   (.error toast toast-content)))\n\n(re-frame/reg-fx\n ::show-warn-toast\n (fn [{:keys [toast-content]}]\n   (.warn toast toast-content)))\n\n;; online check\n(re-frame/reg-event-fx\n ::set-is-online\n (fn [{:keys [db]} [_ is-online?]]\n   (if (true? is-online?)\n     {:db (assoc db :is-online? is-online?)}\n     {:db (assoc db :is-online? is-online?)\n      ::show-warn-toast {:toast-content \"Looks like you're offline. \n                                         All operations will be made \n                                         locally and sent to the server \n                                         whenever you get online again.\"}})))\n\n;; http\n(re-frame/reg-event-fx\n ::fetch-health-questions\n (fn [{:keys [db]} [_ health-id]]\n   {:db (assoc db :loading true)\n    :http-xhrio {:method :get\n                 :uri (str  \"http://localhost:4000/v1/healths/\" health-id)\n                 :timeout 8000\n                 :on-success [::fetch-health-questions-success]\n                 :on-failure [::fetch-health-questions-failure]}}))\n\n(re-frame/reg-event-fx\n ::fetch-health-questions-success\n (fn [{:keys [db]} [_ response]]\n   (let [parsed-questions (map-indexed\n                           (fn [index item]\n                             {:content (:question/content item)\n                              :index index\n                              :uuid (:question/uuid item)\n                              :rating 2\n                              :trend \"stable\"})\n                           (:health/question (first response)))]\n     {:db (assoc db :loading false :pre-existing-questions (vec parsed-questions))\n      ::navigate! [:answers]})))\n\n(re-frame/reg-event-fx\n ::fetch-health-questions-failure\n (fn [_]\n   {::show-failure-toast {:toast-content \"Failure fetching your health check's questions\"}}))\n\n(re-frame/reg-event-fx\n ::publish-local-health\n (fn [{:keys [db]} [_ data]]\n   (let [health-uuid (:health/uuid data)]\n     {:db (assoc db :loading true)\n      :http-xhrio {:method :post\n                   :uri (str  \"http://localhost:4000/v1/health-with-questions\")\n                   ; :params (utils/dissoc-local-health-db-ids data)\n                   :timeout 8000\n                   :on-success [::local-health-publish-success :health-uuid health-uuid]\n                   :on-failure [::local-health-failure]}})))\n\n(re-frame/reg-event-fx\n ::local-health-publish-success\n (fn [{:keys [db]} [_ _res health-uuid]]\n   {:db (assoc db\n               :loading false)\n    ::retract-health-entity! health-uuid\n    ::transact! {:published/uuid health-uuid\n                 :published/created_at (date/get-inst)}\n    ::show-success-toast\n    {:toast-content\n     (str \"Health check with UUID \" health-uuid \" successfully \n        published and ready to be answered by navigating to \")}})); (utils/mount-shareable-link health-uuid))}}))\n\n(re-frame/reg-event-fx\n ::local-health-publish-failure\n (fn [_]\n   {::show-failure-toast\n    {:toast-content\n     \"Failure creating your health check. Please try again later\"}}))\n"]}