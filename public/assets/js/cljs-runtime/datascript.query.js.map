{"version":3,"sources":["datascript/query.cljc"],"mappings":"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","names":["datascript.query/lru-cache-size","this__4461__auto__","k__4462__auto__","this__4463__auto__","k63246","else__4464__auto__","G__63250","cljs.core/Keyword","rels","sources","rules","cljs.core.get","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","cljs.core.reduce","ret__4484__auto__","p__63251","vec__63252","k__4485__auto__","cljs.core.nth","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__63245","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","cljs.core/count","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this63247","other63248","cljs.core._EQ_","this__4471__auto__","k__4472__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4468__auto__","G__63262","this__4469__auto__","k__4470__auto__","pred__63263","cljs.core/keyword-identical?","expr__63264","cljs.core.assoc","this__4474__auto__","cljs.core/seq","cljs.core/MapEntry","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","datascript.query/Context","this__4505__auto__","cljs.core/List","writer__4506__auto__","cljs.core/-write","G__63249","extmap__4501__auto__","G__63268","cljs.core/record?","datascript.query/->Context","datascript.query/map->Context","k63272","G__63277","attrs","tuples","p__63279","vec__63280","G__63271","this63273","other63274","G__63288","pred__63289","expr__63290","datascript.query/Relation","G__63275","G__63294","datascript.query/->Relation","datascript.query/map->Relation","datascript.query/single","coll","js/Error","cljs.core/next","cljs.core/first","datascript.query/intersect-keys","attrs1","attrs2","clojure.set.intersection","cljs.core/set","cljs.core/keys","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","datascript.query/concatv","seq63299","self__4806__auto__","xs","cljs.core/cat","G__63308","datascript.query/zip","args-arr__4839__auto__","argseq__4840__auto__","seq63305","G__63306","G__63307","self__4805__auto__","a","b","cljs.core.mapv","cljs.core/vector","rest","cljs.core.apply","cljs.core/mapv","datascript.query/same-keys?","p1__63310#","cljs.core/every?","p1__63311#","datascript.query/looks-like?","pattern","form","cljs.core/sequential?","cljs.core/Symbol","cljs.core/last","p__63314","vec__63315","pattern-el","form-el","cljs.core.map","cljs.core/butlast","p__63319","vec__63320","datascript.query/source?","sym","cljs.core/name","datascript.query/free-var?","datascript.query/attr?","datascript.query/lookup-ref?","datascript.query/join-tuples","t1","idxs1","t2","idxs2","l1","l2","res","me.tonsky.persistent-sorted-set.arrays/make-array","n__4695__auto__","i","datascript.query/sum-rel","map__63326","cljs.core/--destructure-map","map__63327","attrs-a","tuples-a","attrs-b","tuples-b","cljs.core/vec","cljs.core.ex_info","cljs.core.pr_str","cljs.core/number?","cljs.core/vals","idxb->idxa","iter__4611__auto__","s__63330","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","b__63332","cljs.core/chunk-buffer","i__63331","vec__63334","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__63329","cljs.core/chunk-rest","vec__63337","cljs.core/cons","cljs.core/rest","idx-b","tlen","cljs.core/max","tuples'","cljs.core/persistent!","acc","tuple-b","tuple'","seq__63340","chunk__63341","count__63342","i__63343","vec__63351","c__4638__auto__","cljs.core/chunk-first","vec__63354","idx-a","cljs.core.conj_BANG_","cljs.core/transient","all-attrs","cljs.core/zipmap","cljs.core.merge","cljs.core.range","G__63359","G__63360","G__63357","G__63358","G__63362","datascript.query/prod-rel","rel1","rel2","cljs.core/to-array","datascript.query/-differ?","seq63364","l","cljs.core.not_EQ_","cljs.core.take","cljs.core.drop","datascript.query/-get-else","db","e","else-val","temp__5737__auto__","datom","datascript.db/-search","datascript.query/-get-some","seq63368","G__63369","G__63370","as","_","temp__5739__auto__","cljs.core/reduced","datascript.query/-missing?","datascript.impl.entity/entity","datascript.query/and-fn","seq63371","args","datascript.query/or-fn","seq63372","cljs.core//","datascript.query/built-ins","cljs.core/=","cljs.core/==","cljs.core/not=","cljs.core/<","cljs.core/>","cljs.core/<=","cljs.core/>=","cljs.core/+","cljs.core/-","cljs.core/*","cljs.core/quot","cljs.core/rem","cljs.core/mod","cljs.core/inc","cljs.core/dec","cljs.core/min","cljs.core/zero?","cljs.core/pos?","cljs.core/neg?","cljs.core/even?","cljs.core/odd?","cljs.core/compare","cljs.core/rand","cljs.core/rand-int","cljs.core/true?","cljs.core/false?","cljs.core/nil?","cljs.core/some?","cljs.core/not","cljs.core/complement","cljs.core/identical?","cljs.core/identity","cljs.core/keyword","cljs.core/meta","cljs.core/namespace","cljs.core/type","cljs.core/list","cljs.core/hash-map","cljs.core/array-map","cljs.core/range","cljs.core/empty?","cljs.core/str","cljs.core/pr-str","cljs.core/print-str","cljs.core/println-str","cljs.core/prn-str","cljs.core/subs","cljs.core/re-find","cljs.core/re-matches","cljs.core/re-seq","cljs.core/re-pattern","clojure.string/blank?","clojure.string/includes?","clojure.string/starts-with?","clojure.string/ends-with?","datascript.query/built-in-aggregates","sum","terms","cljs.core.sort","size","med","G__63382","mean","avg","s__63385","b__63387","i__63386","iter__63384","x","delta","js/Math.sqrt","variance","median","stddev","n","cljs.core.conj","cljs.core/rand-nth","cljs.core.repeatedly","cljs.core/shuffle","cljs.core.distinct","datascript.query/parse-rules","cljs.reader.read_string","datascript.parser/parse-rules","cljs.core/group-by","cljs.core/ffirst","datascript.query/empty-rel","binding","vars","datascript.parser/collect-vars-distinct","datascript$query$IBinding$in__GT_rel$dyn","x__4509__auto__","m__4510__auto__","datascript.query/in->rel","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","datascript.query/IBinding","value","cljs.core/PROTOCOL_SENTINEL","datascript.parser/BindIgnore","datascript.query.prod_rel","datascript.parser/BindScalar","cljs.core.get_in","cljs.core.into_array","datascript.parser/BindColl","datascript.db/seqable?","datascript.parser/source","p1__63389#","datascript.parser/BindTuple","p1__63390#","p2__63391#","p__63394","vec__63395","datascript.query/resolve-in","context","datascript.parser/SrcVar","cljs.core.update","cljs.core/assoc","datascript.parser/RulesVar","cljs.core/conj","datascript.query/resolve-ins","bindings","values","cb","cv","p1__63398#","p1__63400#","datascript.query/*lookup-attrs*","datascript.query/*implicit-source*","datascript.query/getter-fn","attr","idx","tuple","eid","datascript.db/entid","me.tonsky.persistent-sorted-set.arrays/array?","datascript.query/tuple-key-fn","getters","cljs.core.list_STAR_","p1__63402#","datascript.query/hash-attrs","key-fn","hash-table","key","cljs.core.assoc_BANG_","datascript.query/hash-join","tuples1","tuples2","common-attrs","common-gtrs1","p1__63406#","common-gtrs2","p1__63407#","keep-attrs1","keep-attrs2","clojure.set.difference","keep-idxs1","keep-idxs2","key-fn1","hash","key-fn2","new-tuples","tuple2","tuple1","datascript.query/subtract-rel","map__63412","map__63413","getters-b","p1__63409#","key-fn-b","getters-a","p1__63410#","key-fn-a","p1__63411#","cljs.core/filterv","G__63414","datascript.query/lookup-pattern-db","search-pattern","p1__63415#","datoms","attr->prop","cljs.core.filter","p__63416","vec__63417","s","datascript.query/matches-pattern?","and__4210__auto__","t","p","datascript.query/lookup-pattern-coll","data","p1__63420#","attr->idx","p__63421","vec__63422","datascript.query/normalize-pattern-clause","clause","datascript.query/lookup-pattern","source","cljs.core/native-satisfies?","datascript.db/ISearch","datascript.query/collapse-rels","new-rel","rel","datascript.query/rel-with-attr","p1__63428#","cljs.core/some","datascript.query/context-resolve-val","fexpr__63431","datascript.query/rel-contains-attrs?","p1__63432#","datascript.query/rel-prod-by-attrs","p1__63433#","production","p1__63434#","cljs.core.remove","datascript.query/-call-fn","f","len","static-args","tuples-args","arg","me.tonsky.persistent-sorted-set.arrays/aclone","tuple-idx","v","datascript.query/resolve-sym","datascript.query/filter-by-pred","vec__63453","vec__63456","seq__63457","first__63458","vec__63459","pred","or__4212__auto__","cljs.core/symbol?","tuple-pred","p1__63452#","datascript.query/bind-by-fn","vec__63462","vec__63465","seq__63466","first__63467","vec__63468","out","datascript.parser/parse-binding","fun","tuple-fn","s__63484","b__63486","i__63485","iter__63483","val","datascript.query/rule?","head","cljs.core/second","datascript.query/rule-seqid","cljs.core.atom","datascript.query/expand-rule","used-args","vec__63500","seq__63501","first__63502","rule","call-args","seqid","cljs.core.swap_BANG_","branches","s__63504","b__63506","i__63505","vec__63507","seq__63508","first__63509","vec__63510","seq__63511","first__63512","iter__63503","vec__63513","seq__63514","first__63515","vec__63516","seq__63517","first__63518","branch","rule-args","clauses","replacements","p1__63499#","clojure.walk/postwalk","x__59816__auto__","cljs.core.symbol","datascript.query/remove-pairs","ys","pairs","p__63519","vec__63520","y","datascript.query/rule-gen-guards","rule-clause","vec__63523","seq__63524","first__63525","prev-call-args","s__63527","b__63529","i__63528","vec__63530","iter__63526","vec__63533","prev-args","datascript.query/walk-collect","cljs.core/deref","p1__63536#","datascript.query/collect-vars","datascript.query/split-guards","guards","bound-vars","p__63537","vec__63538","vec__63541","seq__63542","first__63543","datascript.query/solve-rule","final-attrs","final-attrs-map","solve","prefix-context","datascript.query/-resolve-clause","empty-rels?","p1__63544#","stack","frame","vec__63563","vec__63566","seq__63567","first__63568","next-clauses","p1__63545#","cljs.core/split-with","datascript.query/-collect","vec__63569","seq__63570","first__63571","vec__63572","active-gs","pending-gs","p1__63546#","prefix-clauses","s__63576","b__63578","i__63577","iter__63575","datascript.query.concatv","datascript.query/resolve-pattern-lookup-refs","datascript.db/IDB","vec__63580","tx","datascript.db/entid-strict","datascript.db/ref?","cljs.core.subvec","datascript.query/dynamic-lookup-attrs","vec__63583","G__63586","datascript.query/limit-rel","attrs'","cljs.core/select-keys","datascript.query/limit-context","p1__63587#","cljs.core.keep","datascript.query/bound-vars","p1__63588#","cljs.core.mapcat","datascript.query/check-bound","bound","clojure.set/subset?","missing","datascript.query/check-free-same","free","p1__63589#","datascript.query/check-free-subset","seq__63590","chunk__63591","count__63592","i__63593","cljs.core.prn","G__63599","datascript.query._resolve_clause","orig-clause","pred__63600","expr__63601","G__63603","G__63604","G__63605","G__63606","G__63607","G__63608","G__63614","G__63615","G__63619","G__63620","G__63627","G__63628","G__63632","G__63633","G__63637","G__63638","G__63642","G__63643","G__63647","G__63648","cljs.core/nfirst","vec__63609","seq__63610","first__63611","source-sym","*implicit-source*-orig-val__63612","*implicit-source*-temp-val__63613","vec__63616","seq__63617","first__63618","contexts","p1__63594#","datascript.query/resolve-clause","p1__63595#","vec__63621","seq__63622","first__63623","vec__63624","seq__63625","first__63626","req-vars","vec__63629","seq__63630","first__63631","join-context","p1__63596#","p1__63597#","sum-rel","vec__63634","seq__63635","first__63636","vec__63639","seq__63640","first__63641","negation-vars","context'","negation-context","negation","vec__63644","seq__63645","first__63646","relation","*lookup-attrs*-orig-val__63649","*lookup-attrs*-temp-val__63650","*implicit-source*-orig-val__63652","*implicit-source*-temp-val__63653","G__63654","G__63655","datascript.query/-q","*implicit-source*-orig-val__63656","*implicit-source*-temp-val__63657","G__63660","symbols","datascript.query._collect","keep-attrs","copy-map","p1__63658#","s__63662","xs__6292__auto__","iterys__4607__auto__","s__63664","b__63666","i__63665","iter__63663","fs__4608__auto__","iter__63661","cljs.core/aclone","datascript.query/collect","datascript$query$IContextResolve$_context_resolve$dyn","datascript.query/-context-resolve","datascript.query/IContextResolve","var","datascript.parser/Variable","datascript.parser/PlainSymbol","datascript.parser/Constant","datascript.query/-aggregate","find-elements","element","fixed-value","datascript.parser/aggregate?","p1__63667#","vals","p1__63668#","datascript.query/idxs-of","p1__63669#","p2__63670#","datascript.query/aggregate","resultset","group-idxs","group-fn","p1__63671#","grouped","s__63673","b__63675","i__63674","vec__63676","iter__63672","vec__63679","datascript.query/map*","p1__63682#","p2__63683#","cljs.core/empty","datascript.query/tuples->return-map","return-map","idxs","m","datascript$query$IPostProcess$_post_process$dyn","datascript.query/-post-process","datascript.query/IPostProcess","find","datascript.parser/FindRel","datascript.parser/FindColl","datascript.parser/FindScalar","datascript.parser/FindTuple","datascript.query/pull","resolved","s__63685","b__63687","i__63686","iter__63684","datascript.parser/pull?","datascript.pull-parser/parse-pull","s__63689","b__63691","i__63690","iter__63688","env","el","vec__63692","vec__63695","src","spec","datascript.pull-api/pull-spec","datascript.query/query-cache","cljs.core/volatile!","datascript.lru/lru","datascript.query/memoized-parse-query","q","cached","qp","datascript.parser/parse-query","datascript.query/q","seq63699","G__63700","inputs","parsed-q","datascript.parser/find-elements","find-vars","datascript.parser/find-vars","result-arity","with","all-vars","G__63701","datascript.parser/query->map","wheres","G__63702","p1__63698#"],"sourcesContent":["(ns ^:no-doc datascript.query\n  (:require\n   [#?(:cljs cljs.reader :clj clojure.edn) :as edn]\n   [clojure.set :as set]\n   [clojure.string :as str]\n   [clojure.walk :as walk]\n   [datascript.db :as db #?(:cljs :refer-macros :clj :refer) [raise cond+]]\n   [me.tonsky.persistent-sorted-set.arrays :as da]\n   [datascript.lru]\n   [datascript.impl.entity :as de]\n   [datascript.parser :as dp #?@(:cljs [:refer [BindColl BindIgnore BindScalar BindTuple Constant\n                                                FindColl FindRel FindScalar FindTuple PlainSymbol\n                                                RulesVar SrcVar Variable]])]\n   [datascript.pull-api :as dpa]\n   [datascript.pull-parser :as dpp])\n  #?(:clj (:import [datascript.parser BindColl BindIgnore BindScalar BindTuple\n                    Constant FindColl FindRel FindScalar FindTuple PlainSymbol\n                    RulesVar SrcVar Variable])))\n\n;; ----------------------------------------------------------------------------\n\n(def ^:const lru-cache-size 100)\n\n(declare -collect -resolve-clause resolve-clause)\n\n;; Records\n\n(defrecord Context [rels sources rules])\n\n;; attrs:\n;;    {?e 0, ?v 1} or {?e2 \"a\", ?age \"v\"}\n;; tuples:\n;;    [ #js [1 \"Ivan\" 5 14] ... ]\n;; or [ (Datom. 2 \"Oleg\" 1 55) ... ]\n(defrecord Relation [attrs tuples])\n\n\n;; Utilities\n\n(defn single [coll]\n  (assert (nil? (next coll)) \"Expected single element\")\n  (first coll))\n\n(defn intersect-keys [attrs1 attrs2]\n  (set/intersection (set (keys attrs1))\n                    (set (keys attrs2))))\n\n(defn concatv [& xs]\n  (into [] cat xs))\n\n(defn zip\n  ([a b] (mapv vector a b))\n  ([a b & rest] (apply mapv vector a b rest)))\n\n(defn same-keys? [a b]\n  (and (= (count a) (count b))\n       (every? #(contains? b %) (keys a))\n       (every? #(contains? b %) (keys a))))\n\n(defn- looks-like? [pattern form]\n  (cond\n    (= '_ pattern)\n      true\n    (= '[*] pattern)\n      (sequential? form)\n    (symbol? pattern)\n      (= form pattern)\n    (sequential? pattern)\n      (if (= (last pattern) '*)\n        (and (sequential? form)\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector (butlast pattern) form)))\n        (and (sequential? form)\n             (= (count form) (count pattern))\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector pattern form))))\n    :else ;; (predicate? pattern)\n      (pattern form)))\n\n(defn source? [sym]\n  (and (symbol? sym)\n       (= \\$ (first (name sym)))))\n\n(defn free-var? [sym]\n  (and (symbol? sym)\n       (= \\? (first (name sym)))))\n\n(defn attr? [form]\n  (or (keyword? form) (string? form)))\n\n(defn lookup-ref? [form]\n  (looks-like? [attr? '_] form))\n\n;; Relation algebra\n\n(defn join-tuples [t1 #?(:cljs idxs1\n                         :clj  ^{:tag \"[[Ljava.lang.Object;\"} idxs1)\n                   t2 #?(:cljs idxs2\n                         :clj  ^{:tag \"[[Ljava.lang.Object;\"} idxs2)]\n  (let [l1  (alength idxs1)\n        l2  (alength idxs2)\n        res (da/make-array (+ l1 l2))]\n    (dotimes [i l1]\n      (aset res i (#?(:cljs da/aget :clj get) t1 (aget idxs1 i)))) ;; FIXME aget\n    (dotimes [i l2]\n      (aset res (+ l1 i) (#?(:cljs da/aget :clj get) t2 (aget idxs2 i)))) ;; FIXME aget\n    res))\n\n(defn sum-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b]\n    (cond\n      (= attrs-a attrs-b)\n      (Relation. attrs-a (into (vec tuples-a) tuples-b))\n\n      (not (same-keys? attrs-a attrs-b))\n      (raise \"Can\u2019t sum relations with different attrs: \" attrs-a \" and \" attrs-b\n             {:error :query/where})\n\n      (every? number? (vals attrs-a)) ;; can\u2019t conj into BTSetIter\n      (let [idxb->idxa (vec (for [[sym idx-b] attrs-b]\n                              [idx-b (attrs-a sym)]))\n            tlen    (->> (vals attrs-a) (reduce max) (inc)) \n            tuples' (persistent!\n                      (reduce\n                        (fn [acc tuple-b]\n                          (let [tuple' (da/make-array tlen)]\n                            (doseq [[idx-b idx-a] idxb->idxa]\n                              (aset tuple' idx-a (#?(:cljs da/aget :clj get) tuple-b idx-b)))\n                            (conj! acc tuple')))\n                        (transient (vec tuples-a))\n                        tuples-b))]\n        (Relation. attrs-a tuples'))\n\n      :else\n      (let [all-attrs (zipmap (keys (merge attrs-a attrs-b)) (range))]\n        (-> (Relation. all-attrs [])\n            (sum-rel a)\n            (sum-rel b))))))\n\n(defn prod-rel\n  ([] (Relation. {} [(da/make-array 0)]))\n  ([rel1 rel2]\n    (let [attrs1 (keys (:attrs rel1))\n          attrs2 (keys (:attrs rel2))\n          idxs1  (to-array (map (:attrs rel1) attrs1))\n          idxs2  (to-array (map (:attrs rel2) attrs2))]\n      (Relation.\n        (zipmap (concat attrs1 attrs2) (range))\n        (persistent!\n          (reduce\n            (fn [acc t1]\n              (reduce (fn [acc t2]\n                        (conj! acc (join-tuples t1 idxs1 t2 idxs2)))\n                      acc (:tuples rel2)))\n            (transient []) (:tuples rel1)))\n        ))))\n\n;; built-ins\n\n(defn- -differ? [& xs]\n  (let [l (count xs)]\n    (not= (take (/ l 2) xs) (drop (/ l 2) xs))))\n\n(defn- -get-else\n  [db e a else-val]\n  (when (nil? else-val)\n    (raise \"get-else: nil default value is not supported\" {:error :query/where}))\n  (if-some [datom (first (db/-search db [e a]))]\n    (:v datom)\n    else-val))\n\n(defn- -get-some\n  [db e & as]\n  (reduce\n   (fn [_ a]\n     (when-some [datom (first (db/-search db [e a]))]\n       (reduced [(:a datom) (:v datom)])))\n   nil\n   as))\n\n(defn- -missing?\n  [db e a]\n  (nil? (get (de/entity db e) a)))\n\n(defn- and-fn [& args]\n  (reduce (fn [a b]\n            (if b b (reduced b))) true args))\n            \n(defn- or-fn [& args]\n  (reduce (fn [a b]\n            (if b (reduced b) b)) nil args))\n\n(def built-ins {\n  '= =, '== ==, 'not= not=, '!= not=, '< <, '> >, '<= <=, '>= >=, '+ +, '- -,\n  '* *, '/ /, 'quot quot, 'rem rem, 'mod mod, 'inc inc, 'dec dec, 'max max, 'min min,\n  'zero? zero?, 'pos? pos?, 'neg? neg?, 'even? even?, 'odd? odd?, 'compare compare,\n  'rand rand, 'rand-int rand-int,\n  'true? true?, 'false? false?, 'nil? nil?, 'some? some?, 'not not, 'and and-fn, 'or or-fn,\n  'complement complement, 'identical? identical?,\n  'identity identity, 'keyword keyword, 'meta meta, 'name name, 'namespace namespace, 'type type,\n  'vector vector, 'list list, 'set set, 'hash-map hash-map, 'array-map array-map,\n  'count count, 'range range, 'not-empty not-empty, 'empty? empty?, 'contains? contains?,\n  'str str, 'pr-str pr-str, 'print-str print-str, 'println-str println-str, 'prn-str prn-str, 'subs subs,\n  're-find re-find, 're-matches re-matches, 're-seq re-seq, 're-pattern re-pattern,\n  '-differ? -differ?, 'get-else -get-else, 'get-some -get-some, 'missing? -missing?, 'ground identity,\n  'clojure.string/blank? str/blank?, 'clojure.string/includes? str/includes?,\n  'clojure.string/starts-with? str/starts-with?, 'clojure.string/ends-with? str/ends-with?\n  'tuple vector, 'untuple identity\n})\n\n(def built-in-aggregates\n (letfn [(sum [coll] (reduce + 0 coll))\n         (avg [coll] (/ (sum coll) (count coll)))\n         (median\n           [coll]\n           (let [terms (sort coll)\n                 size (count coll)\n                 med (bit-shift-right size 1)]\n             (cond-> (nth terms med)\n               (even? size)\n               (-> (+ (nth terms (dec med)))\n                   (/ 2)))))\n         (variance\n           [coll]\n           (let [mean (avg coll)\n                 sum  (sum (for [x coll\n                                 :let [delta (- x mean)]]\n                             (* delta delta)))]\n             (/ sum (count coll))))\n         (stddev \n           [coll] \n           (#?(:cljs js/Math.sqrt :clj Math/sqrt) (variance coll)))]\n   {'avg      avg\n    'median   median\n    'variance variance\n    'stddev   stddev\n    'distinct set\n    'min      (fn\n                ([coll] (reduce (fn [acc x]\n                                  (if (neg? (compare x acc))\n                                    x acc))\n                                (first coll) (next coll)))\n                ([n coll]\n                  (vec\n                    (reduce (fn [acc x]\n                              (cond\n                                (< (count acc) n)\n                                  (sort compare (conj acc x))\n                                (neg? (compare x (last acc)))\n                                  (sort compare (conj (butlast acc) x))\n                                :else acc))\n                            [] coll))))\n    'max      (fn\n                ([coll] (reduce (fn [acc x]\n                                  (if (pos? (compare x acc))\n                                    x acc))\n                                (first coll) (next coll)))\n                ([n coll]\n                  (vec\n                    (reduce (fn [acc x]\n                              (cond\n                                (< (count acc) n)\n                                  (sort compare (conj acc x))\n                                (pos? (compare x (first acc)))\n                                  (sort compare (conj (next acc) x))\n                                :else acc))\n                            [] coll))))\n    'sum      sum\n    'rand     (fn\n                ([coll] (rand-nth coll))\n                ([n coll] (vec (repeatedly n #(rand-nth coll)))))\n    'sample   (fn [n coll]\n                (vec (take n (shuffle coll))))\n    'count    count\n    'count-distinct (fn [coll] (count (distinct coll)))}))\n\n\n;;\n\n(defn parse-rules [rules]\n  (let [rules (if (string? rules) (edn/read-string rules) rules)] ;; for datascript.js interop\n    (dp/parse-rules rules) ;; validation\n    (group-by ffirst rules)))\n\n(defn empty-rel [binding]\n  (let [vars (->> (dp/collect-vars-distinct binding)\n               (map :symbol))]\n    (Relation. (zipmap vars (range)) [])))\n\n(defprotocol IBinding\n  (in->rel [binding value]))\n\n(extend-protocol IBinding\n  BindIgnore\n  (in->rel [_ _]\n    (prod-rel))\n  \n  BindScalar\n  (in->rel [binding value]\n    (Relation. {(get-in binding [:variable :symbol]) 0} [(into-array [value])]))\n  \n  BindColl\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to collection \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (empty? coll)\n        (empty-rel binding)\n      :else\n        (->> coll\n          (map #(in->rel (:binding binding) %))\n          (reduce sum-rel))))\n  \n  BindTuple\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (< (count coll) (count (:bindings binding)))\n        (raise \"Not enough elements in a collection \" coll \" to bind tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      :else\n        (reduce prod-rel\n          (map #(in->rel %1 %2) (:bindings binding) coll)))))\n\n(defn resolve-in [context [binding value]]\n  (cond\n    (and (instance? BindScalar binding)\n         (instance? SrcVar (:variable binding)))\n      (update context :sources assoc (get-in binding [:variable :symbol]) value)\n    (and (instance? BindScalar binding)\n         (instance? RulesVar (:variable binding)))\n      (assoc context :rules (parse-rules value))\n    :else\n      (update context :rels conj (in->rel binding value))))\n\n(defn resolve-ins [context bindings values]\n  (let [cb (count bindings)\n        cv (count values)]\n    (cond\n      (< cb cv)\n      (raise \"Extra inputs passed, expected: \" (mapv #(:source (meta %)) bindings) \", got: \" cv\n        {:error :query/inputs :expected bindings :got values})\n\n      (> cb cv)\n      (raise \"Too few inputs passed, expected: \" (mapv #(:source (meta %)) bindings) \", got: \" cv\n        {:error :query/inputs :expected bindings :got values})\n\n      :else\n      (reduce resolve-in context (zipmap bindings values)))))\n\n;;\n\n(def ^{:dynamic true\n       :doc \"List of symbols in current pattern that might potentiall be resolved to refs\"}\n  *lookup-attrs* nil)\n\n(def ^{:dynamic true\n       :doc \"Default pattern source. Lookup refs, patterns, rules will be resolved with it\"}\n  *implicit-source* nil)\n\n(defn getter-fn [attrs attr]\n  (let [idx (attrs attr)]\n    (if (contains? *lookup-attrs* attr)\n      (fn [tuple]\n        (let [eid (#?(:cljs da/aget :clj get) tuple idx)]\n          (cond\n            (number? eid)     eid ;; quick path to avoid fn call\n            (sequential? eid) (db/entid *implicit-source* eid)\n            (da/array? eid)   (db/entid *implicit-source* eid)\n            :else             eid)))\n      (fn [tuple]\n        (#?(:cljs da/aget :clj get) tuple idx)))))\n\n(defn tuple-key-fn [getters]\n  (if (== (count getters) 1)\n    (first getters)\n    (let [getters (to-array getters)]\n      (fn [tuple]\n        (list* #?(:cljs (.map getters #(% tuple))\n                  :clj  (to-array (map #(% tuple) getters))))))))\n\n(defn hash-attrs [key-fn tuples]\n  (loop [tuples     tuples\n         hash-table (transient {})]\n    (if-some [tuple (first tuples)]\n      (let [key (key-fn tuple)]\n        (recur (next tuples)\n               (assoc! hash-table key (conj (get hash-table key '()) tuple))))\n      (persistent! hash-table))))\n\n(defn hash-join [rel1 rel2]\n  (let [tuples1       (:tuples rel1)\n        tuples2       (:tuples rel2)\n        attrs1        (:attrs rel1)\n        attrs2        (:attrs rel2)\n        common-attrs  (vec (intersect-keys (:attrs rel1) (:attrs rel2)))\n        common-gtrs1  (map #(getter-fn attrs1 %) common-attrs)\n        common-gtrs2  (map #(getter-fn attrs2 %) common-attrs)\n        keep-attrs1   (keys attrs1)\n        keep-attrs2   (vec (set/difference (set (keys attrs2)) (set (keys attrs1))))\n        keep-idxs1    (to-array (map attrs1 keep-attrs1))\n        keep-idxs2    (to-array (map attrs2 keep-attrs2))\n        key-fn1       (tuple-key-fn common-gtrs1)\n        hash          (hash-attrs key-fn1 tuples1)\n        key-fn2       (tuple-key-fn common-gtrs2)\n        new-tuples    (->>\n                        (reduce (fn [acc tuple2]\n                                  (let [key (key-fn2 tuple2)]\n                                    (if-some [tuples1 (get hash key)]\n                                      (reduce (fn [acc tuple1]\n                                                (conj! acc (join-tuples tuple1 keep-idxs1 tuple2 keep-idxs2)))\n                                              acc tuples1)\n                                      acc)))\n                          (transient []) tuples2)\n                        (persistent!))]\n    (Relation. (zipmap (concat keep-attrs1 keep-attrs2) (range))\n               new-tuples)))\n\n(defn subtract-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b\n        attrs     (intersect-keys attrs-a attrs-b)\n        getters-b (map #(getter-fn attrs-b %) attrs)\n        key-fn-b  (tuple-key-fn getters-b)\n        hash      (hash-attrs key-fn-b tuples-b)\n        getters-a (map #(getter-fn attrs-a %) attrs)\n        key-fn-a  (tuple-key-fn getters-a)]\n    (assoc a\n      :tuples (filterv #(nil? (hash (key-fn-a %))) tuples-a))))\n\n(defn lookup-pattern-db [db pattern]\n  ;; TODO optimize with bound attrs min/max values here\n  (let [search-pattern (mapv #(if (symbol? %) nil %) pattern)\n        datoms         (db/-search db search-pattern)\n        attr->prop     (->> (map vector pattern [\"e\" \"a\" \"v\" \"tx\"])\n                            (filter (fn [[s _]] (free-var? s)))\n                            (into {}))]\n    (Relation. attr->prop datoms)))\n\n(defn matches-pattern? [pattern tuple]\n  (loop [tuple   tuple\n         pattern pattern]\n    (if (and tuple pattern)\n      (let [t (first tuple)\n            p (first pattern)]\n        (if (or (symbol? p) (= t p))\n          (recur (next tuple) (next pattern))\n          false))\n      true)))\n\n(defn lookup-pattern-coll [coll pattern]\n  (let [data       (filter #(matches-pattern? pattern %) coll)\n        attr->idx  (->> (map vector pattern (range))\n                        (filter (fn [[s _]] (free-var? s)))\n                        (into {}))]\n    (Relation. attr->idx (mapv to-array data)))) ;; FIXME to-array\n\n(defn normalize-pattern-clause [clause]\n  (if (source? (first clause))\n    clause\n    (concat ['$] clause)))\n\n(defn lookup-pattern [source pattern]\n  (cond\n    (satisfies? db/ISearch source)\n      (lookup-pattern-db source pattern)\n    :else\n      (lookup-pattern-coll source pattern)))\n\n(defn collapse-rels [rels new-rel]\n  (loop [rels    rels\n         new-rel new-rel\n         acc     []]\n    (if-some [rel (first rels)]\n      (if (not-empty (intersect-keys (:attrs new-rel) (:attrs rel)))\n        (recur (next rels) (hash-join rel new-rel) acc)\n        (recur (next rels) new-rel (conj acc rel)))\n      (conj acc new-rel))))\n\n(defn- rel-with-attr [context sym]\n  (some #(when (contains? (:attrs %) sym) %) (:rels context)))\n\n(defn- context-resolve-val [context sym]\n  (when-some [rel (rel-with-attr context sym)]\n    (when-some [tuple (first (:tuples rel))]\n      (#?(:cljs da/aget :clj get) tuple ((:attrs rel) sym)))))\n\n(defn- rel-contains-attrs? [rel attrs]\n  (some #(contains? (:attrs rel) %) attrs))\n\n(defn- rel-prod-by-attrs [context attrs]\n  (let [rels       (filter #(rel-contains-attrs? % attrs) (:rels context))\n        production (reduce prod-rel rels)]\n    [(update context :rels #(remove (set rels) %)) production]))\n\n(defn -call-fn [context rel f args]\n  (let [sources     (:sources context)\n        attrs       (:attrs rel)\n        len         (count args)\n        static-args (da/make-array len)\n        tuples-args (da/make-array len)]\n    (dotimes [i len]\n      (let [arg (nth args i)]\n        (if (symbol? arg) \n          (if-some [source (get sources arg)]\n            (da/aset static-args i source)\n            (da/aset tuples-args i (get attrs arg)))\n          (da/aset static-args i arg))))\n    ;; CLJS `apply` + `vector` will hold onto mutable array of arguments directly\n    ;; https://github.com/tonsky/datascript/issues/262\n    (if #?(:clj  false\n           :cljs (identical? f vector))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (let [args (da/aclone static-args)]\n          (dotimes [i len]\n            (when-some [tuple-idx (aget tuples-args i)]\n              (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n                (da/aset args i v))))\n          (apply f args)))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (dotimes [i len]\n          (when-some [tuple-idx (aget tuples-args i)]\n            (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n              (da/aset static-args i v))))\n        (apply f static-args)))))\n\n(defn- resolve-sym [sym]\n  #?(:cljs nil\n     :clj (when (namespace sym)\n            (when-some [v (resolve sym)] @v))))\n\n(defn filter-by-pred [context clause]\n  (let [[[f & args]] clause\n        pred         (or (get built-ins f)\n                         (context-resolve-val context f)\n                         (resolve-sym f)\n                         (when (nil? (rel-with-attr context f))\n                           (raise \"Unknown predicate '\" f \" in \" clause\n                                  {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel      (if pred\n                       (let [tuple-pred (-call-fn context production pred args)]\n                         (update production :tuples #(filter tuple-pred %)))\n                       (assoc production :tuples []))]\n    (update context :rels conj new-rel)))\n\n(defn bind-by-fn [context clause]\n  (let [[[f & args] out] clause\n        binding  (dp/parse-binding out)\n        fun      (or (get built-ins f)\n                     (context-resolve-val context f)\n                     (resolve-sym f)\n                     (when (nil? (rel-with-attr context f))\n                       (raise \"Unknown function '\" f \" in \" clause\n                              {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel  (if fun\n                   (let [tuple-fn (-call-fn context production fun args)\n                        rels     (for [tuple (:tuples production)\n                                       :let  [val (tuple-fn tuple)]\n                                       :when (not (nil? val))]\n                                   (prod-rel (Relation. (:attrs production) [tuple])\n                                             (in->rel binding val)))]\n                     (if (empty? rels)\n                       (prod-rel production (empty-rel binding))\n                       (reduce sum-rel rels)))\n                   (prod-rel (assoc production :tuples []) (empty-rel binding)))]\n    (update context :rels collapse-rels new-rel)))\n\n;;; RULES\n\n(defn rule? [context clause]\n  (cond+\n    (not (sequential? clause))\n    false\n\n    :let [head (if (source? (first clause))\n                  (second clause)\n                  (first clause))]\n\n    (not (symbol? head))\n    false\n\n    (free-var? head)\n    false\n\n    (contains? #{'_ 'or 'or-join 'and 'not 'not-join} head)\n    false\n\n    (not (contains? (:rules context) head))\n    (raise \"Unknown rule '\" head \" in \" clause\n      {:error :query/where\n       :form  clause})\n\n    :else true))\n\n(def rule-seqid (atom 0))\n\n(defn expand-rule [clause context used-args]\n  (let [[rule & call-args] clause\n        seqid              (swap! rule-seqid inc)\n        branches           (get (:rules context) rule)]\n    (for [branch branches\n          :let [[[_ & rule-args] & clauses] branch\n                replacements (zipmap rule-args call-args)]]\n      (walk/postwalk\n       #(if (free-var? %)\n          (db/some-of\n            (replacements %)\n            (symbol (str (name %) \"__auto__\" seqid)))\n          %)\n        clauses))))\n\n(defn remove-pairs [xs ys]\n  (let [pairs (->> (map vector xs ys)\n                   (remove (fn [[x y]] (= x y))))]\n    [(map first pairs)\n     (map second pairs)]))\n\n(defn rule-gen-guards [rule-clause used-args]\n  (let [[rule & call-args] rule-clause\n        prev-call-args     (get used-args rule)]\n    (for [prev-args prev-call-args\n          :let [[call-args prev-args] (remove-pairs call-args prev-args)]]\n      [(concat ['-differ?] call-args prev-args)])))\n\n(defn walk-collect [form pred]\n  (let [res (atom [])]\n    (walk/postwalk #(do (when (pred %) (swap! res conj %)) %) form)\n    @res))\n\n(defn collect-vars [clause]\n  (set (walk-collect clause free-var?)))\n\n(defn split-guards [clauses guards]\n  (let [bound-vars (collect-vars clauses)\n        pred       (fn [[[_ & vars]]] (every? bound-vars vars))]\n    [(filter pred guards)\n     (remove pred guards)]))\n\n(defn solve-rule [context clause]\n  (let [final-attrs     (filter free-var? clause)\n        final-attrs-map (zipmap final-attrs (range))\n;;         clause-cache    (atom {}) ;; TODO\n        solve           (fn [prefix-context clauses]\n                          (reduce -resolve-clause prefix-context clauses))\n        empty-rels?     (fn [context]\n                          (some #(empty? (:tuples %)) (:rels context)))]\n    (loop [stack (list {:prefix-clauses []\n                        :prefix-context context\n                        :clauses        [clause]\n                        :used-args      {}\n                        :pending-guards {}})\n           rel   (Relation. final-attrs-map [])]\n      (if-some [frame (first stack)]\n        (let [[clauses [rule-clause & next-clauses]] (split-with #(not (rule? context %)) (:clauses frame))]\n          (if (nil? rule-clause)\n\n            ;; no rules -> expand, collect, sum\n            (let [context (solve (:prefix-context frame) clauses)\n                  tuples  (-collect context final-attrs)\n                  new-rel (Relation. final-attrs-map tuples)]\n              (recur (next stack) (sum-rel rel new-rel)))\n\n            ;; has rule -> add guards -> check if dead -> expand rule -> push to stack, recur\n            (let [[rule & call-args]     rule-clause\n                  guards                 (rule-gen-guards rule-clause (:used-args frame))\n                  [active-gs pending-gs] (split-guards (concat (:prefix-clauses frame) clauses)\n                                                       (concat guards (:pending-guards frame)))]\n              (if (some #(= % '[(-differ?)]) active-gs) ;; trivial always false case like [(not= [?a ?b] [?a ?b])]\n\n                ;; this branch has no data, just drop it from stack\n                (recur (next stack) rel)\n\n                (let [prefix-clauses (concat clauses active-gs)\n                      prefix-context (solve (:prefix-context frame) prefix-clauses)]\n                  (if (empty-rels? prefix-context)\n\n                    ;; this branch has no data, just drop it from stack\n                    (recur (next stack) rel)\n\n                    ;; need to expand rule to branches\n                    (let [used-args  (assoc (:used-args frame) rule\n                                       (conj (get (:used-args frame) rule []) call-args))\n                          branches   (expand-rule rule-clause context used-args)]\n                      (recur (concat\n                               (for [branch branches]\n                                 {:prefix-clauses prefix-clauses\n                                  :prefix-context prefix-context\n                                  :clauses        (concatv branch next-clauses)\n                                  :used-args      used-args\n                                  :pending-guards pending-gs})\n                               (next stack))\n                             rel))))))))\n        rel))))\n\n(defn resolve-pattern-lookup-refs [source pattern]\n  (if (satisfies? db/IDB source)\n    (let [[e a v tx] pattern]\n      (->\n        [(if (or (lookup-ref? e) (attr? e)) (db/entid-strict source e) e)\n         a\n         (if (and v (attr? a) (db/ref? source a) (or (lookup-ref? v) (attr? v))) (db/entid-strict source v) v)\n         (if (lookup-ref? tx) (db/entid-strict source tx) tx)]\n        (subvec 0 (count pattern))))\n    pattern))\n\n(defn dynamic-lookup-attrs [source pattern]\n  (let [[e a v tx] pattern]\n    (cond-> #{}\n      (free-var? e) (conj e)\n      (free-var? tx) (conj tx)\n      (and\n        (free-var? v)\n        (not (free-var? a))\n        (db/ref? source a)) (conj v))))\n\n(defn limit-rel [rel vars]\n  (when-some [attrs' (not-empty (select-keys (:attrs rel) vars))]\n    (assoc rel :attrs attrs')))\n\n(defn limit-context [context vars]\n  (assoc context\n    :rels (->> (:rels context)\n               (keep #(limit-rel % vars)))))\n\n(defn bound-vars [context]\n  (into #{} (mapcat #(keys (:attrs %)) (:rels context))))\n\n(defn check-bound [bound vars form]\n  (when-not (set/subset? vars bound)\n    (let [missing (set/difference (set vars) bound)]\n      (raise \"Insufficient bindings: \" missing \" not bound in \" form\n             {:error :query/where\n              :form  form\n              :vars  missing}))))\n\n(defn check-free-same [bound branches form]\n  (let [free (mapv #(set/difference (collect-vars %) bound) branches)]\n    (when-not (apply = free)\n      (raise \"All clauses in 'or' must use same set of free vars, had \" free \" in \" form\n             {:error :query/where\n              :form  form\n              :vars  free}))))\n\n(defn check-free-subset [bound vars branches]\n  (let [free (set (remove bound vars))]\n    (doseq [branch branches]\n      (when-some [missing (not-empty (set/difference free (collect-vars branch)))]\n        (prn branch bound vars free)\n        (raise \"All clauses in 'or' must use same set of free vars, had \" missing \" not bound in \" branch\n          {:error :query/where\n           :form  branch\n           :vars  missing})))))\n\n(defn -resolve-clause\n  ([context clause]\n    (-resolve-clause context clause clause))\n  ([context clause orig-clause]\n   (condp looks-like? clause\n     [[symbol? '*]] ;; predicate [(pred ?a ?b ?c)]\n     (do\n       (check-bound (bound-vars context) (filter free-var? (nfirst clause)) clause)\n       (filter-by-pred context clause))\n     \n     [[symbol? '*] '_] ;; function [(fn ?a ?b) ?res]\n     (do\n       (check-bound (bound-vars context) (filter free-var? (nfirst clause)) clause)\n       (bind-by-fn context clause))\n     \n     [source? '*] ;; source + anything\n     (let [[source-sym & rest] clause]\n       (binding [*implicit-source* (get (:sources context) source-sym)]\n         (-resolve-clause context rest clause)))\n     \n     '[or *] ;; (or ...)\n     (let [[_ & branches] clause\n           _        (check-free-same (bound-vars context) branches clause)\n           contexts (map #(resolve-clause context %) branches)\n           rels     (map #(reduce hash-join (:rels %)) contexts)]\n       (assoc (first contexts) :rels [(reduce sum-rel rels)]))\n     \n     '[or-join [[*] *] *] ;; (or-join [[req-vars] vars] ...)\n     (let [[_ [req-vars & vars] & branches] clause\n           bound (bound-vars context)]\n       (check-bound bound req-vars orig-clause)\n       (check-free-subset bound vars branches)\n       (recur context (list* 'or-join (concat req-vars vars) branches) clause))\n     \n     '[or-join [*] *] ;; (or-join [vars] ...)\n     (let [[_ vars & branches] clause\n           vars         (set vars)\n           _            (check-free-subset (bound-vars context) vars branches)\n           join-context (limit-context context vars)\n           contexts     (map #(-> join-context (resolve-clause %) (limit-context vars)) branches)\n           rels         (map #(reduce hash-join (:rels %)) contexts)\n           sum-rel      (reduce sum-rel rels)]\n       (update context :rels collapse-rels sum-rel))\n     \n     '[and *] ;; (and ...)\n     (let [[_ & clauses] clause]\n       (reduce resolve-clause context clauses))\n     \n     '[not *] ;; (not ...)\n     (let [[_ & clauses] clause\n           bound            (bound-vars context)\n           negation-vars    (collect-vars clauses)\n           _                (when (empty? (set/intersection bound negation-vars))\n                              (raise \"Insufficient bindings: none of \" negation-vars \" is bound in \" orig-clause\n                                {:error :query/where\n                                 :form  orig-clause}))\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           negation-context (reduce resolve-clause context' clauses)\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[not-join [*] *] ;; (not-join [vars] ...)\n     (let [[_ vars & clauses] clause\n           bound            (bound-vars context)\n           _                (check-bound bound vars orig-clause)\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           join-context     (limit-context context' vars)\n           negation-context (-> (reduce resolve-clause join-context clauses)\n                                (limit-context vars))\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[*] ;; pattern\n     (let [source   *implicit-source*\n           pattern  (resolve-pattern-lookup-refs source clause)\n           relation (lookup-pattern source pattern)]\n       (binding [*lookup-attrs* (if (satisfies? db/IDB source)\n                                  (dynamic-lookup-attrs source pattern)\n                                  *lookup-attrs*)]\n         (update context :rels collapse-rels relation))))))\n\n(defn resolve-clause [context clause]\n  (if (rule? context clause)\n    (if (source? (first clause))\n      (binding [*implicit-source* (get (:sources context) (first clause))]\n        (resolve-clause context (next clause)))\n      (update context :rels collapse-rels (solve-rule context clause)))\n    (-resolve-clause context clause)))\n\n(defn -q [context clauses]\n  (binding [*implicit-source* (get (:sources context) '$)]\n    (reduce resolve-clause context clauses)))\n\n(defn -collect\n  ([context symbols]\n    (let [rels (:rels context)]\n      (-collect [(da/make-array (count symbols))] rels symbols)))\n  ([acc rels symbols]\n   (cond+\n     :let [rel (first rels)]\n \n     (nil? rel) acc\n \n     ;; one empty rel means final set has to be empty\n     (empty? (:tuples rel)) []\n \n     :let [keep-attrs (select-keys (:attrs rel) symbols)]\n \n     (empty? keep-attrs) (recur acc (next rels) symbols)\n \n     :let [copy-map (to-array (map #(get keep-attrs %) symbols))\n           len      (count symbols)]\n\n     :else\n     (recur\n       (for [#?(:cljs t1\n                :clj ^{:tag \"[[Ljava.lang.Object;\"} t1) acc\n             t2 (:tuples rel)]\n         (let [res (aclone t1)]\n           (dotimes [i len]\n             (when-some [idx (aget copy-map i)]\n               (aset res i (#?(:cljs da/aget :clj get) t2 idx))))\n           res))\n       (next rels)\n       symbols))))\n\n(defn collect [context symbols]\n  (->> (-collect context symbols)\n       (map vec)\n       set))\n\n(defprotocol IContextResolve\n  (-context-resolve [var context]))\n\n(extend-protocol IContextResolve\n  Variable\n  (-context-resolve [var context]\n    (context-resolve-val context (.-symbol var)))\n  SrcVar\n  (-context-resolve [var context]\n    (get-in context [:sources (.-symbol var)]))\n  PlainSymbol\n  (-context-resolve [var _]\n    (or (get built-in-aggregates (.-symbol var))\n        (resolve-sym (.-symbol var))))\n  Constant\n  (-context-resolve [var _]\n    (.-value var)))\n\n(defn -aggregate [find-elements context tuples]\n  (mapv (fn [element fixed-value i]\n          (if (dp/aggregate? element)\n            (let [f    (-context-resolve (:fn element) context)\n                  args (map #(-context-resolve % context) (butlast (:args element)))\n                  vals (map #(nth % i) tuples)]\n              (apply f (concat args [vals])))\n            fixed-value))\n    find-elements\n    (first tuples)\n    (range)))\n\n(defn- idxs-of [pred coll]\n  (->> (map #(when (pred %1) %2) coll (range))\n       (remove nil?)))\n\n(defn aggregate [find-elements context resultset]\n  (let [group-idxs (idxs-of (complement dp/aggregate?) find-elements)\n        group-fn   (fn [tuple]\n                     (map #(nth tuple %) group-idxs))\n        grouped    (group-by group-fn resultset)]\n    (for [[_ tuples] grouped]\n      (-aggregate find-elements context tuples))))\n\n(defn map* [f xs]\n  (reduce #(conj %1 (f %2)) (empty xs) xs))\n\n(defn tuples->return-map [return-map tuples]\n  (let [symbols (:symbols return-map)\n        idxs    (range 0 (count symbols))]\n    (map*\n      (fn [tuple]\n        (reduce\n          (fn [m i] (assoc m (nth symbols i) (nth tuple i)))\n          {} idxs))\n      tuples)))\n\n(defprotocol IPostProcess\n  (-post-process [find return-map tuples]))\n\n(extend-protocol IPostProcess\n  FindRel\n  (-post-process [_ return-map tuples]\n    (if (nil? return-map)\n      tuples\n      (tuples->return-map return-map tuples)))\n\n  FindColl\n  (-post-process [_ return-map tuples]\n    (into [] (map first) tuples))\n\n  FindScalar\n  (-post-process [_ return-map tuples]\n    (ffirst tuples))\n\n  FindTuple\n  (-post-process [_ return-map tuples]\n    (if (some? return-map)\n      (first (tuples->return-map return-map [(first tuples)]))\n      (first tuples))))\n\n(defn- pull [find-elements context resultset]\n  (let [resolved (for [find find-elements]\n                   (when (dp/pull? find)\n                     [(-context-resolve (:source find) context)\n                      (dpp/parse-pull\n                        (-context-resolve (:pattern find) context))]))]\n    (for [tuple resultset]\n      (mapv (fn [env el]\n              (if env\n                (let [[src spec] env]\n                  (dpa/pull-spec src spec [el] false))\n                el))\n            resolved\n            tuple))))\n\n(def ^:private query-cache (volatile! (datascript.lru/lru lru-cache-size)))\n\n(defn memoized-parse-query [q]\n  (if-some [cached (get @query-cache q nil)]\n    cached\n    (let [qp (dp/parse-query q)]\n      (vswap! query-cache assoc q qp)\n      qp)))\n\n(defn q [q & inputs]\n  (let [parsed-q      (memoized-parse-query q)\n        find          (:qfind parsed-q)\n        find-elements (dp/find-elements find)\n        find-vars     (dp/find-vars find)\n        result-arity  (count find-elements)\n        with          (:qwith parsed-q)\n        ;; TODO utilize parser\n        all-vars      (concat find-vars (map :symbol with))\n        q             (cond-> q\n                        (sequential? q) dp/query->map)\n        wheres        (:where q)\n        context       (-> (Context. [] {} {})\n                        (resolve-ins (:qin parsed-q) inputs))\n        resultset     (-> context\n                        (-q wheres)\n                        (collect all-vars))]\n    (cond->> resultset\n      (:with q)\n        (mapv #(vec (subvec % 0 result-arity)))\n      (some dp/aggregate? find-elements)\n        (aggregate find-elements context)\n      (some dp/pull? find-elements)\n        (pull find-elements context)\n      true\n        (-post-process find (:qreturn-map parsed-q)))))\n"]}