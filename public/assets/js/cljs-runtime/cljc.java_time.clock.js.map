{"version":3,"sources":["cljc/java_time/clock.cljs"],"mappings":";AACA,4BAAA,5BAAmBA,gEAAwGC,oBAAwCC;AAAnK,AAA2L,gFAAA,zEAACC,yDAAUC,yEAAuBH,oBAAoBC;;AACjP,8BAAA,9BAAmBG,oEAA0GC,oBAAwCC;AAArK,AAA6L,gFAAA,zEAACJ,yDAAUC,2EAAyBE,oBAAoBC;;AACrP,kCAAA,lCAAmBC;AAAnB,AAA4E,2CAAA,pCAACC,oBAAUL;;AACvF,2CAAA,3CAAmBM;AAAnB,AAAqF,2CAAA,pCAACD,oBAAUL;;AAChG,6BAAA,7BAAmBO,kEAA2GC,sBAAwCC;AAAtK,AAA4L,gFAAA,zEAACV,yDAAUC,0EAAwBQ,sBAAsBC;;AACrP,oCAAA,pCAAmBC,gFAA6FC;AAAhH,AAAsI,gFAAA,zEAACZ,yDAAUC,gFAA8BW;;AAC/K,oCAAA,pCAAmBC,gFAA6FC;AAAhH,AAAsI,gFAAA,zEAACd,yDAAUC,gFAA8Ba;;AAC/K,8BAAA,9BAAmBC,oEAA0EC;AAA7F,AAAuG,OAASA;;AAChH,iCAAA,jCAAmBC,0EAA2GC,SAA2BC;AAAzJ,AAA+K,OAAWD,kBAASC;;AACnM,gCAAA,hCAAmBC,wEAAwFC;AAA3G,AAAqH,OAAOA;;AAC5H,iCAAA,jCAAmBC,0EAA4EC;AAA/F,AAAyG,OAAWA;;AACpH,8BAAA,9BAAmBC,oEAAuFC;AAA1G,AAAgI,gFAAA,zEAACzB,yDAAUC,2EAAyBwB;;AACpK,+BAAA,/BAAmBC,sEAAwFC;AAA3G,AAAqH,OAAUA;;AAC/H,8BAAA,9BAAmBC,oEAAgGC,SAA2BC;AAA9I,AAAoK,OAASD,gBAASC","names":["cljc.java-time.clock/tick","java-time-Clock5490","java-time-Duration5491","cljs.core.js_invoke","java.time/Clock","cljc.java-time.clock/offset","java-time-Clock5492","java-time-Duration5493","cljc.java-time.clock/system-utc","cljs.core/js-invoke","cljc.java-time.clock/system-default-zone","cljc.java-time.clock/fixed","java-time-Instant5494","java-time-ZoneId5495","cljc.java-time.clock/tick-minutes","java-time-ZoneId5496","cljc.java-time.clock/tick-seconds","java-time-ZoneId5497","cljc.java-time.clock/millis","this5498","cljc.java-time.clock/with-zone","this5499","java-time-ZoneId5500","cljc.java-time.clock/get-zone","this5501","cljc.java-time.clock/hash-code","this5502","cljc.java-time.clock/system","java-time-ZoneId5503","cljc.java-time.clock/instant","this5504","cljc.java-time.clock/equals","this5505","java-lang-Object5506"],"sourcesContent":["(ns cljc.java-time.clock (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [Clock]]))\n(clojure.core/defn tick {:arglists (quote ([\"java.time.Clock\" \"java.time.Duration\"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock java-time-Clock5490 ^js/JSJoda.Duration java-time-Duration5491] (js-invoke java.time.Clock \"tick\" java-time-Clock5490 java-time-Duration5491)))\n(clojure.core/defn offset {:arglists (quote ([\"java.time.Clock\" \"java.time.Duration\"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock java-time-Clock5492 ^js/JSJoda.Duration java-time-Duration5493] (js-invoke java.time.Clock \"offset\" java-time-Clock5492 java-time-Duration5493)))\n(clojure.core/defn system-utc {:arglists (quote ([]))} (^js/JSJoda.Clock [] (js-invoke java.time.Clock \"systemUTC\")))\n(clojure.core/defn system-default-zone {:arglists (quote ([]))} (^js/JSJoda.Clock [] (js-invoke java.time.Clock \"systemDefaultZone\")))\n(clojure.core/defn fixed {:arglists (quote ([\"java.time.Instant\" \"java.time.ZoneId\"]))} (^js/JSJoda.Clock [^js/JSJoda.Instant java-time-Instant5494 ^js/JSJoda.ZoneId java-time-ZoneId5495] (js-invoke java.time.Clock \"fixed\" java-time-Instant5494 java-time-ZoneId5495)))\n(clojure.core/defn tick-minutes {:arglists (quote ([\"java.time.ZoneId\"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId5496] (js-invoke java.time.Clock \"tickMinutes\" java-time-ZoneId5496)))\n(clojure.core/defn tick-seconds {:arglists (quote ([\"java.time.ZoneId\"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId5497] (js-invoke java.time.Clock \"tickSeconds\" java-time-ZoneId5497)))\n(clojure.core/defn millis {:arglists (quote ([\"java.time.Clock\"]))} (^long [^js/JSJoda.Clock this5498] (.millis this5498)))\n(clojure.core/defn with-zone {:arglists (quote ([\"java.time.Clock\" \"java.time.ZoneId\"]))} (^js/JSJoda.Clock [^js/JSJoda.Clock this5499 ^js/JSJoda.ZoneId java-time-ZoneId5500] (.withZone this5499 java-time-ZoneId5500)))\n(clojure.core/defn get-zone {:arglists (quote ([\"java.time.Clock\"]))} (^js/JSJoda.ZoneId [^js/JSJoda.Clock this5501] (.zone this5501)))\n(clojure.core/defn hash-code {:arglists (quote ([\"java.time.Clock\"]))} (^int [^js/JSJoda.Clock this5502] (.hashCode this5502)))\n(clojure.core/defn system {:arglists (quote ([\"java.time.ZoneId\"]))} (^js/JSJoda.Clock [^js/JSJoda.ZoneId java-time-ZoneId5503] (js-invoke java.time.Clock \"system\" java-time-ZoneId5503)))\n(clojure.core/defn instant {:arglists (quote ([\"java.time.Clock\"]))} (^js/JSJoda.Instant [^js/JSJoda.Clock this5504] (.instant this5504)))\n(clojure.core/defn equals {:arglists (quote ([\"java.time.Clock\" \"java.lang.Object\"]))} (^boolean [^js/JSJoda.Clock this5505 ^java.lang.Object java-lang-Object5506] (.equals this5505 java-lang-Object5506)))\n"]}