{"version":3,"sources":["brundij/views/questions/events.cljs"],"mappings":";AAQA,iDAAA,jDAAMA,0GAAiBC,KAAKC;AAA5B,AACE,sDAAA,WAAAC,1DAACC;AAAD,AAAS,UAAK,AAACC,6CAAEH,KAAK,AAAA,gFAAAC;GAAUF;;AAElC,yDAAA,zDAACK,wLAEC,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;eAAT,AAAAF,4CAAAD,WAAA,IAAA,tEAAWI;AAAX,AACE,IAAMC,oBAAkB,AAAA,6FAAYH;AAApC,AACE,wDAAA,jDAACI,8CAAMJ,kEAAc,AAACK,6CAAKF,kBAAkBD;;AAEnD,yDAAA,zDAACN,+MAEC,cAAAU,HAAKN;AAAL,AAAA,IAAAO,aAAAD;QAAA,AAAAP,4CAAAQ,WAAA,IAAA,/DAASN;WAAT,AAAAF,4CAAAQ,WAAA,IAAA,lEAAWf;AAAX,AACE,IAAMW,oBAAkB,AAAA,6FAAYH;AAApC,AACE,wDAAA,jDAACI,8CAAMJ,kEAAc,AAACV,+CAAgBa,kBAAkBX;;AAE9D,yDAAA,zDAACI,2MAEC,cAAAY,HAAKR;AAAL,AAAA,IAAAS,aAAAD;QAAA,AAAAT,4CAAAU,WAAA,IAAA,/DAASR;gBAAT,AAAAF,4CAAAU,WAAA,IAAA,vEAAWC;AAAX,AACE,wDAAA,jDAACN,8CAAMJ,6EAAmBU;;AAE9B,qDAAA,rDAAMC,kHAAqBC,UAAUC;AAArC,AACE,IAAMC,eAAa,AAACC,cAAI,iBAAAC,qBAAA,2EAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA85EyB,AAAA6C,sBAAAlD;IA95EzBM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,SAAA,AAAAK,eAAAN,gBAAAK,pCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SAAoC,qDAAA,rDAACc;;AAArC,eAAA,CAAAZ,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,iEAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,SAAA,AAAAS,gBAAAjB,rBAAMoB;AAAN,AAAA,OAAAF,0EAAA,AAAAH,iEAAA,AAAAI,eAAAnB,3IAAoC,qDAAA,rDAACsB;;;AAArC;;;;GAAA,KAAA;;AAAA,AAAA,OAAAvB,mBAAS,AAACsB,8CAAM,AAACd,gBAAMX;;AAA/C,yBAEO,AAAC2B,oDACC,WAAKC,KAAKC,7FAMZ,OAACE;AANC,AAAA,0FAAA,2CAAA,mGAAA,uKAAA,6HAAA,2CAAA,qDAAA,mFAAA,mFAAA,xkBACmB,AAACD,wGACE,AAAA,uFAAUF,2DACrB,AAAC1C,4CAAIe,aAAa4B,mQACJ9B,0FACJ,AAACb,4CAAIe,aAAa4B;GAPzC7B;;AAUT,yDAAA,zDAACgC,oMAEC,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAahD;IAAbmD,aAAAJ;QAAA,AAAAhD,4CAAAoD,WAAA,IAAA,/DAAmBlD;iBAAnB,AAAAF,4CAAAoD,WAAA,IAAA,xEAAqBC;AAArB,AAAA,kDAAA,0FAAA,2CAAA,qDAAA,KAAA,gFAAA,4GAAA,yFAAA,mFAAA,vSAEoCC,2FACM,AAACC;;AAG7C,yDAAA,zDAACT,iMAEC,WAAAU,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAR,4BAAAQ;SAAA,AAAAP,4CAAAO,eAAA,hEAAazD;IAAb0D,aAAAF;QAAA,AAAAzD,4CAAA2D,WAAA,IAAA,/DAAmBzD;gBAAnB,AAAAF,4CAAA2D,WAAA,IAAA,vEAAqB9C;gBAArB,AAAAb,4CAAA2D,WAAA,IAAA,vEAA+B7C;AAA/B,AACE,GAAI,AAAO,AAAA,gGAAab;AAAxB,kDAAA,kKAAA,iEAAA,2CAAA,uDAAA,oDAAA,iLAAA,0FAAA,2DAAA,OAAA,wDAAA,2CAAA,iFAAA,iOAAA,iEAAA,mFAAA,kKAAA,gEAAA,mFAAA,p/CACO,iDAAA,2DAAA,5GAACI,8CAAMJ,8UAEO,CAAA,wGAAiEY,+EAC9D,AAAC+C,oQAEW9C,6FACH,+BAAA,2CAAA,8DAAA,xIAAC+C;;AAPlC;;;AAYJ,yDAAA,zDAACf,mNAEC,WAAAgB,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAd,4BAAAc;SAAA,AAAAb,4CAAAa,eAAA,hEAAa/D;IAAbgE,aAAAF;QAAA,AAAA/D,4CAAAiE,WAAA,IAAA,/DAAmB/D;YAAnB,AAAAF,4CAAAiE,WAAA,IAAA,nEAAqB/D;AAArB,AAAA,kDAAA,mKAAA,yFAAA,mFAAA,/RACO,iDAAA,2DAAA,5GAACG,8CAAMJ;;AAGhB,yDAAA,zDAAC6C,kNAEC,WAAKoB;AAAL,AACE,gHAAA,2CAAA,qDAAA,UAAA,nNAACC,iRAAmCD","names":["brundij.views.questions.events/remove-from-vec","vect","uuid","p1__77486#","cljs.core.filter","cljs.core._EQ_","re_frame.core.reg_event_db","p__77487","vec__77488","cljs.core.nth","db","_","question","current-questions","cljs.core.assoc","cljs.core.conj","p__77491","vec__77492","p__77495","vec__77496","new-input","brundij.views.questions.events/mount-questions-txs","health-id","questions","question-ids","cljs.core/vec","iter__4611__auto__","s__77500","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__77502","cljs.core/chunk-buffer","i__77501","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__77499","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","_i","cljs.core.range","datascript.core.tempid","cljs.core.map_indexed","item","index","brundij.uuids/generate-uuid","cljs.core/flatten","re_frame.core.reg_event_fx","p__77503","p__77504","map__77505","cljs.core/--destructure-map","cljs.core.get","vec__77506","_questions","cljs.core/uuid","brundij.date/get-inst","p__77509","p__77510","map__77511","vec__77512","ajax.core/json-request-format","ajax.core/json-response-format","p__77515","p__77516","map__77517","vec__77518","data","cljs.core.println","cljs.core/chunk-first"],"sourcesContent":["(ns brundij.views.questions.events\n  (:require [ajax.core :as ajax]\n            [brundij.date :as date]\n            [brundij.events :as events]\n            [brundij.uuids :as uuids]\n            [datascript.core :as d]\n            [re-frame.core :as re-frame]))\n\n(defn remove-from-vec [vect uuid]\n  (filter #(not (= uuid (:id %))) vect))\n\n(re-frame/reg-event-db\n  ::add-question\n  (fn [db [_ question]]\n    (let [current-questions (:questions db)]\n      (assoc db :questions (conj current-questions question)))))\n\n(re-frame/reg-event-db\n  ::remove-question-by-uuid\n  (fn [db [_ uuid]]\n    (let [current-questions (:questions db)]\n      (assoc db :questions (remove-from-vec current-questions uuid)))))\n\n(re-frame/reg-event-db\n  ::change-question-input\n  (fn [db [_ new-input]]\n    (assoc db :question-input new-input)))\n\n(defn mount-questions-txs [health-id questions]\n  (let [question-ids (vec (for [_i (range (count questions))] (d/tempid -1)))]\n    (->> questions\n         (map-indexed\n           (fn [item index]\n             [{:question/uuid (uuids/generate-uuid)\n               :question/content (:content item)\n               :db/id (nth question-ids index)}\n              {:db/id [:health/uuid health-id]\n               :health/question (nth question-ids index)}]))\n         (flatten))))\n\n(re-frame/reg-event-fx\n  ::add-question-to-ds\n  (fn [{:keys [db]} [_ _questions]]\n    {::events/transact! {:db/id -1\n                         :health/uuid uuid\n                         :health/created_at (date/get-inst)}\n     ::events/navigate! [:questions]}))\n\n(re-frame/reg-event-fx\n  ::create-questions\n  (fn [{:keys [db]} [_ health-id questions]]\n    (if (true? (:is-online? db))\n      {:db (assoc db :loading true)\n       :http-xhrio {:method :post\n                    :uri (str \"https://brundij-api-demo.herokuapp.com/v1/questions/bulk/\" health-id)\n                    :format (ajax/json-request-format)\n                    :timeout 8000\n                    :params {:questions questions}\n                    :response-format (ajax/json-response-format {:keywords? true})\n                    :on-success [::question-creation-success]\n                    :on-failure [::question-creation-failure]}}\n      {})))\n\n(re-frame/reg-event-fx\n  ::question-creation-success\n  (fn [{:keys [db]} [_ _]]\n    {:db (assoc db :loading false)\n     ::events/navigate! [:success]}))\n\n(re-frame/reg-event-fx\n  ::question-creation-failure\n  (fn [data]\n    (println {:kind \"Failure\" :response data})))\n"]}