{"version":3,"sources":["reitit/frontend/controllers.cljs"],"mappings":"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","names":["reitit.frontend.controllers/pad-same-length","a","b","cljs.core.concat","cljs.core.take","cljs.core/count","cljs.core.repeat","reitit.frontend.controllers/params-warning","cljs.core/Delay","js/console.warn","p__67012","map__67013","cljs.core/--destructure-map","cljs.core.get","reitit.frontend.controllers/get-identity","identity","parameters","params","match","js/Error","cljs.core/not","and__4210__auto__","cljs.core/deref","cljs.core.into","iter__4611__auto__","s__67018","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","b__67020","cljs.core/chunk-buffer","i__67019","vec__67025","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__67017","cljs.core/chunk-rest","vec__67028","cljs.core/first","cljs.core/cons","cljs.core/rest","param-type","ks","cljs.core/select-keys","reitit.frontend.controllers/apply-controller","controller","method","f","G__67034","reitit.frontend.controllers/apply-controllers","old-controllers","new-match","new-controllers","cljs.core.mapv","cljs.core.assoc","changed-controllers","cljs.core.map","old","new","cljs.core.not_EQ_","cljs.core.keep","cljs.core/identity","cljs.core/vec","seq__67040","chunk__67041","count__67042","i__67043","c__4638__auto__","cljs.core/chunk-first","cljs.core/next","cljs.core/reverse","seq__67049","chunk__67050","count__67051","i__67052"],"sourcesContent":["(ns reitit.frontend.controllers\n  \"Provides apply-controllers function\")\n\n(defn- pad-same-length [a b]\n  (concat a (take (- (count b) (count a)) (repeat nil))))\n\n(def ^:private params-warning\n  (delay (js/console.warn \"Reitit-frontend controller :params is deprecated. Replace with :identity or :parameters option.\")))\n\n(defn get-identity\n  \"Get controller identity given controller and match.\n\n  To select interesting properties from Match :parameters option can be set.\n  Value should be param-type => [param-key]\n  Resulting value is map of param-type => param-key => value.\n\n  For other uses, :identity option can be used to provide function from\n  Match to identity.\n\n  Default value is nil, i.e. controller identity doesn't depend on Match.\"\n  [{:keys [identity parameters params]} match]\n  (assert (not (and identity parameters))\n          \"Use either :identity or :parameters for controller, not both.\")\n  (when params\n    @params-warning)\n  (cond\n    parameters\n    (into {} (for [[param-type ks] parameters]\n               [param-type (select-keys (get (:parameters match) param-type) ks)]))\n\n    identity\n    (identity match)\n\n    ;; Support deprecated :params for transition period. Can be removed later.\n    params\n    (params match)\n\n    :else nil))\n\n(defn apply-controller\n  \"Run side-effects (:start or :stop) for controller.\n  The side-effect function is called with controller identity value.\"\n  [controller method]\n  (when-let [f (get controller method)]\n    (f (::identity controller))))\n\n(defn apply-controllers\n  \"Applies changes between current controllers and\n  those previously enabled. Reinitializes controllers whose\n  identity has changed.\"\n  [old-controllers new-match]\n  (let [new-controllers (mapv (fn [controller]\n                                (assoc controller ::identity (get-identity controller new-match)))\n                              (:controllers (:data new-match)))\n        changed-controllers (->> (map (fn [old new]\n                                        ;; different controllers, or params changed\n                                        (if (not= old new)\n                                          {:old old, :new new}))\n                                      (pad-same-length old-controllers new-controllers)\n                                      (pad-same-length new-controllers old-controllers))\n                                 (keep identity)\n                                 vec)]\n    (doseq [controller (reverse (map :old changed-controllers))]\n      (apply-controller controller :stop))\n    (doseq [controller (map :new changed-controllers)]\n      (apply-controller controller :start))\n    new-controllers))\n"]}