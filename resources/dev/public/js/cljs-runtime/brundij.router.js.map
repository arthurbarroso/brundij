{"version":3,"sources":["brundij/router.cljs"],"mappings":";;AAkBA,wBAAA,mFAAA,IAAA,mFAAA,GAAA,2CAAA,qDAAA,oDAAA,mGAAA,8DAAA,OAAA,kEAAA,2CAAA,wDAAA,8KAAA,mFAAA,YAAA,2CAAA,qDAAA,+DAAA,0GAAA,8DAAA,kCAAA,mFAAA,UAAA,2CAAA,qDAAA,2DAAA,kGAAA,8DAAA,0BAAA,mFAAA,UAAA,2CAAA,qDAAA,4DAAA,iGAAA,8DAAA,iCAAA,mFAAA,kBAAA,2CAAA,qDAAA,2EAAA,wGAAA,8DAAA,kCAAA,mFAAA,UAAA,2CAAA,qDAAA,0EAAA,+GAAA,8DAAA,nhGAAKA,8YAIMC,wUAEe,yBAAA,zBAACC,4EAAYC,qWAG5BC,kcAIAC,mbAIAC,gdAIAC,+cAIAC;AAGX,AAAKC,wBACH,2EAAA,2CAAA,qDAAA,2CAAA,tNAACC,qDAAUV,6NAAyBW;AAEtC,6BAAA,7BAAMC,kEAAaC;AAAnB,AACE,oBAAMA;AAAN,AACE,8BAAA,mFAAA,1GAACC,qMAA6BD;;AADhC;;;AAGF,mCAAA,nCAAME;AAAN,AACE,yFAAA,2CAAA,sEAAA,nMAACC,iCAAWP,sBAAOG;;AAErB,gCAAA,2CAAA,iEAAA,UAAA,0DAAA,OAAA,4EAAA,SAAA,mEAAA,SAAA,yDAAA,jbAAKK;AAML,kCAAA,lCAAMC;AAAN,AACE,oBAAA,AAAAC,hBAAMC,gCAAe,sDAAA,mFAAA,zIAACC;AAAtB,AAAA,0FACGC,+CACA,0kBAAA,8fAAA,tkCAAM,EAAK,mOAAA,nOAACC,6CAAE,AAAA,mFAAA,AAAA,mFAAIH,0EACP,GAAK,2RAAA,1RAAM,AAAA,gFAAA,AAAA,sFAAA,AAAA,gGAAIA,+BACxB,uBAAA,mFAAA,1GAACN,8NACU,AAAA,gFAAA,AAAA,sFAAA,AAAA,gGAAIM,gCACjB,iCAAA,AAAA,mFAAA,iDAAA,mFAAA,oHAAA,mFAAA,uIAAA,iSAAA,r1BAAMA,qRAECI,2MACE,AAACC,qDAAUR,kHACf,AAAA,mFAAA,AAAA,mFAAIG","names":["brundij.router/routes","brundij.views.checks.create/create-check-view","spec-tools.data-spec/opt","cljs.core/string?","brundij.views.questions.create/create-questions-view","brundij.views.questions.success/success-view","brundij.views.answers.create/create-answers","brundij.views.answers.success/answers-success-view","brundij.views.checks.download/download-check-results-view","brundij.router/router","reitit.frontend.router","reitit.coercion.spec/coercion","brundij.router/on-navigate","new-match","re-frame.core/dispatch","brundij.router/init-routes!","reitit.frontend.easy/start!","brundij.router/app-base-style","brundij.router/router-component","cljs.core/deref","current-route","re_frame.core.subscribe","brundij.components.error-boundary/err-boundary","cljs.core._EQ_","js/module$node_modules$react_toastify$dist$index.ToastContainer","stylefy.core.use_style"],"sourcesContent":["(ns brundij.router\n  (:require [brundij.components.error-boundary :refer [err-boundary]]\n            [brundij.events :as events]\n            [brundij.subs :as subs]\n            [brundij.views.answers.create :refer [create-answers]]\n            [brundij.views.answers.success :refer [answers-success-view]]\n            [brundij.views.checks.create :refer [create-check-view]]\n            [brundij.views.checks.download :refer [download-check-results-view]]\n            [brundij.views.questions.create :refer [create-questions-view]]\n            [brundij.views.questions.success :refer [success-view]]\n            [re-frame.core :refer [dispatch subscribe]]\n            [reitit.coercion.spec :as rss]\n            [reitit.frontend :as rf]\n            [reitit.frontend.easy :as rfe]\n            [spec-tools.data-spec :as ds]\n            [stylefy.core :refer [use-style]]\n            [\"react-toastify\" :refer (ToastContainer)]))\n\n(def routes\n  [\"/\"\n   [\"\"\n    {:name :home\n     :view create-check-view\n     :link-text \"Home\"\n     :parameters {:query {(ds/opt :id) string?}}}]\n   [\"questions\"\n    {:name :questions\n     :view create-questions-view\n     :link-text \"Create question\"}]\n   [\"success\"\n    {:name :success\n     :view success-view\n     :link-text \"Success\"}]\n   [\"answers\"\n    {:name :answers\n     :view create-answers\n     :link-text \"Create answers\"}]\n   [\"answers-success\"\n    {:name :answers-success\n     :view answers-success-view\n     :link-text \"Answers success\"}]\n   [\"results\"\n    {:name :export-results\n     :view download-check-results-view\n     :link-text \"Export results\"}]])\n\n(def router\n  (rf/router routes {:data {:coercion rss/coercion}}))\n\n(defn on-navigate [new-match]\n  (when new-match\n    (dispatch [::events/navigated new-match])))\n\n(defn init-routes! []\n  (rfe/start! router on-navigate {:use-fragment false}))\n\n(def app-base-style {:background \"#d6e3e6\"\n                     :display \"flex\"\n                     :justify-content \"center\"\n                     :align-items \"center\"\n                     :height \"100vh\"})\n\n(defn router-component []\n  (let [current-route @(subscribe [::subs/current-route])]\n    [err-boundary\n     (when (and (= (-> current-route :data :name) :home)\n                (not (nil? (-> current-route :parameters :query :id))))\n       (dispatch [::events/fetch-health-questions\n                  (-> current-route :parameters :query :id)]))\n     (when current-route\n       [:<>\n        [:> ToastContainer]\n        [:div (use-style app-base-style)\n         [(-> current-route :data :view)]]])]))\n"]}