{"version":3,"sources":["brundij/views/answers/events.cljs"],"mappings":";AAMA,yDAAA,zDAACA,0NAEC,cAAAC,HAAKM;AAAL,AAAA,IAAAL,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASM;IAATJ,aAAA,AAAAD,4CAAAD,WAAA,IAAA;IAAAE,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAAmBK;aAAnB,AAAAH,4CAAAF,eAAA,pEAAyBM;AAAzB,AACE,IAAMC,oBAAkB,AAAA,uHAAyBJ;IAC3CK,qBAAmB,AAACT,4CAAIQ,kBAAkBF;AADhD,AAEE,wDAAA,jDAACI,8CACCN,4FAEE,AAACM,8CACCF,kBACAF,MACE,iEAAA,jEAACI,8CAAMD,2EAA2BF;;AAEhD,yDAAA,zDAACV,yNAEC,cAAAc,HAAKP;AAAL,AAAA,IAAAQ,aAAAD;QAAA,AAAAX,4CAAAY,WAAA,IAAA,/DAASP;IAATQ,aAAA,AAAAb,4CAAAY,WAAA,IAAA;IAAAC,iBAAA,AAAAX,4BAAAW;YAAA,AAAAV,4CAAAU,eAAA,nEAAmBP;YAAnB,AAAAH,4CAAAU,eAAA,nEAAyBC;AAAzB,AACE,IAAMN,oBAAkB,AAAA,uHAAyBJ;IAC3CK,qBAAmB,AAACT,4CAAIQ,kBAAkBF;AADhD,AAEE,wDAAA,jDAACI,8CACCN,4FAEE,AAACM,8CACCF,kBACAF,MACE,iEAAA,jEAACI,8CAAMD,wEAA0BK;;AAE/C,yDAAA,zDAACjB,6NAEC,cAAAkB,HAAKX;AAAL,AAAA,IAAAY,aAAAD;QAAA,AAAAf,4CAAAgB,WAAA,IAAA,/DAASX;YAAT,AAAAL,4CAAAgB,WAAA,IAAA,nEAAWX;AAAX,AACE,IAAMY,yBAAuB,AAAA,uHAAyBb;AAAtD,AACE,wDAAA,jDAACM,8CAAMN,4FAA2B,0BAAA,zBAAKa;;AAE7C,yDAAA,zDAACpB,8NAEC,cAAAqB,HAAKd;AAAL,AAAA,IAAAe,aAAAD;QAAA,AAAAlB,4CAAAmB,WAAA,IAAA,/DAASd;YAAT,AAAAL,4CAAAmB,WAAA,IAAA,nEAAWd;AAAX,AACE,IAAMY,yBAAuB,AAAA,uHAAyBb;AAAtD,AACE,wDAAA,jDAACM,8CAAMN,4FAA2B,0BAAA,zBAAKa;;AAE7C,yDAAA,zDAACG,yLAEC,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAArB,4BAAAqB;SAAA,AAAApB,4CAAAoB,eAAA,hEAAanB;IAAboB,aAAAF;QAAA,AAAAtB,4CAAAwB,WAAA,IAAA,/DAAmBnB;cAAnB,AAAAL,4CAAAwB,WAAA,IAAA,rEAAqBC;AAArB,AAAA,kDAAA,kKAAA,iEAAA,2CAAA,uDAAA,oDAAA,mDAAA,yDAAA,0FAAA,2DAAA,OAAA,wDAAA,2CAAA,4EAAA,iOAAA,iEAAA,mFAAA,0JAAA,gEAAA,mFAAA,l6CACO,iDAAA,2DAAA,5GAACf,8CAAMN,icAGU,AAACsB,iQAESD,2FACD,+BAAA,2CAAA,8DAAA,xIAACE;;AAIpC,yDAAA,zDAACP,2MAEC,WAAAQ,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAA5B,4BAAA4B;SAAA,AAAA3B,4CAAA2B,eAAA,hEAAa1B;IAAb2B,aAAAF;QAAA,AAAA7B,4CAAA+B,WAAA,IAAA,/DAAmB1B;gBAAnB,AAAAL,4CAAA+B,WAAA,IAAA,vEAAqBC;AAArB,AAAA,kDAAA,mKAAA,yFAAA,mFAAA,/RACO,iDAAA,2DAAA,5GAACtB,8CAAMN;;AAGhB,yDAAA,zDAACgB,4MAEC,WAAKf;AAAL,AAAA,kDAAA,4GAAA,2CAAA,uEAAA","names":["re_frame.core.reg_event_db","p__72420","vec__72421","cljs.core.nth","map__72424","cljs.core/--destructure-map","cljs.core.get","db","_","index","rating","current-questions","question-to-update","cljs.core.assoc","p__72425","vec__72426","map__72429","trend","p__72430","vec__72431","current-question-index","p__72434","vec__72435","re_frame.core.reg_event_fx","p__72438","p__72439","map__72440","vec__72441","answers","ajax.core/json-request-format","ajax.core/json-response-format","p__72444","p__72445","map__72446","vec__72447","_response"],"sourcesContent":["(ns brundij.views.answers.events\n  (:require [ajax.core :as ajax]\n            [brundij.events :as events]\n            [day8.re-frame.http-fx]\n            [re-frame.core :as re-frame]))\n\n(re-frame/reg-event-db\n  ::update-question-rating-at-index\n  (fn [db [_ {:keys [index rating]}]]\n    (let [current-questions (:pre-existing-questions db)\n          question-to-update (nth current-questions index)]\n      (assoc\n        db\n        :pre-existing-questions\n          (assoc\n            current-questions\n            index\n              (assoc question-to-update :rating rating))))))\n\n(re-frame/reg-event-db\n  ::update-question-trend-at-index\n  (fn [db [_ {:keys [index trend]}]]\n    (let [current-questions (:pre-existing-questions db)\n          question-to-update (nth current-questions index)]\n      (assoc\n        db\n        :pre-existing-questions\n          (assoc\n            current-questions\n            index\n              (assoc question-to-update :trend trend))))))\n\n(re-frame/reg-event-db\n  ::increment-current-question-index\n  (fn [db [_ _]]\n    (let [current-question-index (:current-question-index db)]\n      (assoc db :current-question-index (inc current-question-index)))))\n\n(re-frame/reg-event-db\n  ::decrement-current-question-index\n  (fn [db [_ _]]\n    (let [current-question-index (:current-question-index db)]\n      (assoc db :current-question-index (dec current-question-index)))))\n\n(re-frame/reg-event-fx\n  ::create-answers\n  (fn [{:keys [db]} [_ answers]]\n    {:db (assoc db :loading true)\n     :http-xhrio {:method :post\n                  :uri \"https://brundij-api-demo.herokuapp.com/v1/answers/bulk\"\n                  :format (ajax/json-request-format)\n                  :timeout 8000\n                  :params {:answers answers}\n                  :response-format (ajax/json-response-format {:keywords? true})\n                  :on-success [::answer-creation-success]\n                  :on-failure [::answer-creation-failure]}}))\n\n(re-frame/reg-event-fx\n  ::answer-creation-success\n  (fn [{:keys [db]} [_ _response]]\n    {:db (assoc db :loading false)\n     ::events/navigate! [:answers-success]}))\n\n(re-frame/reg-event-fx\n  ::answer-creation-failure\n  (fn [_]\n    {::events/show-failure-toast {:toast-content \"Failure creating answers. Please try again later.\"}}))\n"]}