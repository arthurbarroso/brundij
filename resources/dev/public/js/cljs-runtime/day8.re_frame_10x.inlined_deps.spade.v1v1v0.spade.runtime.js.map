{"version":3,"sources":["day8/re_frame_10x/inlined_deps/spade/v1v1v0/spade/runtime.cljs"],"mappings":"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","names":["js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.spade","js/day8.re-frame-10x.inlined-deps.spade.v1v1v0","js/day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade","js/day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime","js/day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime.*injected*","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/*injected*","cljs.core.atom","js/day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime.*css-compile-flags*","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/*css-compile-flags*","js/goog.DEBUG","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/->css-var","n","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.types/->CSSFunction","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/compile-css","elements","day8.re_frame_10x.inlined_deps.garden.v1v3v10.garden.core.css","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/perform-update!","obj","css","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/update!","id","cljs.core.swap_BANG_","cljs.core/update","cljs.core._EQ_","cljs.core.assoc","js/day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime.*dom*","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/*dom*","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/inject!","cljs.core/deref","dom","element","G__48358","js/document.createElement","js/Error","cljs.core/assoc","p__48359","map__48360","cljs.core/--destructure-map","cljs.core.get","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/compose-names","style-name","composed","cljs.core/not","clojure.string.join","cljs.core/seq?","cljs.core.into","cljs.core.map","item","cljs.core/map?","day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime/ensure-style!","mode","base-style-name","factory","params","map__48362","info","cljs.core.apply","existing","G__48363","cljs.core/Keyword"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.spade.v1v1v0.spade.runtime\n  (:require [clojure.string :as str]\n            [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.core :as garden]\n            [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.types :refer [->CSSFunction]]))\n\n(defonce\n  ^{:private true\n    :dynamic true}\n  *injected* (atom {}))\n\n(defonce ^:dynamic *css-compile-flags*\n  {:pretty-print? goog.DEBUG})\n\n(defn ->css-var [n]\n  (->CSSFunction \"var\" n))\n\n(defn compile-css [elements]\n  (garden/css *css-compile-flags* elements))\n\n(defn- perform-update! [obj css]\n  (set! (.-innerHTML (:element obj)) css))\n\n(defn update! [id css]\n  (swap! *injected* update id\n         (fn update-injected-style [obj]\n           (when-not (= (:source obj) css)\n             (perform-update! obj css))\n           (assoc obj :source css))))\n\n(defonce ^:dynamic *dom* (atom nil))\n\n(defn inject! [id css]\n  (let [dom     @*dom*\n        element (doto (js/document.createElement \"style\")\n                  (.setAttribute \"spade-id\" (str id)))\n        obj     {:element element\n                 :source  css\n                 :id      id}]\n    (assert (some? dom)\n            \"An element is required in the dom to inject the style.\")\n\n    (.appendChild dom element)\n\n    (swap! *injected* assoc id obj)\n    (perform-update! obj css)))\n\n(defn- compose-names [{style-name :name composed :composes}]\n  (if-not composed\n    style-name\n    (str/join \" \"\n              (->>\n                (if (seq? composed)\n                  (into composed style-name)\n                  [composed style-name])\n                (map (fn [item]\n                       (cond\n                         (string? item) item\n\n                         ; unpack a defattrs\n                         (and (map? item)\n                              (string? (:class item)))\n                         (:class item)\n\n                         :else\n                         (throw (js/Error.\n                                  (str \"Invalid argument to :composes key:\"\n                                       item))))))))))\n\n(defn ensure-style! [mode base-style-name factory params]\n  (let [{css :css style-name :name :as info} (apply factory base-style-name params params)\n        existing (get @*injected* style-name)]\n\n    (if existing\n      ; update existing style element\n      (update! style-name css)\n\n      ; create a new element\n      (inject! style-name css))\n\n    (case mode\n      :attrs {:class (compose-names info)}\n      (:class :keyframes) (compose-names info)\n      :global css)))"]}