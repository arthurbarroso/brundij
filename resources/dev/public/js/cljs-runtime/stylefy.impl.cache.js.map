{"version":3,"sources":["stylefy/impl/cache.cljs"],"mappings":"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","names":["stylefy.impl.cache/cache-prefix","stylefy.impl.cache/cache-styles?","cljs.core.atom","stylefy.impl.cache/default-cache-expiration-time-s","cljs.core/*","stylefy.impl.cache/cache-key-styles","instance-id","stylefy.impl.cache/cache-key-created","stylefy.impl.cache/now-in-seconds","js/Math","js/Date","stylefy.impl.cache/cache-expired?","cache-created","expiration-age","now","and__4210__auto__","stylefy.impl.cache/read-cache-value","key","cljs.core/deref","temp__5735__auto__","cache-contents","js/window","cljs.reader.read_string","var_args","G__71275","stylefy.impl.cache/set-cache-created-time","js/Error","time-created","stylefy.impl.cache.set_cache_created_time","G__71295","stylefy.impl.cache/clear-styles","stylefy.impl.cache.clear_styles","G__71303","stylefy.impl.cache/use-caching!","cache-options","stylefy.impl.cache.use_caching_BANG_","cljs.core/reset!","or__4212__auto__","G__71317","stylefy.impl.cache/cache-styles","styles","stylefy.impl.cache.cache_styles","cljs.core/map?","stylefy.impl.cache/style-cache-version-not-supported?","cache","cached-maps","cljs.core/vals","cljs.core/boolean","p1__71321#","cljs.core/some","cljs.core/contains?","stylefy.impl.cache/check-cache-version!","cache-as-clojure-data","clojure.string/starts-with?","stylefy.impl.cache/init","stylefy-instance-id","options","cljs.core.not_EQ_"],"sourcesContent":["(ns stylefy.impl.cache\n  (:require [cljs.reader :refer [read-string]]\n            [clojure.string :as string]))\n\n(def cache-prefix \"stylefy_cache_\")\n(def cache-styles? (atom false))\n(def default-cache-expiration-time-s (* 1 60 60 * 24 * 7))\n\n(declare clear-styles)\n\n(defn cache-key-styles [instance-id]\n  (str cache-prefix \"styles\"\n       (when instance-id\n         (str \"_\" instance-id))))\n\n(defn- cache-key-created [instance-id]\n  (str cache-prefix \"created\"\n       (when instance-id\n         (str \"_\" instance-id))))\n\n; Utils\n\n(defn now-in-seconds []\n  (.floor js/Math (/ (.now js/Date) 1000)))\n\n(defn cache-expired? [cache-created expiration-age now]\n  (if (and cache-created expiration-age)\n    (< (+ cache-created expiration-age) now)\n    false))\n\n; Cache reading\n\n(defn read-cache-value\n  \"Reads the cache if caching is used.\"\n  [key]\n  (when @cache-styles?\n    (when-let [cache-contents (.getItem (.-localStorage js/window) key)]\n      (read-string cache-contents))))\n\n; Cache manipulation\n\n(defn set-cache-created-time\n  ([time-created]\n   (set-cache-created-time time-created nil))\n  ([time-created instance-id]\n   (.setItem (.-localStorage js/window)\n             (cache-key-created instance-id)\n             time-created)))\n\n(defn clear-styles\n  ([]\n   (clear-styles nil))\n  ([instance-id]\n   (.setItem (.-localStorage js/window)\n             (cache-key-styles instance-id)\n             \"\")))\n\n(defn use-caching!\n  ([cache-options]\n   (use-caching! cache-options nil))\n  ([cache-options instance-id]\n   (reset! cache-styles? true)\n\n   ; If cache is empty, set creation date.\n   (when-not (read-cache-value (cache-key-created instance-id))\n     (set-cache-created-time (now-in-seconds) instance-id))\n\n   (when (cache-expired? (read-cache-value (cache-key-created instance-id))\n                         (or (:expires cache-options) default-cache-expiration-time-s)\n                         (now-in-seconds))\n     (clear-styles instance-id)\n     (set-cache-created-time (now-in-seconds) instance-id))))\n\n(defn cache-styles\n  \"Caches the given style if caching is used.\n  Throws QUOTA_EXCEEDED_ERR if the storage is full.\"\n  ([styles]\n   (cache-styles styles nil))\n  ([styles instance-id]\n   (when (and @cache-styles? (map? styles))\n     (.setItem (.-localStorage js/window)\n               (cache-key-styles instance-id)\n               styles))))\n\n; Init\n\n(defn- style-cache-version-not-supported? [cache]\n  (let [cached-maps (vals cache)]\n    (boolean (some #(contains? % :stylefy.impl.dom/css) cached-maps))))\n\n(defn- check-cache-version!\n  \"In stylefy 3.0.0, :stylefy.impl.dom/css keywords were replaced with keyword :css while caching CSS.\n   This functions checks if the cache contains these old namespaced keywords, and if it does,\n   it clears the unsupported cache version.\"\n  [key]\n  (when-let [cache-contents (.getItem (.-localStorage js/window) key)]\n    (let [cache-as-clojure-data (read-string cache-contents)]\n      (when (and (string/starts-with? key \"stylefy_cache_styles\")\n                 (map? cache-as-clojure-data)\n                 (style-cache-version-not-supported? cache-as-clojure-data))\n        (clear-styles)))))\n\n(defn init [stylefy-instance-id options]\n  (when (not= (:use-caching? options) false)\n    (check-cache-version! (cache-key-styles stylefy-instance-id))\n    (use-caching! (:cache-options options) stylefy-instance-id)))\n"]}