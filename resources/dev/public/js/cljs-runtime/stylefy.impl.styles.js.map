{"version":3,"sources":["stylefy/impl/styles.cljc"],"mappings":";AAUA,AAAKA,6CAAuB,6CAAA,2CAAA,iFAAA,kCAAA,0FAAA,rSAACC;AAG7B,yCAAA,zCAAOC,0FAAoBC;AAA3B,AACE,oHAAA,2CAAA,oaAAA,5jBAACC,uGAAMD,kIACuB,AAACE,gDAAU,AAAA,+GAAA,AAAAC,gBAAwBN,6CACxB,AAAA,+GAAuBG,kGAC9B,AAACE,gDAAU,AAAA,wHAAA,AAAAC,gBAA4BN,6CAC5B,AAAA,wHAA2BG;;AAE1E,yCAAA,iDAAAI,1FAAOI,mGAA8CG;AAArD,AAAA,IAAAN,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RAA8CL;YAA9C,AAAAO,4CAAAF,eAAA,nEAA8BI;WAA9B,AAAAF,4CAAAF,eAAA,lEAAoCK;AAApC,AACE,IAAME,YAAU,AAACC,oEAAsBb;AAAvC,AACE,IAAAc,iBAAA,2CAAA,6DAAA,VAA6BF,8DAAgBF;AAA7C,AAAA,2GAAAI,kDAAAA,5JAACH,sDAAAA,sEAAAA;;AAGD,IAAAI,aAAA,AAAAC,cAAkB,AAACa,eAAK,AAAA,uHAA0BpB;IAAlDQ,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,gBAAA,AAAAD,kDAAAE,9DAAQS;AAAR,AAAA,AACE,IAAAE,iBAAA,2CAAA,gEAAA,VACUF,8DAAgB,AAACM,gCAAmBN;IAD9CG,iBAEEpB;AAFF,AAAA,6IAAAmB,eAAAC,mEAAAD,eAAAC,7OAACvB,uEAAAA,sGAAAA;;AADH;AAAA,eAAAO;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAC,qBAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,iBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,kBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,gBAAA,AAAAI,gBAAAX,5BAAQa;AAAR,AAAA,AACE,IAAAI,iBAAA,2CAAA,gEAAA,VACUJ,8DAAgB,AAACM,gCAAmBN;IAD9CK,iBAEEtB;AAFF,AAAA,6IAAAqB,eAAAC,mEAAAD,eAAAC,7OAACzB,uEAAAA,sGAAAA;;AADH;AAAA,eAAA,AAAAmB,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAKJ;;;wCAAA,xCAAOoB,wFAEJC;AAFH,AAGE,oBAAMA;AAAN,AACE,GACC,OAASA;AAAOA;;AADjB,GAEC,mBAAAC,lBAAUD;AAAO,OAACE,eAAKF;;AAFxB,GAGC,AAACG,wBAAQH;AAAO,yDAAA,lDAACI,sDACS,AAACC,+CAAOC,qBAAK,AAACC,6CAAKR,sCAAkBC;;AAJhE;;;;;AADF;;;AAOF,gDAAA,hDAAMQ,wGAA2BR,OAAMS;AAAvC,AACE,GAAQ,wBAAA,kCAAA,xDAAI,WAAA,VAAMT,uBACN,OAASA,2BACT,mBAAAC,lBAAUD,0CACV,EAAK,AAACG,wBAAQH,aACT,uBAAA,WAAAW,lCAACC;AAAD,AAAS,mDAAA,1CAAI,OAAAD,qCAAY,CAAAA,4BAAAV,wBAAa,CAAAU,oBAAA;GAAUX;AAJjE;;AAAA,AAAA,MAAA,KAAAU,MAAA,CAAA,sSAAA,KAAA,zRAKQ,CAAA,mEAAA,RAAoBD,yFAAwF,AAACI,wGAAOb;;;AAE9H;;;;iDAAA,jDAAOc,0GAGJlD,MAAMmD,WAAWC;AAHpB,AAKE,oBAAM,AAAA,0HAA4BA;AAAlC,AACE,sBAAA,tBAACC;;AADH;;AAGA,IAAMC,qBAAmB,AAAA,0HAA4BtD;IAC/CuD,kBAAgB,AAACC,2CAA8BJ;IAC/CK,wBAAsB,AAAA,sFAAQF;IAC9BG,+BAA6B,AAAA,qFAAQH;AAH3C,AAKE,oEAAA,pEAACX,8CAA0Ba;;AAC3B,iEAAA,jEAACb,8CAA0BU;;AAC3B,GAAQ,iCAAA,hCAAMI;AAAd;AAAA,AAAA,MAAA,KAAAZ,MAAA,CAAA,kBAAA,0JAAA,KAAA;;;AAEA,IAAMa,kBAAgB,AAACxB,sCAAkBsB;IACnCG,+BAA6B,AAACzB,sCAAkBmB;IAChDO,cAAY,AAACC,oBACC,yDAAA,ZACEX,gBACA,kDAAA,lDAACX,sDAAa,oEAAA,pEAACC,+CAAOC,wGAAMiB,gBAAgBC;IAC5DG,wBAAsB,AAAC9D,uGACCsD,gBACA,8BAAA,AAAA,2CAAA,4EAAA,nJAAM,AAACvC,cAAI6C,iHAAqBA;AAR9D,AAUE,GAAM,AAAC7C,cAAI+C;AAAX,AACEA;;AADF;;;AAGN,yCAAA,zCAAMC,0FAAoBhE,MAAMmD,WAAWC;AAA3C,AACE,IAAMa,aAAW,AAACf,+CAA2BlD,MAAMmD,WAAWC;AAA9D,AACW,oBAAI,iBAAAc,mBAAI,AAACC,uBAAOnE;AAAZ,AAAA,GAAAkE;AAAAA;;AACI,4CAAA,AAAA/D,rCAACiE,qDAAmBC,sBAAQlB;;;AAClCc;;AAMA,IAAMK,gCAAwB,GAAA,wHAAA,vHAAO,AAAA,6GAAqBtE;IACpDuE,kCAA0B,GAAA,4HAAA,3HAAO,AAAA,iHAAwBvE;IACzDwE,8BAAsB,GAAA,0HAAA,zHAAO,AAAA,+GAAsBxE;qBAFzD,iFAAA,lGAGMyE;IACAC,QAAM,AAAA,2GAAoB1E;IAC1B2E,aAAW,oEAAA,oHAAA,AAAA,tLACE,AAACC,qBAAKF,QAAO,AAACG,cAAI,AAACC,eAAKJ,UACxB,AAACnC,wBAAQmC,QAAO,AAACG,cAAI,AAACE,4CAAIrD,gBAAMgD;;IAE7CM,qCAA6B,AAAChE,cAAI,AAACiE,+CAAO,AAACC,6CAAKC,cAAIV,gBAAgBE;IACpES,uGAAiBpF,3CACA,AAACwD,7CACD,AAAC6B;AAZxB,AAaE,GAAI,qCAAA,uCAAA,1EAAIf,qCACAC,uCACAC,iCACAQ;AACN,yHAAA,2CAAA,7JAAC/E,uGAAMgE,6GAAmB,oHAAA,2CAAA,iEAAA,hOAAChE,uGAAMmF;;AACjC,yHAAA,2CAAA,7JAACnF,uGAAMgE,6GAAmBmB;;;;AAG7C,sCAAA,tCAAME,oFAAYtF,MAAMoD,QAAQzC;AAAhC,AACE,AAAC4E;;AACD,IAAMC,4BAA0B,iCAAA,KAAA,pCAAU,AAACrB,uBAAOnE,aAAO,AAACD,uCAAmBC;IACvEmD,aAAW,AAACjB,gCAAmBsD;IAC/BC,kBAAyB,+BAAA,AAAAtF,/BAACuF,+CAAmBrB,sBAAQlB;AAF3D,AAKE,GAAM,gDAAA,9CAAK,AAACnC,cAAIwE,kCACL,GAAA,eAAA,dAAOrC,2BACP,AAACgC,cAAIM;AAFhB,AAGE,uCAAA,2CAAA,gFAAA,lKAACjF,wIACSgF,8EAAgCrC,mBACxCxC;;AALJ;;AAOA,OAACqD,uCAAmBwB,0BAA0BrC,WAAWC;;AAE7D,0CAAA,1CAAMuC,4FAAgB3F,MAAM4B,UAAUwB,QAAQzC;AAA9C,AACE,IAAMiF,qBAAmB,AAACrF,4CAAI,AAAA,uHAA0BP,OAAO4B;AAA/D,AACE,oBAAIgE;AACF,OAACN,oCAAWM,mBAAmBxC,QAAQzC;;AACvC,OAAC0C,sBAAS,CAAA,qIAAA,xHAAkB,AAACJ,wGAAOrB,wCAAmC,AAACqB,wGAAOjD;;;AAErF,AAAA,gCAAA,wCAAA6F,xEAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,mEAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,qEAAA,rEAAME,gFACHnG,MAAQuG;AADX,AAEE,IAAMX,qBAAmB,+CAAA,WAAAY,iBAAAC,3EAACC;AAAD,AAAS,sDAAAF,iBAAA,mFAAA,yFAAAC,5OAACE;GACF3G,MACAuG;AAFjC,AAIE,oBAAIX;AACFA;;AACA,OAACvC,sBAAS,CAAA,sIAAA,zHAAkB,AAACJ,wGAAOsD,yCAAoC,AAACtD,wGAAOjD;;;;AARtF,CAAA,wDAAA,xDAAMmG;;AAAN;AAAA,CAAA,kDAAA,WAAAC,7DAAMD;AAAN,AAAA,IAAAE,WAAA,AAAA3E,gBAAA0E;IAAAA,eAAA,AAAAzE,eAAAyE;AAAA,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAAD,SAAAD;;;AAAA,AAWG,AAAA,qCAAA,6CAAAP,lFAAMgB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA/D,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAAM+D,8EACFG;AADJ,AAEG,+EAAA,2CAAA,wGAAA,3NAACC,iEAAeD;;;AAFnB,CAAA,mEAAA,kBAAAF,rFAAMD,8EAGFG;AAHJ,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAzG,4BAAAyG;eAAAA,XAGuDI;2CAHvD,AAAA5G,4CAAAwG,eAAA,lGAGmBG;AAHnB,AAIG,IAAMF,mBAAO,AAACvE,+CAAOC,qBAAKsE;AAA1B,AAEE,IAAAI,mBAAA,AAAApG,cAAcgG;IAAdK,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,kBAAA,AAAAD,wDAAAE,tEAAQvH;AAAR,AAAA,AACE,gDAAA,hDAACsF,oCAAWtF,+CAAS;kBAAKA;AAAL,AAAY,kCAAA,AAAAG,3BAACqH,2CAAenD,sBAAQrE;;;;AACzD,IAAAoB,2BAAsB,AAACS,eAAK,AAAA,uHAA0B7B;AAAtD,AAAA,oBAAAoB;AAAA,AAAA,uBAAAA,nBAAWmF;AAAX,AACE,kFAAA,2CAAA,wGAAA,rOAACU,iEAAeV;;AADlB;;AAFF;AAAA,eAAAa;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAnG,2BAAA,AAAAJ,cAAAoG;AAAA,AAAA,GAAAhG;AAAA,AAAA,IAAAgG,uBAAAhG;AAAA,AAAA,GAAA,AAAAC,6BAAA+F;AAAA,IAAA9F,wBAAA,AAAAC,sBAAA6F;AAAA,AAAA,eAAA,AAAA5F,qBAAA4F;eAAA9F;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,kBAAA,AAAAI,gBAAA0F,9BAAQpH;AAAR,AAAA,AACE,gDAAA,hDAACsF,oCAAWtF,+CAAS;kBAAKA;AAAL,AAAY,kCAAA,AAAAG,3BAACqH,2CAAenD,sBAAQrE;;;;AACzD,IAAAoB,+BAAsB,AAACS,eAAK,AAAA,uHAA0B7B;AAAtD,AAAA,oBAAAoB;AAAA,AAAA,uBAAAA,nBAAWmF;AAAX,AACE,kFAAA,2CAAA,wGAAA,rOAACU,iEAAeV;;AADlB;;AAFF;AAAA,eAAA,AAAA5E,eAAAyF;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAKF,oBAAMF;AAAN,AACE,6CAAA,AAAA/G,tCAACsH,sDAA0BpD;;AAD7B;;;;AAXH,CAAA,6DAAA,7DAAMwC;;AAAN,AAcH,kDAAA,lDAAMa,4GAA6BtE;AAAnC,AACE,IAAMuE,iCAA+B,AAAA,sHAAyBvE;AAA9D,AACE,wEAAA,2CAAA,gOAAA,5UAACwE,sBAAO/H,uKACuB,AAAA,+GAAuB8H,0HACnB,AAAA,wHAA2BA","names":["stylefy.impl.styles/global-vendor-prefixes","cljs.core.atom","stylefy.impl.styles/add-global-vendors","style","cljs.core.merge","clojure.set.union","cljs.core/deref","p__72137","map__72138","cljs.core/--destructure-map","cljs.core.get","stylefy.impl.styles/create-style!","props","hash","style-created-handler","style-css","stylefy.impl.conversion.style__GT_css","G__72140","seq__72141","cljs.core/seq","chunk__72142","count__72143","i__72144","temp__5735__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","sub-style","cljs.core/vals","G__72153","G__72154","G__72156","G__72157","stylefy.impl.hashing/hash-style","stylefy.impl.styles/class-into-string","class","cljs.core/Keyword","cljs.core/name","cljs.core/vector?","clojure.string.join","cljs.core.remove","cljs.core/nil?","cljs.core.mapv","stylefy.impl.styles/validate-class-definition","origin","js/Error","p1__72158#","cljs.core/every?","cljs.core.pr_str","stylefy.impl.styles/prepare-style-return-value","style-hash","options","stylefy.impl.log/warn","style-with-classes","html-attributes","stylefy.impl.utils/remove-special-keywords","html-attributes-class","html-attributes-inline-style","class-as-string","style-with-classes-as-string","final-class","clojure.string/trim","final-html-attributes","stylefy.impl.styles/style-return-value","return-map","or__4212__auto__","cljs.core/empty?","stylefy.impl.dom/style-in-dom?","stylefy.impl.dom/dom","contains-media-queries?","contains-feature-queries?","contains-manual-mode?","excluded-modes","modes","mode-names","cljs.core/map?","cljs.core/set","cljs.core/keys","cljs.core.map","contains-modes-not-excluded?","cljs.core.filter","cljs.core.comp","cljs.core/not","inline-style","stylefy.impl.conversion/garden-units->css","stylefy.impl.styles/use-style!","stylefy.impl.state/check-stylefy-initialisation","style-with-global-vendors","already-created","stylefy.impl.dom/style-by-hash","stylefy.impl.styles/use-sub-style!","resolved-sub-style","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","stylefy.impl.styles/sub-style","seq72161","G__72162","self__4805__auto__","sub-styles","p1__72159#","p2__72160#","cljs.core.reduce","cljs.core.get_in","G__72164","stylefy.impl.styles/prepare-styles","p__72165","map__72166","styles","stylefy.impl.styles.prepare_styles","request-dom-update-after-done?","_options","seq__72167","chunk__72168","count__72169","i__72170","stylefy.impl.dom/add-style","stylefy.impl.dom/update-dom-if-needed","stylefy.impl.styles/init-global-vendor-prefixes","global-vendor-prefixes-options","cljs.core/reset!"],"sourcesContent":["(ns stylefy.impl.styles\n  (:require [clojure.string :as str]\n            #?(:cljs [stylefy.impl.dom :as dom])\n            [stylefy.impl.hashing :as hashing]\n            [stylefy.impl.utils :as utils]\n            [stylefy.impl.state :as state]\n            [stylefy.impl.conversion :as conversion]\n            [stylefy.impl.log :as log]\n            [clojure.set :as set]))\n\n(def global-vendor-prefixes (atom {:stylefy.core/vendors #{}\n                                   :stylefy.core/auto-prefix #{}}))\n\n(defn- add-global-vendors [style]\n  (merge style\n         {:stylefy.core/vendors (set/union (:stylefy.core/vendors @global-vendor-prefixes)\n                                           (:stylefy.core/vendors style))\n          :stylefy.core/auto-prefix (set/union (:stylefy.core/auto-prefix @global-vendor-prefixes)\n                                               (:stylefy.core/auto-prefix style))}))\n\n(defn- create-style! [{:keys [props hash] :as style} style-created-handler]\n  (let [style-css (conversion/style->css style)]\n    (style-created-handler {:css style-css :hash hash})\n\n    ; Create sub-styles (if any)\n    (doseq [sub-style (vals (:stylefy.core/sub-styles props))]\n      (create-style!\n        {:props sub-style :hash (hashing/hash-style sub-style)}\n        style-created-handler))))\n\n(defn- class-into-string\n  \"Return class definition as string, or nil if the argument is nil.\"\n  [class]\n  (when class\n    (cond\n     (string? class) class\n     (keyword? class) (name class)\n     (vector? class) (str/join \" \"\n                               (remove nil? (mapv class-into-string class))))))\n\n(defn validate-class-definition [class origin]\n  (assert (or (nil? class)\n              (string? class)\n              (keyword? class)\n              (and (vector? class)\n                   (every? #(or (string? %) (keyword? %) (nil? %)) class)))\n          (str \"Unsupported \" origin \" type. It should be nil, keyword, string or vector of strings/keywords). Got: \" (pr-str class))))\n\n(defn- prepare-style-return-value\n  \"Given a style, hash and options, returns HTML attributes for a Hiccup component,\n   or nil if there are not any attributes.\"\n  [style style-hash options]\n\n  (when (:stylefy.core/with-classes options)\n    (log/warn \":stylefy.core/with-classes is deprecated in options map (since 1.3.0, removed in 2.0.0), use :class instead.\"))\n\n  (let [style-with-classes (:stylefy.core/with-classes style)\n        html-attributes (utils/remove-special-keywords options)\n        html-attributes-class (:class html-attributes)\n        html-attributes-inline-style (:style html-attributes)]\n\n    (validate-class-definition html-attributes-class \":class\")\n    (validate-class-definition style-with-classes \":stylefy.core/with-classes\")\n    (assert (nil? html-attributes-inline-style) \"HTML attribute :style is not supported in options map. Instead, you should provide your style definitions as the first argument when calling use-style.\")\n\n    (let [class-as-string (class-into-string html-attributes-class)\n          style-with-classes-as-string (class-into-string style-with-classes)\n          final-class (str/trim\n                        (str\n                          style-hash \" \"\n                          (str/join \" \" (remove nil? [class-as-string style-with-classes-as-string]))))\n          final-html-attributes (merge\n                                  html-attributes\n                                  (when (seq final-class) {:class final-class}))]\n\n      (when (seq final-html-attributes)\n        final-html-attributes))))\n\n(defn style-return-value [style style-hash options]\n  (let [return-map (prepare-style-return-value style style-hash options)]\n    #?(:cljs (if (or (empty? style)\n                     (dom/style-in-dom? @dom/dom style-hash))\n               return-map\n               ; The style definition has not been added into the DOM yet, so return the style props\n               ; as inline style. Inline style gets replaced soon as the style definition\n               ; is added into the DOM and the component re-renders itself.\n               ; However, if there are media queries, specific mode definitions etc., inline styling is probably\n               ; going to look wrong. In that case, hide the component completely until the DOM is ready.\n               (let [contains-media-queries? (some? (:stylefy.core/media style))\n                     contains-feature-queries? (some? (:stylefy.core/supports style))\n                     contains-manual-mode? (some? (:stylefy.core/manual style))\n                     excluded-modes #{:hover}\n                     modes (:stylefy.core/mode style)\n                     mode-names (cond\n                                  (map? modes) (set (keys modes))\n                                  (vector? modes) (set (map first modes))\n                                  :else #{})\n                     contains-modes-not-excluded? (seq (filter (comp not excluded-modes) mode-names))\n                     inline-style (-> style\n                                      (utils/remove-special-keywords)\n                                      (conversion/garden-units->css))]\n                 (if (or contains-media-queries?\n                         contains-feature-queries?\n                         contains-manual-mode?\n                         contains-modes-not-excluded?)\n                   (merge return-map {:style (merge inline-style {:visibility \"hidden\"})})\n                   (merge return-map {:style inline-style}))))\n       :clj  return-map)))\n\n(defn use-style! [style options style-created-handler]\n  (state/check-stylefy-initialisation)\n  (let [style-with-global-vendors (when-not (empty? style) (add-global-vendors style))\n        style-hash (hashing/hash-style style-with-global-vendors)\n        already-created #?(:cljs (dom/style-by-hash @dom/dom style-hash)\n                           :clj false)] ; TODO Read from css-in-context?\n\n    (when (and (seq style-with-global-vendors)\n               (some? style-hash)\n               (not already-created))\n      (create-style!\n        {:props style-with-global-vendors :hash style-hash}\n        style-created-handler))\n\n    (style-return-value style-with-global-vendors style-hash options)))\n\n(defn use-sub-style! [style sub-style options style-created-handler]\n  (let [resolved-sub-style (get (:stylefy.core/sub-styles style) sub-style)]\n    (if resolved-sub-style\n      (use-style! resolved-sub-style options style-created-handler)\n      (log/warn (str \"Sub-style \" (pr-str sub-style) \" not found in style: \" (pr-str style))))))\n\n(defn sub-style\n  [style & sub-styles]\n  (let [resolved-sub-style (reduce #(get-in %1 [:stylefy.core/sub-styles %2])\n                                   style\n                                   sub-styles)]\n\n    (if resolved-sub-style\n      resolved-sub-style\n      (log/warn (str \"Sub-style \" (pr-str sub-styles) \" not found in style: \" (pr-str style))))))\n\n#?(:cljs\n   (defn prepare-styles\n     ([styles]\n      (prepare-styles styles {:request-dom-update-after-done? true}))\n     ([styles {:keys [request-dom-update-after-done?] :as _options}]\n      (let [styles (remove nil? styles)]\n\n        (doseq [style styles]\n          (use-style! style {} (fn [style] (dom/add-style @dom/dom style)))\n          (when-let [sub-styles (vals (:stylefy.core/sub-styles style))]\n            (prepare-styles sub-styles {:request-dom-update-after-done? false}))))\n\n      (when request-dom-update-after-done?\n        (dom/update-dom-if-needed @dom/dom)))))\n\n(defn init-global-vendor-prefixes [options]\n  (let [global-vendor-prefixes-options (:global-vendor-prefixes options)]\n    (reset! global-vendor-prefixes\n            {:stylefy.core/vendors (:stylefy.core/vendors global-vendor-prefixes-options)\n             :stylefy.core/auto-prefix (:stylefy.core/auto-prefix global-vendor-prefixes-options)})))\n"]}