{
"version":3,
"file":"goog.structs.set.js",
"lineCount":96,
"mappings":"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",
"sources":["goog/structs/set.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Datastructure: Set.\n *\n *\n * This class implements a set data structure. Adding and removing is O(1). It\n * supports both object and primitive values. Be careful because you can add\n * both 1 and new Number(1), because these are not the same. You can even add\n * multiple new Number(1) because these are not equal.\n */\n\n\ngoog.provide('goog.structs.Set');\n\ngoog.require('goog.structs');\ngoog.require('goog.structs.Collection');\ngoog.require('goog.structs.Map');\ngoog.requireType('goog.iter.Iterator');\n\n/**\n * A set that can contain both primitives and objects.  Adding and removing\n * elements is O(1).  Primitives are treated as identical if they have the same\n * type and convert to the same string.  Objects are treated as identical only\n * if they are references to the same object.  WARNING: A goog.structs.Set can\n * contain both 1 and (new Number(1)), because they are not the same.  WARNING:\n * Adding (new Number(1)) twice will yield two distinct elements, because they\n * are two different objects.  WARNING: Any object that is added to a\n * goog.structs.Set will be modified!  Because goog.getUid() is used to\n * identify objects, every object in the set will be mutated.\n * @param {Array<T>|Object<?,T>=} opt_values Initial values to start with.\n * @constructor\n * @implements {goog.structs.Collection<T>}\n * @final\n * @template T\n * @deprecated This type is misleading: use ES6 Set instead.\n */\ngoog.structs.Set = function(opt_values) {\n  'use strict';\n  this.map_ = new goog.structs.Map;\n  if (opt_values) {\n    this.addAll(opt_values);\n  }\n};\n\n/**\n * A function that returns a unique id.\n * @private @const {function(?Object): number}\n */\ngoog.structs.Set.getUid_ = goog.getUid;\n\n\n/**\n * Obtains a unique key for an element of the set.  Primitives will yield the\n * same key if they have the same type and convert to the same string.  Object\n * references will yield the same key only if they refer to the same object.\n * @param {*} val Object or primitive value to get a key for.\n * @return {string} A unique key for this value/object.\n * @private\n */\ngoog.structs.Set.getKey_ = function(val) {\n  'use strict';\n  var type = typeof val;\n  if (type == 'object' && val || type == 'function') {\n    return 'o' + goog.structs.Set.getUid_(/** @type {Object} */ (val));\n  } else {\n    return type.substr(0, 1) + val;\n  }\n};\n\n\n/**\n * @return {number} The number of elements in the set.\n * @override\n */\ngoog.structs.Set.prototype.getCount = function() {\n  'use strict';\n  return this.map_.getCount();\n};\n\n\n/**\n * Add a primitive or an object to the set.\n * @param {T} element The primitive or object to add.\n * @override\n */\ngoog.structs.Set.prototype.add = function(element) {\n  'use strict';\n  this.map_.set(goog.structs.Set.getKey_(element), element);\n};\n\n\n/**\n * Adds all the values in the given collection to this set.\n * @param {Array<T>|goog.structs.Collection<T>|Object<?,T>} col A collection\n *     containing the elements to add.\n */\ngoog.structs.Set.prototype.addAll = function(col) {\n  'use strict';\n  var values = goog.structs.getValues(col);\n  var l = values.length;\n  for (var i = 0; i < l; i++) {\n    this.add(values[i]);\n  }\n};\n\n\n/**\n * Removes all values in the given collection from this set.\n * @param {Array<T>|goog.structs.Collection<T>|Object<?,T>} col A collection\n *     containing the elements to remove.\n */\ngoog.structs.Set.prototype.removeAll = function(col) {\n  'use strict';\n  var values = goog.structs.getValues(col);\n  var l = values.length;\n  for (var i = 0; i < l; i++) {\n    this.remove(values[i]);\n  }\n};\n\n\n/**\n * Removes the given element from this set.\n * @param {T} element The primitive or object to remove.\n * @return {boolean} Whether the element was found and removed.\n * @override\n */\ngoog.structs.Set.prototype.remove = function(element) {\n  'use strict';\n  return this.map_.remove(goog.structs.Set.getKey_(element));\n};\n\n\n/**\n * Removes all elements from this set.\n */\ngoog.structs.Set.prototype.clear = function() {\n  'use strict';\n  this.map_.clear();\n};\n\n\n/**\n * Tests whether this set is empty.\n * @return {boolean} True if there are no elements in this set.\n */\ngoog.structs.Set.prototype.isEmpty = function() {\n  'use strict';\n  return this.map_.isEmpty();\n};\n\n\n/**\n * Tests whether this set contains the given element.\n * @param {T} element The primitive or object to test for.\n * @return {boolean} True if this set contains the given element.\n * @override\n */\ngoog.structs.Set.prototype.contains = function(element) {\n  'use strict';\n  return this.map_.containsKey(goog.structs.Set.getKey_(element));\n};\n\n\n/**\n * Tests whether this set contains all the values in a given collection.\n * Repeated elements in the collection are ignored, e.g.  (new\n * goog.structs.Set([1, 2])).containsAll([1, 1]) is True.\n * @param {goog.structs.Collection<T>|Object} col A collection-like object.\n * @return {boolean} True if the set contains all elements.\n */\ngoog.structs.Set.prototype.containsAll = function(col) {\n  'use strict';\n  return goog.structs.every(col, this.contains, this);\n};\n\n\n/**\n * Finds all values that are present in both this set and the given collection.\n * @param {Array<S>|Object<?,S>} col A collection.\n * @return {!goog.structs.Set<T|S>} A new set containing all the values\n *     (primitives or objects) present in both this set and the given\n *     collection.\n * @template S\n */\ngoog.structs.Set.prototype.intersection = function(col) {\n  'use strict';\n  var result = new goog.structs.Set();\n\n  var values = goog.structs.getValues(col);\n  for (var i = 0; i < values.length; i++) {\n    var value = values[i];\n    if (this.contains(value)) {\n      result.add(value);\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Finds all values that are present in this set and not in the given\n * collection.\n * @param {Array<T>|goog.structs.Collection<T>|Object<?,T>} col A collection.\n * @return {!goog.structs.Set} A new set containing all the values\n *     (primitives or objects) present in this set but not in the given\n *     collection.\n */\ngoog.structs.Set.prototype.difference = function(col) {\n  'use strict';\n  var result = this.clone();\n  result.removeAll(col);\n  return result;\n};\n\n\n/**\n * Returns an array containing all the elements in this set.\n * @return {!Array<T>} An array containing all the elements in this set.\n */\ngoog.structs.Set.prototype.getValues = function() {\n  'use strict';\n  return this.map_.getValues();\n};\n\n\n/**\n * Creates a shallow clone of this set.\n * @return {!goog.structs.Set<T>} A new set containing all the same elements as\n *     this set.\n */\ngoog.structs.Set.prototype.clone = function() {\n  'use strict';\n  return new goog.structs.Set(this);\n};\n\n\n/**\n * Tests whether the given collection consists of the same elements as this set,\n * regardless of order, without repetition.  Primitives are treated as equal if\n * they have the same type and convert to the same string; objects are treated\n * as equal if they are references to the same object.  This operation is O(n).\n * @param {goog.structs.Collection<T>|Object} col A collection.\n * @return {boolean} True if the given collection consists of the same elements\n *     as this set, regardless of order, without repetition.\n */\ngoog.structs.Set.prototype.equals = function(col) {\n  'use strict';\n  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);\n};\n\n\n/**\n * Tests whether the given collection contains all the elements in this set.\n * Primitives are treated as equal if they have the same type and convert to the\n * same string; objects are treated as equal if they are references to the same\n * object.  This operation is O(n).\n * @param {goog.structs.Collection<T>|Object} col A collection.\n * @return {boolean} True if this set is a subset of the given collection.\n */\ngoog.structs.Set.prototype.isSubsetOf = function(col) {\n  'use strict';\n  var colCount = goog.structs.getCount(col);\n  if (this.getCount() > colCount) {\n    return false;\n  }\n  // TODO(user) Find the minimal collection size where the conversion makes\n  // the contains() method faster.\n  if (!(col instanceof goog.structs.Set) && colCount > 5) {\n    // Convert to a goog.structs.Set so that goog.structs.contains runs in\n    // O(1) time instead of O(n) time.\n    col = new goog.structs.Set(col);\n  }\n  return goog.structs.every(this, function(value) {\n    'use strict';\n    return goog.structs.contains(col, value);\n  });\n};\n\n\n/**\n * Returns an iterator that iterates over the elements in this set.\n * @param {boolean=} opt_keys This argument is ignored.\n * @return {!goog.iter.Iterator} An iterator over the elements in this set.\n */\ngoog.structs.Set.prototype.__iterator__ = function(opt_keys) {\n  'use strict';\n  return this.map_.__iterator__(false);\n};\n"],
"names":["goog","provide","require","requireType","structs","Set","goog.structs.Set","opt_values","map_","Map","addAll","getUid_","getUid","getKey_","goog.structs.Set.getKey_","val","type","substr","prototype","getCount","goog.structs.Set.prototype.getCount","add","goog.structs.Set.prototype.add","element","set","goog.structs.Set.prototype.addAll","col","values","getValues","l","length","i","removeAll","goog.structs.Set.prototype.removeAll","remove","goog.structs.Set.prototype.remove","clear","goog.structs.Set.prototype.clear","isEmpty","goog.structs.Set.prototype.isEmpty","contains","goog.structs.Set.prototype.contains","containsKey","containsAll","goog.structs.Set.prototype.containsAll","every","intersection","goog.structs.Set.prototype.intersection","result","value","difference","goog.structs.Set.prototype.difference","clone","goog.structs.Set.prototype.getValues","goog.structs.Set.prototype.clone","equals","goog.structs.Set.prototype.equals","isSubsetOf","goog.structs.Set.prototype.isSubsetOf","colCount","__iterator__","goog.structs.Set.prototype.__iterator__","opt_keys"]
}
