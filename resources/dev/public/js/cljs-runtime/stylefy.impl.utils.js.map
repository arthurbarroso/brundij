{"version":3,"sources":["stylefy/impl/utils.cljc"],"mappings":";AASA;;;6CAAA,7CAAMA,kGAEHC;AAFH,AAGE,OAACC,8CAAMC,iBAAOF,MAAM,+CAAA,WAAAG,1DAACC;AAAD,AAAS,IAAAC,oBAAK,oBAAAF,pBAACG;AAAN,AAAA,oBAAAD;AACK,+EAAA,xEAACE,kCAAiB,oBAAAJ,pBAACG;;AADxBD;;GAED,AAACG,eAAKR;;AAEpC,4CAAA,5CAAMS,gGAAkBC;AAAxB,AAEW,sDAAA,7CAAI,kBAAWC,jBAAcD,8CACzB,kBAAWE,jBAAeF,6CAC1B,kBAAWG,jBAAkBH","names":["stylefy.impl.utils/remove-special-keywords","props","cljs.core.apply","cljs.core/dissoc","p1__70976#","cljs.core.filter","and__4210__auto__","cljs.core/namespace","clojure.string/starts-with?","cljs.core/keys","stylefy.impl.utils/is-garden-value?","value","garden.types/CSSUnit","garden.color/CSSColor","garden.types/CSSFunction"],"sourcesContent":["(ns stylefy.impl.utils\n  (:require [garden.color :as color]\n            [garden.types :as types]\n            [clojure.string :as str])\n  (:import #?@(:clj\n               [(garden.types CSSFunction)\n                (garden.types CSSUnit)\n                (garden.color CSSColor)])))\n\n(defn remove-special-keywords\n  \"Removes stylefy's namespaced keywords from the given map.\"\n  [props]\n  (apply dissoc props (filter #(and (namespace %)\n                                    (str/starts-with? (namespace %) \"stylefy\"))\n                              (keys props))))\n\n(defn is-garden-value? [value]\n  ; Note: types/CSSAtRule is not included since it is a selector, not a valid CSS value.\n  #?(:cljs (or (instance? types/CSSUnit value)\n               (instance? color/CSSColor value)\n               (instance? types/CSSFunction value))\n     :clj  (or (instance? CSSUnit value)\n               (instance? CSSColor value)\n               (instance? CSSFunction value))))"]}