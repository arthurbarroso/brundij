{"version":3,"sources":["brundij/ds.cljs"],"mappings":";AAKA,GAAA,QAAAA,oCAAAC,uCAAAC;AAAA;AAAA,AAAA,AAASC,sBAAS,mQAAA,qDAAA,2CAAA,nWAACC,uDAAO,CAACC,yDAAAA,2DAAAA,qPACiB,6CAAA,7CAACC;;AAE7C;;;2BAAA,3BAAMC,8DAEHC;AAFH,AAGE,mCAAA,5BAAU,AAAgBC,0DAAyC,AAACC,qCAAqBF;;AAE3F;;;iCAAA,jCAAMG;AAAN,AAGE,IAAMC,YAAU,4BAAA,5BAAU,AAAgBH;IACpCI,oBAAkB,AAACC,oCAAoBF;AAD7C,AAEE,GAAM,GAAK,cAAA,bAAMA;AAAjB,AACE,AAACG,+DAAcZ,oBAASU;;AAD1B;;AAEA,sFAAA,/EAACG,2DAAUb,uFACA,WAAKc;AAAL,AACE,IAAAC,qBAAc,AAAA,2FAAWD;AAAzB,AAAA,oBAAAC;AAAA,AAAA,SAAAA,LAAWV;AAAX,AACE,kBAAA,XAACW;AAAD,AAAgB,OAACZ,yBAASC;GAA1B;;AADF;;;;AAGjB,4BAAA,5BAAMY,gEAAWC;AAAjB,AACE,GAAI,AAACC,qBAAKD;AACR,OAACE,uDAAWpB,oBAASkB;;AACrB,kFAAA,3EAACE,uDAAWpB,uGAAUkB","names":["js/brundij","js/brundij.ds","js/brundij.ds.database","brundij.ds/database","reagent.core.atom","datascript.core/empty-db","cljs.core.atom","brundij.ds/persist!","db","js/window","datascript.transit/write-transit-str","brundij.ds/initialize-ds!","persisted","transit-persisted","datascript.transit/read-transit-str","datascript.core.reset_conn_BANG_","datascript.core.listen_BANG_","tx-report","temp__5735__auto__","js/setTimeout","brundij.ds/transact!","data","cljs.core/seq?","datascript.core.transact"],"sourcesContent":["(ns brundij.ds\n  (:require [datascript.core :as d]\n            [datascript.transit :as dt]\n            [reagent.core :as r]))\n\n(defonce database (r/atom (d/empty-db)\n                          :meta {:listeners (atom {})}))\n\n(defn persist!\n  \"Persists a datascript database to localStorage\"\n  [db]\n  (.setItem (.-localStorage js/window) \"datascript-brundij-database\" (dt/write-transit-str db)))\n\n(defn initialize-ds!\n  \"Initializes datascript database. Will create a database from the data on localStoragge if possible. Also listens for changes and persists those\"\n  []\n  (let [persisted (.getItem (.-localStorage js/window) \"datascript-brundij-database\")\n        transit-persisted (dt/read-transit-str persisted)]\n    (when (not (nil? persisted))\n      (d/reset-conn! database transit-persisted))\n    (d/listen! database :persistence\n               (fn [tx-report]\n                 (when-let [db (:db-after tx-report)]\n                   (js/setTimeout #(persist! db) 0))))))\n\n(defn transact! [data]\n  (if (seq? data)\n    (d/transact database data)\n    (d/transact database [data])))\n"]}