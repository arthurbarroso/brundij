{"version":3,"sources":["cljc/java_time/offset_time.cljs"],"mappings":"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","names":["cljc.java-time.offset-time/min","goog.object/get","java.time/OffsetTime","cljc.java-time.offset-time/max","cljc.java-time.offset-time/minus-minutes","this4060","long4061","cljc.java-time.offset-time/truncated-to","this4062","java-time-temporal-TemporalUnit4063","cljc.java-time.offset-time/range","this4064","java-time-temporal-TemporalField4065","cljc.java-time.offset-time/get-hour","this4066","cljc.java-time.offset-time/minus-hours","this4067","long4068","var_args","G__72690","cljc.java-time.offset-time/of","js/Error","int4069","int4070","int4071","int4072","java-time-ZoneOffset4073","cljs.core.js_invoke","java-time-LocalTime4074","java-time-ZoneOffset4075","cljc.java-time.offset-time/is-equal","this4076","java-time-OffsetTime4077","cljc.java-time.offset-time/get-nano","this4078","cljc.java-time.offset-time/minus-seconds","this4079","long4080","cljc.java-time.offset-time/get-second","this4081","cljc.java-time.offset-time/plus-nanos","this4082","long4083","G__72697","cljc.java-time.offset-time/plus","this4084","java-time-temporal-TemporalAmount4085","this4086","long4087","java-time-temporal-TemporalUnit4088","cljc.java-time.offset-time/with-hour","this4089","int4090","cljc.java-time.offset-time/with-minute","this4091","int4092","cljc.java-time.offset-time/plus-minutes","this4093","long4094","cljc.java-time.offset-time/query","this4095","java-time-temporal-TemporalQuery4096","cljc.java-time.offset-time/at-date","this4097","java-time-LocalDate4098","cljc.java-time.offset-time/with-offset-same-instant","this4099","java-time-ZoneOffset4100","cljc.java-time.offset-time/to-string","this4101","cljc.java-time.offset-time/is-before","this4102","java-time-OffsetTime4103","G__72702","cljc.java-time.offset-time/minus","this4104","long4105","java-time-temporal-TemporalUnit4106","this4107","java-time-temporal-TemporalAmount4108","cljc.java-time.offset-time/plus-hours","this4109","long4110","cljc.java-time.offset-time/to-local-time","this4111","cljc.java-time.offset-time/get-long","this4112","java-time-temporal-TemporalField4113","cljc.java-time.offset-time/get-offset","this4114","cljc.java-time.offset-time/with-nano","this4115","int4116","cljc.java-time.offset-time/until","this4117","java-time-temporal-Temporal4118","java-time-temporal-TemporalUnit4119","cljc.java-time.offset-time/with-offset-same-local","this4120","java-time-ZoneOffset4121","cljc.java-time.offset-time/from","java-time-temporal-TemporalAccessor4122","cljc.java-time.offset-time/is-after","this4123","java-time-OffsetTime4124","cljc.java-time.offset-time/minus-nanos","this4125","long4126","cljc.java-time.offset-time/is-supported","this4127","G__4128","G__72713","cljc.java-time.offset-time/parse","java-lang-CharSequence4129","java-lang-CharSequence4130","java-time-format-DateTimeFormatter4131","cljc.java-time.offset-time/with-second","this4132","int4133","cljc.java-time.offset-time/get-minute","this4134","cljc.java-time.offset-time/hash-code","this4135","cljc.java-time.offset-time/adjust-into","this4136","java-time-temporal-Temporal4137","G__72720","cljc.java-time.offset-time/with","this4138","java-time-temporal-TemporalAdjuster4139","this4140","java-time-temporal-TemporalField4141","long4142","G__72725","cljc.java-time.offset-time/now","cljs.core/js-invoke","G__4144","cljc.java-time.offset-time/compare-to","this4145","java-time-OffsetTime4146","cljc.java-time.offset-time/of-instant","java-time-Instant4147","java-time-ZoneId4148","cljc.java-time.offset-time/plus-seconds","this4149","long4150","cljc.java-time.offset-time/get","this4151","java-time-temporal-TemporalField4152","cljc.java-time.offset-time/equals","this4153","java-lang-Object4154","cljc.java-time.offset-time/format","this4155","java-time-format-DateTimeFormatter4156"],"sourcesContent":["(ns cljc.java-time.offset-time (:refer-clojure :exclude [get range format min max next name resolve short]) (:require [cljc.java-time.extn.calendar-awareness] [java.time :refer [OffsetTime]]))\n(def min (goog.object/get java.time.OffsetTime \"MIN\"))\n(def max (goog.object/get java.time.OffsetTime \"MAX\"))\n(clojure.core/defn minus-minutes {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4060 ^long long4061] (.minusMinutes this4060 long4061)))\n(clojure.core/defn truncated-to {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalUnit\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4062 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4063] (.truncatedTo this4062 java-time-temporal-TemporalUnit4063)))\n(clojure.core/defn range {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\"]))} (^js/JSJoda.ValueRange [^js/JSJoda.OffsetTime this4064 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4065] (.range this4064 java-time-temporal-TemporalField4065)))\n(clojure.core/defn get-hour {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this4066] (.hour this4066)))\n(clojure.core/defn minus-hours {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4067 ^long long4068] (.minusHours this4067 long4068)))\n(clojure.core/defn of {:arglists (quote ([\"int\" \"int\" \"int\" \"int\" \"java.time.ZoneOffset\"] [\"java.time.LocalTime\" \"java.time.ZoneOffset\"]))} (^js/JSJoda.OffsetTime [^int int4069 ^int int4070 ^int int4071 ^int int4072 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4073] (js-invoke java.time.OffsetTime \"of\" int4069 int4070 int4071 int4072 java-time-ZoneOffset4073)) (^js/JSJoda.OffsetTime [^js/JSJoda.LocalTime java-time-LocalTime4074 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4075] (js-invoke java.time.OffsetTime \"of\" java-time-LocalTime4074 java-time-ZoneOffset4075)))\n(clojure.core/defn is-equal {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.OffsetTime\"]))} (^boolean [^js/JSJoda.OffsetTime this4076 ^js/JSJoda.OffsetTime java-time-OffsetTime4077] (.isEqual this4076 java-time-OffsetTime4077)))\n(clojure.core/defn get-nano {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this4078] (.nano this4078)))\n(clojure.core/defn minus-seconds {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4079 ^long long4080] (.minusSeconds this4079 long4080)))\n(clojure.core/defn get-second {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this4081] (.second this4081)))\n(clojure.core/defn plus-nanos {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4082 ^long long4083] (.plusNanos this4082 long4083)))\n(clojure.core/defn plus {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalAmount\"] [\"java.time.OffsetTime\" \"long\" \"java.time.temporal.TemporalUnit\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4084 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4085] (.plus this4084 java-time-temporal-TemporalAmount4085)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4086 ^long long4087 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4088] (.plus this4086 long4087 java-time-temporal-TemporalUnit4088)))\n(clojure.core/defn with-hour {:arglists (quote ([\"java.time.OffsetTime\" \"int\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4089 ^int int4090] (.withHour this4089 int4090)))\n(clojure.core/defn with-minute {:arglists (quote ([\"java.time.OffsetTime\" \"int\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4091 ^int int4092] (.withMinute this4091 int4092)))\n(clojure.core/defn plus-minutes {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4093 ^long long4094] (.plusMinutes this4093 long4094)))\n(clojure.core/defn query {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalQuery\"]))} (^java.lang.Object [^js/JSJoda.OffsetTime this4095 ^js/JSJoda.TemporalQuery java-time-temporal-TemporalQuery4096] (.query this4095 java-time-temporal-TemporalQuery4096)))\n(clojure.core/defn at-date {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.LocalDate\"]))} (^js/JSJoda.OffsetDateTime [^js/JSJoda.OffsetTime this4097 ^js/JSJoda.LocalDate java-time-LocalDate4098] (.atDate this4097 java-time-LocalDate4098)))\n(clojure.core/defn with-offset-same-instant {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.ZoneOffset\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4099 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4100] (.withOffsetSameInstant this4099 java-time-ZoneOffset4100)))\n(clojure.core/defn to-string {:arglists (quote ([\"java.time.OffsetTime\"]))} (^java.lang.String [^js/JSJoda.OffsetTime this4101] (.toString this4101)))\n(clojure.core/defn is-before {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.OffsetTime\"]))} (^boolean [^js/JSJoda.OffsetTime this4102 ^js/JSJoda.OffsetTime java-time-OffsetTime4103] (.isBefore this4102 java-time-OffsetTime4103)))\n(clojure.core/defn minus {:arglists (quote ([\"java.time.OffsetTime\" \"long\" \"java.time.temporal.TemporalUnit\"] [\"java.time.OffsetTime\" \"java.time.temporal.TemporalAmount\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4104 ^long long4105 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4106] (.minus this4104 long4105 java-time-temporal-TemporalUnit4106)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4107 ^js/JSJoda.TemporalAmount java-time-temporal-TemporalAmount4108] (.minus this4107 java-time-temporal-TemporalAmount4108)))\n(clojure.core/defn plus-hours {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4109 ^long long4110] (.plusHours this4109 long4110)))\n(clojure.core/defn to-local-time {:arglists (quote ([\"java.time.OffsetTime\"]))} (^js/JSJoda.LocalTime [^js/JSJoda.OffsetTime this4111] (.toLocalTime this4111)))\n(clojure.core/defn get-long {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\"]))} (^long [^js/JSJoda.OffsetTime this4112 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4113] (.getLong this4112 java-time-temporal-TemporalField4113)))\n(clojure.core/defn get-offset {:arglists (quote ([\"java.time.OffsetTime\"]))} (^js/JSJoda.ZoneOffset [^js/JSJoda.OffsetTime this4114] (.offset this4114)))\n(clojure.core/defn with-nano {:arglists (quote ([\"java.time.OffsetTime\" \"int\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4115 ^int int4116] (.withNano this4115 int4116)))\n(clojure.core/defn until {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.Temporal\" \"java.time.temporal.TemporalUnit\"]))} (^long [^js/JSJoda.OffsetTime this4117 ^js/JSJoda.Temporal java-time-temporal-Temporal4118 ^js/JSJoda.TemporalUnit java-time-temporal-TemporalUnit4119] (.until this4117 java-time-temporal-Temporal4118 java-time-temporal-TemporalUnit4119)))\n(clojure.core/defn with-offset-same-local {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.ZoneOffset\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4120 ^js/JSJoda.ZoneOffset java-time-ZoneOffset4121] (.withOffsetSameLocal this4120 java-time-ZoneOffset4121)))\n(clojure.core/defn from {:arglists (quote ([\"java.time.temporal.TemporalAccessor\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.TemporalAccessor java-time-temporal-TemporalAccessor4122] (js-invoke java.time.OffsetTime \"from\" java-time-temporal-TemporalAccessor4122)))\n(clojure.core/defn is-after {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.OffsetTime\"]))} (^boolean [^js/JSJoda.OffsetTime this4123 ^js/JSJoda.OffsetTime java-time-OffsetTime4124] (.isAfter this4123 java-time-OffsetTime4124)))\n(clojure.core/defn minus-nanos {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4125 ^long long4126] (.minusNanos this4125 long4126)))\n(clojure.core/defn is-supported {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\"] [\"java.time.OffsetTime\" \"java.time.temporal.TemporalUnit\"]))} (^boolean [this4127 G__4128] (.isSupported ^js/JSJoda.OffsetTime this4127 G__4128)))\n(clojure.core/defn parse {:arglists (quote ([\"java.lang.CharSequence\"] [\"java.lang.CharSequence\" \"java.time.format.DateTimeFormatter\"]))} (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence4129] (js-invoke java.time.OffsetTime \"parse\" java-lang-CharSequence4129)) (^js/JSJoda.OffsetTime [^java.lang.CharSequence java-lang-CharSequence4130 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4131] (js-invoke java.time.OffsetTime \"parse\" java-lang-CharSequence4130 java-time-format-DateTimeFormatter4131)))\n(clojure.core/defn with-second {:arglists (quote ([\"java.time.OffsetTime\" \"int\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4132 ^int int4133] (.withSecond this4132 int4133)))\n(clojure.core/defn get-minute {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this4134] (.minute this4134)))\n(clojure.core/defn hash-code {:arglists (quote ([\"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this4135] (.hashCode this4135)))\n(clojure.core/defn adjust-into {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.Temporal\"]))} (^js/JSJoda.Temporal [^js/JSJoda.OffsetTime this4136 ^js/JSJoda.Temporal java-time-temporal-Temporal4137] (.adjustInto this4136 java-time-temporal-Temporal4137)))\n(clojure.core/defn with {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalAdjuster\"] [\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4138 ^js/JSJoda.TemporalAdjuster java-time-temporal-TemporalAdjuster4139] (.with this4138 java-time-temporal-TemporalAdjuster4139)) (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4140 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4141 ^long long4142] (.with this4140 java-time-temporal-TemporalField4141 long4142)))\n(clojure.core/defn now {:arglists (quote ([] [\"java.time.ZoneId\"] [\"java.time.Clock\"]))} (^js/JSJoda.OffsetTime [] (js-invoke java.time.OffsetTime \"now\")) (^js/JSJoda.OffsetTime [G__4144] (js-invoke java.time.OffsetTime \"now\" G__4144)))\n(clojure.core/defn compare-to {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.OffsetTime\"]))} (^int [^js/JSJoda.OffsetTime this4145 ^js/JSJoda.OffsetTime java-time-OffsetTime4146] (.compareTo this4145 java-time-OffsetTime4146)))\n(clojure.core/defn of-instant {:arglists (quote ([\"java.time.Instant\" \"java.time.ZoneId\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.Instant java-time-Instant4147 ^js/JSJoda.ZoneId java-time-ZoneId4148] (js-invoke java.time.OffsetTime \"ofInstant\" java-time-Instant4147 java-time-ZoneId4148)))\n(clojure.core/defn plus-seconds {:arglists (quote ([\"java.time.OffsetTime\" \"long\"]))} (^js/JSJoda.OffsetTime [^js/JSJoda.OffsetTime this4149 ^long long4150] (.plusSeconds this4149 long4150)))\n(clojure.core/defn get {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.temporal.TemporalField\"]))} (^int [^js/JSJoda.OffsetTime this4151 ^js/JSJoda.TemporalField java-time-temporal-TemporalField4152] (.get this4151 java-time-temporal-TemporalField4152)))\n(clojure.core/defn equals {:arglists (quote ([\"java.time.OffsetTime\" \"java.lang.Object\"]))} (^boolean [^js/JSJoda.OffsetTime this4153 ^java.lang.Object java-lang-Object4154] (.equals this4153 java-lang-Object4154)))\n(clojure.core/defn format {:arglists (quote ([\"java.time.OffsetTime\" \"java.time.format.DateTimeFormatter\"]))} (^java.lang.String [^js/JSJoda.OffsetTime this4155 ^js/JSJoda.DateTimeFormatter java-time-format-DateTimeFormatter4156] (.format this4155 java-time-format-DateTimeFormatter4156)))\n"]}