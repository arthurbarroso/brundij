{"version":3,"sources":["reitit/coercion/spec.cljc"],"mappings":"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","names":["reitit.coercion.spec/string-transformer","spec_tools.core.type_transformer","spec-tools.core/strip-extra-keys-transformer","spec-tools.core/string-transformer","reitit.coercion.spec/json-transformer","spec-tools.core/json-transformer","reitit.coercion.spec/strip-extra-keys-transformer","reitit.coercion.spec/no-op-transformer","js/reitit","js/reitit.coercion","js/reitit.coercion.spec","js/reitit.coercion.spec.t_reitit$coercion$spec79145","reitit.coercion.spec/t_reitit$coercion$spec79145","_79147","meta79146","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","reitit.coercion.spec/->t_reitit$coercion$spec79145","_","reitit$coercion$spec$IntoSpec$into_spec$dyn","x__4509__auto__","m__4510__auto__","reitit.coercion.spec/into-spec","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","reitit.coercion.spec/IntoSpec","this","name","reitit.coercion.spec/ensure-name","?name","or__4212__auto__","cljs.core.keyword","cljs.core/name","cljs.core.gensym","goog.object/set","cljs.core/PersistentArrayMap","cljs.core.dissoc","spec_tools.data_spec.spec","cljs.core/PersistentHashMap","cljs.core/PersistentVector","spec-tools.data-spec/Maybe","spec-tools.core/Spec","spec-tools.core/create-spec","reitit.coercion.spec/stringify-pred","pred","cljs.core/seq?","cljs.core/seq","js/reitit.coercion.spec.coerce-response?","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__79151","cljs.core/MultiFn","cljs.core.symbol","reitit.coercion.spec/coerce-response?","cljs.core/identity","reitit.coercion.spec/default-options","p__79154","map__79155","cljs.core/--destructure-map","reitit.coercion.spec/create","transformers","coerce-response?","opts","js/reitit.coercion.spec.t_reitit$coercion$spec79156","reitit.coercion.spec/t_reitit$coercion$spec79156","_79158","meta79157","p__79159","map__79160","reitit.coercion.spec/->t_reitit$coercion$spec79156","specification","parameters","responses","G__79161","cljs.core/Keyword","spec_tools.swagger.core.swagger_spec","cljs.core.merge","cljs.core.into","cljs.core/empty","iter__4611__auto__","s__79163","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__79165","cljs.core/chunk-buffer","i__79164","vec__79166","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79162","cljs.core/chunk-rest","vec__79169","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","s__79173","b__79175","i__79174","vec__79176","iter__79172","vec__79179","response","$","clojure.set/rename-keys","p1__79152#","cljs.core.update","cljs.core.ex_info","model","spec","error","problems","cljs.core.comp","cljs.core/str","cljs.spec.alpha/form","cljs.core.assoc","p1__79153#","cljs.core.mapv","type","map__79182","formats","default","value","format","temp__5733__auto__","transformer","coerced","spec_tools.core.coerce","cljs.spec.alpha.valid_QMARK_","transformed","spec_tools.core.conform","cljs.spec.alpha/invalid?","spec_tools.core.explain_data","reitit.coercion/map->CoercionError","cljs.spec.alpha/unform","reitit.coercion.spec/coercion","cljs.core/chunk-first"],"sourcesContent":["(ns reitit.coercion.spec\n  (:require [clojure.spec.alpha :as s]\n            [spec-tools.core :as st #?@(:cljs [:refer [Spec]])]\n            [spec-tools.data-spec :as ds #?@(:cljs [:refer [Maybe]])]\n            [spec-tools.swagger.core :as swagger]\n            [reitit.coercion :as coercion]\n            [clojure.set :as set])\n  #?(:clj\n     (:import (spec_tools.core Spec)\n              (spec_tools.data_spec Maybe))))\n\n(def string-transformer\n  (st/type-transformer\n    st/strip-extra-keys-transformer\n    st/string-transformer))\n\n(def json-transformer\n  (st/type-transformer\n    st/strip-extra-keys-transformer\n    st/json-transformer))\n\n(def strip-extra-keys-transformer\n  st/strip-extra-keys-transformer)\n\n(def no-op-transformer\n  (reify\n    st/Transformer\n    (-name [_] ::no-op)\n    (-encoder [_ _ _])\n    (-decoder [_ _ _])))\n\n(defprotocol IntoSpec\n  (into-spec [this name]))\n\n(defn- ensure-name [?name]\n  (or ?name (keyword \"spec\" (name (gensym \"\")))))\n\n(extend-protocol IntoSpec\n\n  #?(:clj  clojure.lang.PersistentArrayMap\n     :cljs cljs.core.PersistentArrayMap)\n  (into-spec [this name]\n    (dissoc (ds/spec (ensure-name name) this) :name))\n\n  #?(:clj  clojure.lang.PersistentHashMap\n     :cljs cljs.core.PersistentHashMap)\n  (into-spec [this name]\n    (dissoc (ds/spec (ensure-name name) this) :name))\n\n  #?(:clj  clojure.lang.PersistentVector\n     :cljs cljs.core.PersistentVector)\n  (into-spec [this name]\n    (dissoc (ds/spec (ensure-name name) this) :name))\n\n  Maybe\n  (into-spec [this name]\n    (ds/spec (ensure-name name) this))\n\n  Spec\n  (into-spec [this _] this)\n\n  #?(:clj  Object\n     :cljs default)\n  (into-spec [this _]\n    (st/create-spec {:spec this}))\n\n  nil\n  (into-spec [this _]))\n\n(defn stringify-pred [pred]\n  (str (if (seq? pred) (seq pred) pred)))\n\n(defmulti coerce-response? identity :default ::default)\n(defmethod coerce-response? ::default [_] true)\n\n(def default-options\n  {:coerce-response? coerce-response?\n   :transformers {:body {:default strip-extra-keys-transformer\n                         :formats {\"application/json\" json-transformer}}\n                  :string {:default string-transformer}\n                  :response {:default no-op-transformer}}})\n\n(defn create [{:keys [transformers coerce-response?] :as opts}]\n  ^{:type ::coercion/coercion}\n  (reify coercion/Coercion\n    (-get-name [_] :spec)\n    (-get-options [_] opts)\n    (-get-apidocs [this specification {:keys [parameters responses]}]\n      (case specification\n        :swagger (swagger/swagger-spec\n                   (merge\n                     (if parameters\n                       {::swagger/parameters\n                        (into\n                          (empty parameters)\n                          (for [[k v] parameters]\n                            [k (coercion/-compile-model this v nil)]))})\n                     (if responses\n                       {::swagger/responses\n                        (into\n                          (empty responses)\n                          (for [[k response] responses]\n                            [k (as-> response $\n                                     (set/rename-keys $ {:body :schema})\n                                     (if (:schema $)\n                                       (update $ :schema #(coercion/-compile-model this % nil))\n                                       $))]))})))\n        (throw\n          (ex-info\n            (str \"Can't produce Spec apidocs for \" specification)\n            {:specification specification, :coercion :spec}))))\n    (-compile-model [_ model name]\n      (into-spec model name))\n    (-open-model [_ spec] spec)\n    (-encode-error [_ error]\n      (let [problems (-> error :problems ::s/problems)]\n        (-> error\n            (update :spec (comp str s/form))\n            (assoc :problems (mapv #(update % :pred stringify-pred) problems)))))\n    (-request-coercer [this type spec]\n      (let [spec (coercion/-compile-model this spec nil)\n            {:keys [formats default]} (transformers type)]\n        (fn [value format]\n          (if-let [transformer (or (get formats format) default)]\n            (let [coerced (st/coerce spec value transformer)]\n              (if (s/valid? spec coerced)\n                coerced\n                (let [transformed (st/conform spec coerced transformer)]\n                  (if (s/invalid? transformed)\n                    (let [problems (st/explain-data spec coerced transformer)]\n                      (coercion/map->CoercionError\n                        {:spec spec\n                         :problems problems}))\n                    (s/unform spec transformed)))))\n            value))))\n    (-response-coercer [this spec]\n      (if (coerce-response? spec)\n        (coercion/-request-coercer this :response spec)))))\n\n(def coercion (create default-options))\n"]}