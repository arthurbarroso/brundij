{"version":3,"sources":["dommy/utils.cljs"],"mappings":";AAEA;;;;wBAAA,kCAAAA,1DAAMO,wDAGHC;AAHH,AAAA,IAAAP,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;QAAAE,JAGMK;SAHNP,LAGUQ;AAHV,AAIE,oBAAMF;AAAN,AACE,IAAAG,qBAAa,iBAAAE,oBAAKH;AAAL,AAAA,GAAAG;AAAQ,IAAAC,WAAW,CAACN,kCAAAA,qCAAAA,LAAEC,iBAAAA;IAAdM,WAAiBL;AAAjB,AAAA,kHAAAI,SAAAC,4CAAAD,SAAAC,xKAACR,sDAAAA,yEAAAA;;AAATM;;;AAAb,AAAA,oBAAAF;AAAA,UAAAA,NAASC;AAAT,AACE,OAACI,8CAAMR,EAAEC,EAAEG;;AACX,IAAMA,MAAI,AAACK,+CAAOT,EAAEC;AAApB,AACE,GAAU,AAACS,uBAAON;AAAlB;;AAAA,AACEA;;;;AALR;;;AAOF,yBAAA,zBAAMO,0DAASC;AAAf,AACE,OAAOC,2BAAyBD;;AAElC;;;;qBAAA,rBAAME,kDAGHC;AAHH,AAIE,GAAI,cAAAC,bAAUD;AACZ,QAAK,iBAAAE,WAAQ,AAACC,oBAAUH;AAAnB,AAAA,GAAA,CAAAE,YAAA;AAAA;;AAAsB,QAAAA,SAAA;;KAAW,AAACE,eAAKJ;;AAC5CA;;;AAEJ;;;;iCAAA,jCAAeK,0EAGZC,WAAWC,OAAMC;AAHpB,AAIE,IAAAlB,oBAEC,EAAI,SAAA,RAAOkB,kBAAK,CAAA,QAAmB,AAASF,kBAAW,OAAA,NAAKE;AAF7D,AAAA,GAAAlB;AAIC,IAAMmB,YAAU,AAAUH;IACpBI,OAAK,CAAGF,MAAI,AAAUD;AAD5B,AAEE,GAAM,CAAIG,QAAKD;AAAf,AACE,SAAI,CAAYC,SAAKD,gBACjB,CAAA,QAAmB,AAASH,kBAAWI;;AAF7C;;;AANHpB;;;AAUF;;;;0BAAA,1BAAcqB,4DAGXL,WAAWC;AAHd,AAIE,iBAAA,bAAOK;;AAAP,AACE,IAAMC,IAAE,AAAUP,mBAAWC,OAAMK;AAAnC,AACE,GAAM,MAAA,LAAIC;AAAV,AACE,GAAI,AAACR,+BAAaC,WAAWC,OAAMM;AACjCA;;AACA,eAAO,CAAGA,IAAE,AAAUN;;;;;AAH1B;;;;;AAKN,+BAAA,/BAAMO,sEAAkBC,gBAAgBR;AAAxC,AACE,IAAOD,aAAWS;;AAAlB,AACE,IAAMC,YAAU,AAAUV;AAA1B,AACE,IAAAlB,qBAAW,AAACuB,wBAAYL,WAAWC;AAAnC,AAAA,oBAAAnB;AAAA,QAAAA,JAASyB;AAAT,AACE,eAAO,iBAAMI,MAAI,CAAGJ,IAAE,AAAUN;AAAzB,AACE,mDAAK,EAAI,CAAGU,MAAID,YACT,6CAAK,qBAAA,rBAAYV,yBAAaO,gDACzB,AAASP,kBAAW,OAAA,NAAKW,uBAC9B,qBAAA,rBAAYX,yBAAa,KAAA,JAAKO;;;;;AAC9CP","names":["p__71066","vec__71067","seq__71068","cljs.core/seq","first__71069","cljs.core/first","cljs.core/next","dommy.utils/dissoc-in","m","k","ks","temp__5733__auto__","res","and__4210__auto__","G__71070","G__71071","cljs.core.assoc","cljs.core.dissoc","cljs.core/empty?","dommy.utils/->Array","array-like","js/Array.prototype.slice","dommy.utils/as-str","s","cljs.core/Keyword","G__71076","cljs.core/namespace","cljs.core/name","dommy.utils/class-match?","class-name","class","idx","total-len","stop","dommy.utils/class-index","start-from","i","dommy.utils/remove-class-str","init-class-name","class-len","end"],"sourcesContent":["(ns dommy.utils)\n\n(defn dissoc-in\n  \"Dissociate this keyseq from m, removing any empty maps created as a result\n   (including at the top-level).\"\n  [m [k & ks]]\n  (when m\n    (if-let [res (and ks (dissoc-in (m k) ks))]\n      (assoc m k res)\n      (let [res (dissoc m k)]\n        (when-not (empty? res)\n          res)))))\n\n(defn ->Array [array-like]\n  (.call js/Array.prototype.slice array-like))\n\n(defn as-str\n  \"Coerces strings and keywords to strings, while preserving namespace of\n   namespaced keywords\"\n  [s]\n  (if (keyword? s)\n    (str (some-> (namespace s) (str \"/\")) (name s))\n    s))\n\n(defn ^boolean class-match?\n  \"Does `class-name` string have class starting at index idx.\n   only will be used when Element::classList doesn't exist\"\n  [class-name class idx]\n  (and\n   ;; start\n   (or (zero? idx) (identical? \\space (.charAt class-name (dec idx))))\n   ;; stop\n   (let [total-len (.-length class-name)\n         stop (+ idx (.-length class))]\n     (when (<= stop total-len)\n       (or (identical? stop total-len)\n           (identical? \\space (.charAt class-name stop)))))))\n\n(defn ^number class-index\n  \"Finds the index of class in a space-delimited class-name\n    only will be used when Element::classList doesn't exist\"\n  [class-name class]\n  (loop [start-from 0]\n    (let [i (.indexOf class-name class start-from)]\n      (when (>= i 0)\n        (if (class-match? class-name class i)\n          i\n          (recur (+ i (.-length class))))))))\n\n(defn remove-class-str [init-class-name class]\n  (loop [class-name init-class-name]\n    (let [class-len (.-length class-name)]\n      (if-let [i (class-index class-name class)]\n        (recur (let [end (+ i (.-length class))]\n                 (str (if (< end class-len)\n                        (str (.substring class-name 0 i)\n                             (.substr class-name (inc end)))\n                        (.substring class-name 0 (dec i))))))\n        class-name))))\n"]}