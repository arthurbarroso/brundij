{"version":3,"sources":["stylefy/reagent/dom.cljs"],"mappings":"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","names":["stylefy.reagent.dom/styles-in-dom","cljs.core.atom","stylefy.reagent.dom/dom-update-requested?","stylefy.reagent.dom/styles-as-css","stylefy.reagent.dom/keyframes-in-use","stylefy.reagent.dom/font-faces-in-use","stylefy.reagent.dom/custom-tags-in-use","stylefy.reagent.dom/custom-classes-in-use","stylefy.reagent.dom/style-by-hash","style-hash","cljs.core/deref","cljs.core.get","stylefy.reagent.dom/update-style-tags!","node-stylefy","node-stylefy-constant","styles-in-css","cljs.core.map","cljs.core.comp","cljs.core/keys","keyframes-in-css","cljs.core/vals","font-faces-in-use","custom-tags-in-use","custom-classes-in-use","new-style-constant-css","cljs.core.apply","cljs.core/str","cljs.core.concat","new-style-css","cljs.core._EQ_","dommy.core/text","dommy.core/set-text!","stylefy.reagent.dom/mark-all-styles-added-in-dom!","seq__72222","cljs.core/seq","chunk__72223","count__72224","i__72225","temp__5735__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/reset!","stylefy.reagent.dom/update-dom","stylefy.impl.dom/get-stylefy-node","stylefy.impl.dom/stylefy-node-id","stylefy.impl.dom/stylefy-base-node","stylefy.impl.dom/stylefy-instance-id","stylefy.impl.dom/stylefy-constant-node-id","and__4210__auto__","e72228","stylefy.impl.cache.cache_styles","e","stylefy.impl.log/warn","stylefy.impl.cache.clear_styles","stylefy.impl.log/error","stylefy.reagent.dom/update-dom-if-requested","stylefy.reagent.dom/request-asynchronous-dom-update","stylefy.impl.state/stylefy-initialised?","c__56789__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__56790__auto__","switch__56661__auto__","state_72233","state_val_72234","inst_72231","cljs.core.async.impl.ioc-helpers/return-chan","statearr-72235","state-machine__56662__auto__","ret-value__56663__auto__","result__56664__auto__","cljs.core/keyword-identical?","ex__56665__auto__","e72236","statearr-72237","statearr-72238","state__56791__auto__","statearr-72241","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","stylefy.reagent.dom/load-cache","cached-styles","stylefy.impl.cache/read-cache-value","stylefy.impl.cache/cache-key-styles","or__4212__auto__","cljs.core/merge","p1__72242#","reagent.core.atom","p__72243","map__72244","cljs.core/--destructure-map","stylefy.reagent.dom/add-style","css","hash","_style","js/Error","style-to-be-saved","cljs.core.swap_BANG_","cljs.core/assoc","stylefy.reagent.dom/style-in-dom?","cljs.core/boolean","stylefy.reagent.dom/add-keyframes","identifier","keyframes-as-css","stylefy.reagent.dom/add-font-face","font-faces-as-css","cljs.core/conj","stylefy.reagent.dom/add-tag","tag-css","stylefy.reagent.dom/add-class","class-as-css","stylefy.reagent.dom/load-uninitialised-styles","uninitialised-styles","seq__72245","chunk__72246","count__72247","i__72248","tag","seq__72249","chunk__72250","count__72251","i__72252","class","seq__72254","chunk__72255","count__72256","i__72257","vec__72268","cljs.core.nth","vec__72272","keyframes","seq__72275","chunk__72276","count__72277","i__72278","font-face","seq__72282","chunk__72283","count__72284","i__72285","style","this__4461__auto__","k__4462__auto__","this__4463__auto__","k72287","else__4464__auto__","G__72291","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","cljs.core.reduce","ret__4484__auto__","p__72292","vec__72293","k__4485__auto__","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/pr-sequential-writer","G__72286","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this72288","other72289","cljs.core/PROTOCOL_SENTINEL","this__4471__auto__","k__4472__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4468__auto__","this__4469__auto__","k__4470__auto__","pred__72296","expr__72297","cljs.core.assoc","this__4474__auto__","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","stylefy.reagent.dom/ReagentDom","this__4505__auto__","cljs.core/List","writer__4506__auto__","cljs.core/-write","G__72290","extmap__4501__auto__","G__72299","cljs.core/record?","stylefy.reagent.dom/->ReagentDom","stylefy.reagent.dom/map->ReagentDom","this","tag-as-css","font-face-as-css"],"sourcesContent":["(ns stylefy.reagent.dom\n  (:require [dommy.core :as dommy]\n            [cljs.core.async :as async] ; Mandatory for running tests\n            [reagent.core :as r]\n            [stylefy.impl.cache :as cache]\n            [stylefy.impl.log :as log]\n            [stylefy.impl.dom :as dom]\n            [stylefy.impl.state :as state])\n  (:require-macros\n    [cljs.core.async.macros :refer [go]]))\n\n(def styles-in-dom (atom {})) ; style hash -> r/atom with boolean value\n(def ^:private dom-update-requested? (atom false))\n(def styles-as-css (atom {})) ; style hash -> map containing keys: :css\n(def keyframes-in-use (atom {})) ; keyframe identifier -> map containing keys: :css\n(def font-faces-in-use (atom [])) ; Vector of maps containing keys: :css\n(def custom-tags-in-use (atom [])) ; Vector of maps containing keys: :css\n(def custom-classes-in-use (atom [])) ; Vector of maps containing keys: :css\n\n(defn style-by-hash [style-hash]\n  (when style-hash\n    (get @styles-as-css style-hash)))\n\n(defn- update-style-tags!\n  [node-stylefy node-stylefy-constant]\n  (let [styles-in-css (map (comp :css style-by-hash) (keys @styles-as-css))\n        keyframes-in-css (map :css (vals @keyframes-in-use))\n        font-faces-in-use (map :css @font-faces-in-use)\n        custom-tags-in-use (map :css @custom-tags-in-use)\n        custom-classes-in-use (map :css @custom-classes-in-use)\n        new-style-constant-css (apply str (concat font-faces-in-use\n                                                  keyframes-in-css\n                                                  custom-tags-in-use\n                                                  custom-classes-in-use))\n        new-style-css (apply str styles-in-css)]\n    ; Do not update this node contents if there are no new styles to be added.\n    ; This is important, because even if setting the same contents should have no effect,\n    ; it can cause font flickering in some browsers.\n    (when-not (= (dommy/text node-stylefy-constant) new-style-constant-css)\n      (dommy/set-text! node-stylefy-constant new-style-constant-css))\n\n    (dommy/set-text! node-stylefy new-style-css)))\n\n(defn- mark-all-styles-added-in-dom! []\n  (doseq [style-hash (keys @styles-in-dom)]\n    (reset! (get @styles-in-dom style-hash) true)))\n\n(defn update-dom\n  []\n  (let [node-stylefy (dom/get-stylefy-node dom/stylefy-node-id @dom/stylefy-base-node @dom/stylefy-instance-id)\n        node-stylefy-constant (dom/get-stylefy-node dom/stylefy-constant-node-id @dom/stylefy-base-node @dom/stylefy-instance-id)]\n    (if (and node-stylefy node-stylefy-constant)\n      (do (update-style-tags! node-stylefy node-stylefy-constant)\n          (reset! dom-update-requested? false)\n\n          (try\n            (cache/cache-styles @styles-as-css @dom/stylefy-instance-id)\n            (catch :default e\n              (log/warn (str \"Unable to cache styles, error: \" e))\n              (cache/clear-styles @dom/stylefy-instance-id)\n              e))\n\n          (mark-all-styles-added-in-dom!))\n      (log/error \"stylefy is unable to find the required <style> tags!\"))))\n\n(defn update-dom-if-requested []\n  (when @dom-update-requested?\n    (update-dom)))\n\n(defn- request-asynchronous-dom-update []\n  (when @state/stylefy-initialised?\n    (when-not @dom-update-requested?\n      (reset! dom-update-requested? true)\n      (go\n        (update-dom))\n      nil)))\n\n(defn load-cache []\n  (when-let [cached-styles (cache/read-cache-value\n                             (cache/cache-key-styles @dom/stylefy-instance-id))]\n    (reset! styles-as-css (or cached-styles {}))\n    (reset! styles-in-dom (apply merge (map\n                                         ; Note: r/atom, to be usable in component render methods.\n                                         #(-> {% (r/atom false)})\n                                         (keys cached-styles))))))\n\n(defn add-style\n  \"Stores the style in an atom. The style is going to be added into the DOM soon.\"\n  [{:keys [css hash] :as _style}]\n  (assert css \"Unable to save empty style!\")\n  (assert hash \"Unable to save style without hash!\")\n  (let [style-to-be-saved {:css css}]\n    (swap! styles-as-css assoc hash style-to-be-saved)\n    (swap! styles-in-dom assoc hash (r/atom false)) ; Note: r/atom, to be usable in component render methods.\n    (request-asynchronous-dom-update)))\n\n(defn style-in-dom? [style-hash]\n  ; Note: This function dereferences Reagent atom when reading style-hash atom.\n  ; If called inside a component render method (via use-style), it causes the component to re-render\n  ; itself if the \"CSS in DOM\" state of this specific style hash is changed.\n  (boolean @(get @styles-in-dom style-hash)))\n\n(defn add-keyframes [identifier keyframes-as-css]\n  (swap! keyframes-in-use assoc identifier {:css keyframes-as-css})\n  (request-asynchronous-dom-update)\n  nil)\n\n(defn add-font-face [font-faces-as-css]\n  (swap! font-faces-in-use conj {:css font-faces-as-css})\n  (request-asynchronous-dom-update)\n  nil)\n\n(defn add-tag [tag-css]\n  (swap! custom-tags-in-use conj {:css tag-css})\n  (request-asynchronous-dom-update)\n  nil)\n\n(defn add-class [class-as-css]\n  (swap! custom-classes-in-use conj {:css class-as-css})\n  (request-asynchronous-dom-update)\n  nil)\n\n(defn load-uninitialised-styles [uninitialised-styles]\n  (doseq [tag (:tag uninitialised-styles)]\n    (add-tag tag))\n\n  (doseq [class (:class uninitialised-styles)]\n    (add-class class))\n\n  (doseq [[identifier keyframes] (:keyframes uninitialised-styles)]\n    (add-keyframes identifier keyframes))\n\n  (doseq [font-face (:font-face uninitialised-styles)]\n    (add-font-face font-face))\n\n  (doseq [style (:style uninitialised-styles)]\n    (add-style style)))\n\n(defrecord ReagentDom []\n  dom/Dom\n  (load-uninitialised-styles [this uninitialised-styles] (load-uninitialised-styles uninitialised-styles))\n  (load-cache [this] (load-cache))\n\n  (add-style [this style] (add-style style))\n  (add-class [this class-as-css] (add-class class-as-css))\n  (add-tag [this tag-as-css] (add-tag tag-as-css))\n  (add-font-face [this font-face-as-css] (add-font-face font-face-as-css))\n  (add-keyframes [this identifier keyframes-as-css] (add-keyframes identifier keyframes-as-css))\n\n  (update-dom [this] (update-dom))\n  (update-dom-if-needed [this] (update-dom-if-requested))\n  (style-in-dom? [this style-hash] (style-in-dom? style-hash))\n  (style-by-hash [this style-hash] (style-by-hash style-hash)))"]}