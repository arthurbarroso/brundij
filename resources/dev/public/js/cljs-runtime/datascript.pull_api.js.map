{"version":3,"sources":["datascript/pull_api.cljc"],"mappings":"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","names":["datascript.pull-api/into!","transient-coll","items","cljs.core.reduce","cljs.core/conj!","datascript.pull-api/+default-limit+","datascript.pull-api/initial-frame","pattern","eids","multi?","cljs.core/seq","cljs.core/transient","datascript.pull-api/subpattern-frame","attr","cljs.core.assoc","datascript.pull-api/reset-frame","frame","kvps","G__63968","cljs.core.conj_BANG_","datascript.pull-api/push-recursion","rec","eid","map__63969","cljs.core/--destructure-map","cljs.core.get","depth","seen","cljs.core.update","cljs.core.fnil","cljs.core/inc","cljs.core.conj","datascript.pull-api/seen-eid?","cljs.core.get_in","cljs.core/contains?","datascript.pull-api/pull-seen-eid","frames","datascript.pull-api/single-frame-result","key","G__63981","cljs.core/persistent!","datascript.pull-api/recursion-result","datascript.pull-api/recursion-frame","parent","p__64004","vec__64005","seq__64006","first__64007","cljs.core/first","cljs.core/next","datascript.pull-api/pull-recursion-frame","db","temp__5733__auto__","cljs.core/rest","or__4212__auto__","results","G__64009","datascript.pull-api/recurse-attr","map__64014","recursion","cljs.core._EQ_","datascript.pull-parser/PullSpec","datascript.pull-api/expand-frame","attr-key","p__64016","vec__64017","seq__64018","first__64019","datascript.pull-api/pull-attr-datoms","forward?","datoms","opts","limit","found","cljs.core/not-empty","G__64020","cljs.core.into","cljs.core.take","ref?","datascript.db/ref?","component?","datascript.db/component?","datascript.db/multival?","datom-val","d","cljs.core.mapv","and__4210__auto__","as-value","G__64024","p1__64015#","cljs.core.comp","cljs.core/PersistentHashMap","single?","G__64025","cljs.core.map","cljs.core/assoc!","G__64026","datascript.pull-api/pull-attr","spec","vec__64027","cljs.core.nth","datascript.db/-datoms","datascript.pull-api/filter-reverse-attrs","cljs.core.filter","p__64034","vec__64039","k","v","cljs.core.not_EQ_","datascript.pull-api/expand-reverse-subpattern-frame","rattrs","datascript.pull-api/expand-result","p__64048","vec__64049","seq__64050","first__64051","datascript.pull-api/pull-expand-reverse-frame","p__64052","vec__64053","seq__64054","first__64055","datascript.pull-api/pull-expand-frame","datoms-by-attr","vec__64056","datascript.pull-api/pull-wildcard-expand","map__64063","cljs.core/group-by","G__64064","datascript.pull-api/pull-wildcard","map__64065","p__64066","vec__64067","seq__64068","first__64069","datascript.pull-api/pull-pattern-frame","specs","new-frames","datascript.pull-api/pull-pattern","G__64078","cljs.core/Keyword","js/Error","vec__64080","seq__64081","first__64082","f","remaining","result","G__64083","cljs.core/not","G__64084","datascript.pull-api/pull-spec","p1__64086#","datascript.db/entid-strict","cljs.core/List","datascript.pull-api/pull","selector","datascript.db/db?","datascript.pull-parser/parse-pull","datascript.pull-api/pull-many"],"sourcesContent":["(ns ^:no-doc datascript.pull-api\n  (:require\n    [datascript.db :as db]\n    [datascript.pull-parser :as dpp #?@(:cljs [:refer [PullSpec]])])\n    #?(:clj\n      (:import\n        [datascript.db Datom]\n        [datascript.pull_parser PullSpec])))\n\n(defn- into!\n  [transient-coll items]\n  (reduce conj! transient-coll items))\n\n(def ^:private ^:const +default-limit+ 1000)\n\n(defn- initial-frame\n  [pattern eids multi?]\n  {:state     :pattern\n   :pattern   pattern\n   :wildcard? (:wildcard? pattern)\n   :specs     (-> pattern :attrs seq)\n   :results   (transient [])\n   :kvps      (transient {})\n   :eids      eids\n   :multi?    multi?\n   :recursion {:depth {} :seen #{}}})\n\n(defn- subpattern-frame\n  [pattern eids multi? attr]\n  (assoc (initial-frame pattern eids multi?) :attr attr))\n\n(defn- reset-frame\n  [frame eids kvps]\n  (let [pattern (:pattern frame)]\n    (assoc frame\n           :eids      eids\n           :specs     (seq (:attrs pattern))\n           :wildcard? (:wildcard? pattern)\n           :kvps      (transient {})\n           :results   (cond-> (:results frame)\n                        (seq kvps) (conj! kvps)))))\n\n(defn- push-recursion\n  [rec attr eid]\n  (let [{:keys [depth seen]} rec]\n    (assoc rec\n           :depth (update depth attr (fnil inc 0))\n           :seen (conj seen eid))))\n\n(defn- seen-eid?\n  [frame eid]\n  (-> frame\n      (get-in [:recursion :seen] #{})\n      (contains? eid)))\n\n(defn- pull-seen-eid\n  [frame frames eid]\n  (when (seen-eid? frame eid)\n    (conj frames (update frame :results conj! {:db/id eid}))))\n\n(defn- single-frame-result\n  [key frame]\n  (some-> (:kvps frame) persistent! (get key)))\n\n(defn- recursion-result [frame]\n  (single-frame-result ::recursion frame))\n\n(defn- recursion-frame\n  [parent eid]\n  (let [attr (:attr parent)\n        rec  (push-recursion (:recursion parent) attr eid)]\n    (assoc (subpattern-frame (:pattern parent) [eid] false ::recursion)\n           :recursion rec)))\n\n(defn- pull-recursion-frame\n  [db [frame & frames]]\n  (if-let [eids (seq (:eids frame))]\n    (let [frame  (reset-frame frame (rest eids) (recursion-result frame))\n          eid    (first eids)]\n      (or (pull-seen-eid frame frames eid)\n          (conj frames frame (recursion-frame frame eid))))\n    (let [kvps    (recursion-result frame)\n          results (cond-> (:results frame)\n                    (seq kvps) (conj! kvps))]\n      (conj frames (assoc frame :state :done :results results)))))\n\n(defn- recurse-attr\n  [db attr multi? eids eid parent frames]\n  (let [{:keys [recursion pattern]} parent\n        depth  (-> recursion (get :depth) (get attr 0))]\n    (if (-> pattern :attrs (get attr) :recursion (= depth))\n      (conj frames parent)\n      (pull-recursion-frame\n       db\n       (conj frames parent\n             {:state :recursion :pattern pattern\n              :attr attr :multi? multi? :eids eids\n              :recursion recursion\n              :results (transient [])})))))\n\n(let [pattern (PullSpec. true {})]\n  (defn- expand-frame\n    [parent eid attr-key multi? eids]\n    (let [rec (push-recursion (:recursion parent) attr-key eid)]\n      (-> pattern\n          (subpattern-frame eids multi? attr-key)\n          (assoc :recursion rec)))))\n\n(defn- pull-attr-datoms\n  [db attr-key attr eid forward? datoms opts [parent & frames]]\n  (let [limit (get opts :limit +default-limit+)\n        attr-key (or (:as opts) attr-key)\n        found (not-empty\n               (cond->> datoms\n                 limit (into [] (take limit))))]\n    (if found\n      (let [ref?       (db/ref? db attr)\n            component? (and ref? (db/component? db attr))\n            multi?     (if forward? (db/multival? db attr) (not component?))\n            datom-val  (if forward? (fn [d] (.-v ^Datom d)) (fn [d] (.-e ^Datom d)))]\n        (cond\n          (contains? opts :subpattern)\n          (->> (subpattern-frame (:subpattern opts)\n                                 (mapv datom-val found)\n                                 multi? attr-key)\n               (conj frames parent))\n\n          (contains? opts :recursion)\n          (recurse-attr db attr-key multi?\n                        (mapv datom-val found)\n                        eid parent frames)\n\n          (and component? forward?)\n          (->> found\n               (mapv datom-val)\n               (expand-frame parent eid attr-key multi?)\n               (conj frames parent))\n          \n          :else \n          (let [as-value  (cond->> datom-val\n                            ref? (comp #(hash-map :db/id %)))\n                single?   (not multi?)]\n            (->> (cond-> (into [] (map as-value) found)\n                   single? first)\n                 (update parent :kvps assoc! attr-key)\n                 (conj frames)))))\n      (->> (cond-> parent\n             (contains? opts :default)\n             (update :kvps assoc! attr-key (:default opts)))\n           (conj frames)))))\n\n(defn- pull-attr\n  [db spec eid frames]\n  (let [[attr-key opts] spec]\n    (if (= :db/id attr-key)\n      (if (not-empty (db/-datoms db :eavt [eid]))\n        (conj (rest frames)\n              (update (first frames) :kvps assoc! :db/id eid))\n        frames)\n      (let [attr     (:attr opts)\n            forward? (= attr-key attr)\n            results  (if forward?\n                       (db/-datoms db :eavt [eid attr])\n                       (db/-datoms db :avet [attr eid]))]\n        (pull-attr-datoms db attr-key attr eid forward?\n                          results opts frames)))))\n\n(def ^:private filter-reverse-attrs\n  (filter (fn [[k v]] (not= k (:attr v)))))\n\n(defn- expand-reverse-subpattern-frame\n  [parent eid rattrs]\n  (-> (:pattern parent)\n      (assoc :attrs rattrs :wildcard? false)\n      (subpattern-frame [eid] false ::expand-rev)))\n\n(defn- expand-result\n  [frames kvps]\n  (->> kvps\n       (persistent!)\n       (update (first frames) :kvps into!)\n       (conj (rest frames))))\n\n(defn- pull-expand-reverse-frame\n  [db [frame & frames]]\n  (->> (or (single-frame-result ::expand-rev frame) {})\n       (into! (:expand-kvps frame))\n       (expand-result frames)))\n\n(defn- pull-expand-frame\n  [db [frame & frames]]\n  (if-let [datoms-by-attr (seq (:datoms frame))]\n    (let [[attr datoms] (first datoms-by-attr)\n          opts          (-> frame\n                            (get-in [:pattern :attrs])\n                            (get attr {}))]\n      (pull-attr-datoms db attr attr (:eid frame) true datoms opts\n                        (conj frames (update frame :datoms rest))))\n    (if-let [rattrs (->> (get-in frame [:pattern :attrs])\n                         (into {} filter-reverse-attrs)\n                         not-empty)]\n      (let [frame  (assoc frame\n                          :state       :expand-rev\n                          :expand-kvps (:kvps frame)\n                          :kvps        (transient {}))]\n        (->> rattrs\n             (expand-reverse-subpattern-frame frame (:eid frame))\n             (conj frames frame)))\n      (expand-result frames (:kvps frame)))))\n\n(defn- pull-wildcard-expand\n  [db frame frames eid pattern]\n  (let [datoms (group-by (fn [d] (.-a ^Datom d)) (db/-datoms db :eavt [eid]))\n        {:keys [attr recursion]} frame\n        rec (cond-> recursion\n              (some? attr) (push-recursion attr eid))]\n    (->> {:state :expand :kvps (transient {:db/id eid})\n          :eid eid :pattern pattern :datoms (seq datoms)\n          :recursion rec}\n         (conj frames frame)\n         (pull-expand-frame db))))\n\n(defn- pull-wildcard\n  [db frame frames]\n  (let [{:keys [eid pattern]} frame]\n    (or (pull-seen-eid frame frames eid)\n        (pull-wildcard-expand db frame frames eid pattern))))\n\n(defn- pull-pattern-frame\n  [db [frame & frames]]\n  (if-let [eids (seq (:eids frame))]\n    (if (:wildcard? frame)\n      (pull-wildcard db\n                     (assoc frame\n                            :specs []\n                            :eid (first eids)\n                            :wildcard? false)\n                     frames)\n      (if-let [specs (seq (:specs frame))]\n        (let [spec       (first specs)\n              pattern    (:pattern frame)\n              new-frames (conj frames (assoc frame :specs (rest specs)))]\n          (pull-attr db spec (first eids) new-frames))\n        (->> frame :kvps persistent! not-empty\n             (reset-frame frame (rest eids))\n             (conj frames)\n             (recur db))))\n    (conj frames (assoc frame :state :done))))\n\n(defn- pull-pattern\n  [db frames]\n  (case (:state (first frames))\n    :expand     (recur db (pull-expand-frame db frames))\n    :expand-rev (recur db (pull-expand-reverse-frame db frames))\n    :pattern    (recur db (pull-pattern-frame db frames))\n    :recursion  (recur db (pull-recursion-frame db frames))\n    :done       (let [[f & remaining] frames\n                      result (cond-> (persistent! (:results f))\n                               (not (:multi? f)) first)]\n                  (if (seq remaining)\n                    (->> (cond-> (first remaining)\n                           result (update :kvps assoc! (:attr f) result))\n                         (conj (rest remaining))\n                         (recur db))\n                    result))))\n\n(defn pull-spec\n  [db pattern eids multi?]\n  (let [eids (into [] (map #(db/entid-strict db %)) eids)]\n    (pull-pattern db (list (initial-frame pattern eids multi?)))))\n\n(defn pull [db selector eid]\n  {:pre [(db/db? db)]}\n  (pull-spec db (dpp/parse-pull selector) [eid] false))\n\n(defn pull-many [db selector eids]\n  {:pre [(db/db? db)]}\n  (pull-spec db (dpp/parse-pull selector) eids true))\n"]}