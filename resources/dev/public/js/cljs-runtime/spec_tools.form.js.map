{"version":3,"sources":["spec_tools/form.cljc"],"mappings":";AAGA,GAAA,QAAAA,uCAAAC,4CAAAC;AAAA;AAAA,AAAA,+BAAA,iBAAAC,6BAAA,AAAAC,6CAAA,1HAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,4DAAA,+FAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,kBAAA,gBACU,WAAKE;AAAL,AAAQ,GACE,6CAAA,3CAAI,AAACC,mCAAmBD,UAAG,AAACE,qBAAKF,QAAG,AAACG,qBAAKH;AAD5C;;AAAA,oBAEE,iBAAAI,mBAAI,AAACC,4BAAQL;AAAb,AAAA,oBAAAI;AAAAA;;AAAgB,OAACE,6BAASN;;;AAF5B;;AAAA,AAGQA;;;;GAJ1B,uFAAAN,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAOA,AAAAM,yEAAA,mFAAA,WAAgCC;AAAhC,AAAmC,OAACO,qBAAOP;;AAC3C,AAAAD,yEAAA,0FAAA,WAAoCC;AAApC,AAAuCA;;AACvC,AAAAD,yEAAA,uFAAA,WAAmCS;AAAnC,AAAA;;AAEA,AAAAT,8FAAA,rBAAwBU,gCAAMD;AAA9B,AAAA,AAAA;;AACA,AAAAT,+FAAA,tBAAwBW,iCAAOF;AAA/B,AAAA,AAAA;;AACA,AAAAT,iGAAA,xBAAwBY,mCAASH;AAAjC,AAAA,AAAA;;AACA,AAAAT,kGAAA,zBAAwBa,oCAAUJ;AAAlC,AAAA,AAAA;;AACA,AAAAT,8FAAA,rBAAwBc,gCAAML;AAA9B,AAAA,AAAA;;AACA,AAAAT,kGAAA,zBAAwBe,oCAAUN;AAAlC,AAAA,AAAA;;AACA,AAAAT,kGAAA,zBAAwBgB,oCAAUP;AAAlC,AAAA,AAAA;;AACA,AAAAT,kGAAA,zBAAwBiB,oCAAUR;AAAlC,AAAA,AAAA;;AACA,AAAAT,gGAAA,vBAAwBkB,kCAAQT;AAAhC,AAAA,AAAA;;AACA,AAAAT,iGAAA,xBAAwBmB,mCAASV;AAAjC,AAAA,AAAA;;AACA,AAAAT,kGAAA,zBAAwBoB,oCAAUX;AAAlC,AAAA,AAAA;;AACA,AAAAT,iGAAA,xBAAwBqB,mCAASZ;AAAjC,AAAA,AAAA;;AACA,AAAAT,gGAAA,vBAAwBsB,kCAAQb;AAAhC,AAAA,AAAA;;AACA,AAAAT,uGAAA,9BAAwBuB,yCAAed;AAAvC,AAAA,AAAA;;AACA,AAAAT,0GAAA,jCAAwBwB,4CAAkBf;AAA1C,AAAA,AAAA;;AACA,AAAAT,kGAAA,zBAAwByB,oCAAUhB;AAAlC,AAAA,AAAA;;AACA,AAAAT,yGAAA,hCAAwB0B,2CAAiBjB;AAAzC,AAAA,AAAA;;AACA,AAAAT,4GAAA,nCAAwBE,8CAAoBO;AAA5C,AAAA,AAAA;;AACA,AAAAT,iGAAA,xBAAwB2B,mCAASlB;AAAjC,AAAA,AAAA;;AACA,AAAAT,wGAAA,/BAAwB4B,0CAAgBnB;AAAxC,AAAA,AAAA;;AACA,AAAAT,2GAAA,lCAAwB6B,6CAAmBpB;AAA3C,AAAA,AAAA;;AACA,AAAAT,+FAAA,tBAAwB8B,iCAAOrB;AAA/B,AAAA,AAAA;;AAGA,AAAAT,+FAAA,tBAAwB+B,iCAAOtB;AAA/B,AAAA,AAAA;;AACA,AAAAT,kGAAA,zBAAwBgC,oCAAUvB;AAAlC,AAAA,AAAA;;AACA,AAAAT,kGAAA,zBAAwBiC,oCAAUxB;AAAlC,AAAA,AAAA;;AACA,AAAAT,8FAAA,rBAAwBkC,gCAAMzB;AAA9B,AAAA,AAAA;;AACA,AAAAT,iGAAA,xBAAwBmC,mCAAS1B;AAAjC,AAAA,AAAA;;AACA,AAAAT,+FAAA,tBAAwBoC,iCAAO3B;AAA/B,AAAA,AAAA;;AACA,AAAAT,8FAAA,rBAAwBG,gCAAMM;AAA9B,AAAA,AAAA;;AACA,AAAAT,+FAAA,tBAAwBqC,iCAAO5B;AAA/B,AAAA,AAAA;;AACA,AAAAT,8FAAA,rBAAwBI,gCAAMK;AAA9B,AAAA,AAAA;;AACA,AAAAT,8FAAA,rBAAwBsC,gCAAM7B;AAA9B,AAAA,AAAA;;AACA,AAAAT,gGAAA,vBAAwBuC,kCAAQ9B;AAAhC,AAAA,AAAA;;AACA,AAAAT,+FAAA,tBAAwBwC,iCAAO/B;AAA/B,AAAA,AAAA;;AACA,AAAAT,+FAAA,tBAAwByC,iCAAOhC;AAA/B,AAAA,AAAA;;AAEA,AAAAT,+FAAA,tBAAwB0C,iCAAOjC;AAA/B,AAAA,AAAA;;AACA,AAAAT,gGAAA,vBAAwB2C,kCAAQlC;AAAhC,AAAA,AAAA;;AACA,AAAAT,sGAAA,7BAAwB4C,wCAAcnC;AAAtC,AAAA,AAAA;;AACA,AAAAT,qGAAA,5BAAwB6C,uCAAapC;AAArC,AAAA,AAAA","names":["js/spec-tools","js/spec-tools.form","js/spec-tools.form.resolve-form","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__77527","cljs.core/MultiFn","cljs.core.symbol","spec-tools.form/resolve-form","x","cljs.core/qualified-keyword?","cljs.core/seq?","cljs.core/set?","or__4212__auto__","cljs.spec.alpha/spec?","cljs.spec.alpha/regex?","cljs.spec.alpha/form","_","cljs.core/any?","cljs.core/some?","cljs.core/number?","cljs.core/integer?","cljs.core/int?","cljs.core/pos-int?","cljs.core/neg-int?","cljs.core/nat-int?","cljs.core/float?","cljs.core/double?","cljs.core/boolean?","cljs.core/string?","cljs.core/ident?","cljs.core/simple-ident?","cljs.core/qualified-ident?","cljs.core/keyword?","cljs.core/simple-keyword?","cljs.core/symbol?","cljs.core/simple-symbol?","cljs.core/qualified-symbol?","cljs.core/uuid?","cljs.core/inst?","cljs.core/seqable?","cljs.core/indexed?","cljs.core/map?","cljs.core/vector?","cljs.core/list?","cljs.core/char?","cljs.core/nil?","cljs.core/false?","cljs.core/true?","cljs.core/zero?","cljs.core/coll?","cljs.core/empty?","cljs.core/associative?","cljs.core/sequential?"],"sourcesContent":["(ns spec-tools.form\n  (:require [clojure.spec.alpha :as s]))\n\n(defmulti resolve-form\n          (fn [x] (cond\n                    (or (qualified-keyword? x) (seq? x) (set? x)) ::identity\n                    (or (s/spec? x) (s/regex? x)) ::spec\n                    :else x))\n          :default ::default)\n\n(defmethod resolve-form ::spec [x] (s/form x))\n(defmethod resolve-form ::identity [x] x)\n(defmethod resolve-form ::default [_] ::s/unknown)\n\n(defmethod resolve-form any? [_] `any?)\n(defmethod resolve-form some? [_] `some?)\n(defmethod resolve-form number? [_] `number?)\n(defmethod resolve-form integer? [_] `integer?)\n(defmethod resolve-form int? [_] `int?)\n(defmethod resolve-form pos-int? [_] `pos-int?)\n(defmethod resolve-form neg-int? [_] `neg-int?)\n(defmethod resolve-form nat-int? [_] `nat-int?)\n(defmethod resolve-form float? [_] `float?)\n(defmethod resolve-form double? [_] `double?)\n(defmethod resolve-form boolean? [_] `boolean?)\n(defmethod resolve-form string? [_] `string?)\n(defmethod resolve-form ident? [_] `ident?)\n(defmethod resolve-form simple-ident? [_] `simple-ident?)\n(defmethod resolve-form qualified-ident? [_] `qualified-ident?)\n(defmethod resolve-form keyword? [_] `keyword?)\n(defmethod resolve-form simple-keyword? [_] `simple-keyword?)\n(defmethod resolve-form qualified-keyword? [_] `qualified-keyword?)\n(defmethod resolve-form symbol? [_] `symbol?)\n(defmethod resolve-form simple-symbol? [_] `simple-symbol?)\n(defmethod resolve-form qualified-symbol? [_] `qualified-symbol?)\n(defmethod resolve-form uuid? [_] `uuid?)\n#?(:clj (defmethod resolve-form uri? [_] `uri?))\n#?(:clj (defmethod resolve-form decimal? [_] `decimal?))\n(defmethod resolve-form inst? [_] `inst?)\n(defmethod resolve-form seqable? [_] `seqable?)\n(defmethod resolve-form indexed? [_] `indexed?)\n(defmethod resolve-form map? [_] `map?)\n(defmethod resolve-form vector? [_] `vector?)\n(defmethod resolve-form list? [_] `list?)\n(defmethod resolve-form seq? [_] `seq?)\n(defmethod resolve-form char? [_] `char?)\n(defmethod resolve-form set? [_] `set?)\n(defmethod resolve-form nil? [_] `nil?)\n(defmethod resolve-form false? [_] `false?)\n(defmethod resolve-form true? [_] `true?)\n(defmethod resolve-form zero? [_] `zero?)\n#?(:clj (defmethod resolve-form rational? [_] `rational?))\n(defmethod resolve-form coll? [_] `coll?)\n(defmethod resolve-form empty? [_] `empty?)\n(defmethod resolve-form associative? [_] `associative?)\n(defmethod resolve-form sequential? [_] `sequential?)\n#?(:clj (defmethod resolve-form ratio? [_] `ratio?))\n#?(:clj (defmethod resolve-form bytes? [_] `bytes?))\n"]}