{"version":3,"sources":["spec_tools/impl.cljc"],"mappings":"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","names":["spec-tools.impl/cljs-sym","x","cljs.core/map?","spec-tools.impl/clj-sym","cljs.core/var?","v","cljs.core.symbol","spec-tools.impl/->sym","spec-tools.impl/unfn","cljs?","expr","cljs.core/seq?","cljs.core/Symbol","cljs.core/first","cljs.core._EQ_","cljs.core/name","vec__77851","seq__77852","cljs.core/seq","first__77853","cljs.core/next","vec__77854","cljs.core.nth","s","form","cljs.core/rest","cljs.core.conj","clojure.walk/postwalk-replace","spec-tools.impl/polish","cljs.core/flatten","cljs.core.keep","spec-tools.impl/polish-un","G__77859","cljs.core.keyword","spec-tools.impl/un-key","G__77860","p__77861","map__77862","cljs.core/--destructure-map","cljs.core.get","spec-tools.impl/with-key->spec","req","req-un","opt","opt-un","data","key->spec","cljs.core.concat","cljs.core.map","cljs.core.juxt","cljs.core/identity","cljs.core.into","un-key->spec","cljs.core.assoc","cljs.core.merge","p__77863","map__77864","spec-tools.impl/with-real-keys","G__77865","cljs.core.update","cljs.core.partial","cljs.core/mapv","spec-tools.impl/parse-keys","m","G__77869","cljs.core.apply","cljs.core/hash-map","G__77870","p1__77866#","p1__77867#","p1__77868#","spec-tools.impl/extract-keys","map__77871","G__77872","spec-tools.impl/extract-pred-and-info","cljs.core.dissoc","spec-tools.impl/strip-fn-if-needed","head","cljs.core/count","spec-tools.impl/normalize-symbol","kw","G__77873","and__4210__auto__","cljs.core/namespace","spec-tools.impl/extract-form","spec","cljs.spec.alpha/form","spec-tools.impl/qualified-name","key","cljs.core/Keyword","temp__5733__auto__","nn","spec-tools.impl/nilable-spec?","cljs.core/boolean","G__77874","fexpr__77875","js/Error","spec-tools.impl/unwrap","coll","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","spec-tools.impl/deep-merge","seq77876","self__4806__auto__","values","cljs.core/every?","cljs.core/merge-with","cljs.core/coll?","cljs.core.reduce","cljs.core/into","cljs.core/last","spec-tools.impl/unlift-keys","ns-name","p__77877","vec__77878","acc","k","spec-tools.impl/register-spec!","cljs.spec.alpha/def-impl","spec-tools.impl/coll-of-spec","pred","type","spec-tools.form/resolve-form","cpred","cljs.core/set?","cljs.core/vector?","cljs.core.sequence","cljs.core/List","cljs.spec.alpha.every_impl","spec-tools.impl/map-of-spec","kpred","vpred","forms","tuple","cljs.spec.alpha.tuple_impl","_","p__77883","map__77884","spec-tools.impl/keys-spec","req-specs","opt-specs","req-keys","opt-keys","pred-exprs","p1__77881#","p1__77882#","cljs.core/contains?","pred-forms","cljs.core/vec","keys-pred","p","or__4212__auto__","cljs.core/reduced","cljs.spec.alpha/map-spec-impl","spec-tools.impl/nilable-spec","cljs.spec.alpha/nilable-impl","spec-tools.impl/or-spec","ks","cljs.core.mapv","preds","cljs.core/second","cljs.spec.alpha/or-spec-impl"],"sourcesContent":["(ns spec-tools.impl\n  (:refer-clojure :exclude [resolve])\n  #?(:cljs (:require-macros [spec-tools.impl :refer [resolve]]))\n  (:require\n    #?(:cljs [cljs.analyzer.api])\n    [clojure.spec.alpha :as s]\n    [spec-tools.form :as form]\n    [clojure.walk :as walk])\n  (:import\n    #?@(:clj\n        [(clojure.lang Var)])))\n\n#?(:clj\n   (defn in-cljs? [env]\n     (:ns env)))\n\n;; ClojureScript 1.9.655 and later have a resolve macro - maybe this can be\n;; eventually converted to use it.\n#?(:clj\n   (defmacro resolve\n     [env sym]\n     `(if (in-cljs? ~env)\n        ((clojure.core/resolve 'cljs.analyzer.api/resolve) ~env ~sym)\n        (clojure.core/resolve ~env ~sym))))\n\n(defn- cljs-sym [x]\n  (if (map? x)\n    (:name x)\n    x))\n\n(defn- clj-sym [x]\n  (if (var? x)\n    (let [^Var v x]\n      (symbol (str (.name (.ns v)))\n              (str (.sym v))))\n    x))\n\n(defn ->sym [x]\n  #?(:clj  (clj-sym x)\n     :cljs (cljs-sym x)))\n\n(defn- unfn [cljs? expr]\n  (if (clojure.core/and (seq? expr)\n                        (symbol? (first expr))\n                        (= \"fn*\" (name (first expr))))\n    (let [[[s] & form] (rest expr)]\n      (conj (walk/postwalk-replace {s '%} form) '[%] (if cljs? 'cljs.core/fn 'clojure.core/fn)))\n    expr))\n\n#?(:clj\n   (defn cljs-resolve [env symbol]\n     (clojure.core/or (->> symbol (resolve env) cljs-sym) symbol)))\n\n(defn polish [x]\n  (cond\n    (seq? x) (flatten (keep polish x))\n    (symbol? x) nil\n    :else x))\n\n(defn polish-un [x]\n  (some-> x polish name keyword))\n\n(defn un-key [x]\n  (some-> x name keyword))\n\n(defn with-key->spec [{:keys [req req-un opt opt-un] :as data}]\n  (let [key->spec (->> (concat opt req) (map (juxt identity identity)) (into {}))\n        un-key->spec (->> (concat opt-un req-un) (map (juxt un-key identity)) (into {}))]\n    (assoc data :key->spec (merge key->spec un-key->spec))))\n\n(defn with-real-keys [{:keys [req-un opt-un] :as data}]\n  (cond-> data\n          req-un (update :req-un (partial mapv un-key))\n          opt-un (update :opt-un (partial mapv un-key))))\n\n(defn parse-keys [form]\n  (let [m (some->> form (rest) (apply hash-map))]\n    (cond-> m\n            (:req m) (update :req #(->> % flatten (keep polish) (into [])))\n            (:req-un m) (update :req-un #(->> % flatten (keep polish) (into [])))\n            (:opt-un m) (update :opt-un #(->> % (keep polish) (into [])))\n            true (-> with-key->spec with-real-keys))))\n\n(defn extract-keys [form]\n  (let [{:keys [req opt req-un opt-un]} (some->> form (rest) (apply hash-map))]\n    (flatten (map polish (concat req opt req-un opt-un)))))\n\n#?(:clj\n   (defn resolve-form [env pred]\n     (let [cljs? (in-cljs? env)\n           res (if cljs? (partial cljs-resolve env) clojure.core/resolve)]\n       (->> pred\n            (walk/postwalk\n              (fn [x]\n                (if (symbol? x)\n                  (let [y (res x)\n                        -var-get (fn [v] (if cljs? @v (var-get v)))\n                        sym-or-x (fn [v] (or (->sym v) x))]\n                    (cond\n                      (var? y) (if (s/get-spec (-var-get y))\n                                 (-var-get y)\n                                 (sym-or-x y))\n                      (some? y) (sym-or-x y)\n                      :else x))\n                  x)))\n            (unfn cljs?)))))\n\n(defn extract-pred-and-info [x]\n  (if (map? x)\n    [(:spec x) (dissoc x :spec)]\n    [x {}]))\n\n(defn strip-fn-if-needed [form]\n  (let [head (first form)]\n    ;; Deal with the form (clojure.core/fn [%] (foo ... %))\n    ;; We should just use core.match...\n    (if (and (= (count form) 3) (= head #?(:clj 'clojure.core/fn :cljs 'cljs.core/fn)))\n      (nth form 2)\n      form)))\n\n(defn normalize-symbol [kw]\n  (case (and (symbol? kw) (namespace kw))\n    \"spec-tools.spec\" (symbol \"clojure.core\" (name kw))\n    \"cljs.core\" (symbol \"clojure.core\" (name kw))\n    \"cljs.spec.alpha\" (symbol \"clojure.spec.alpha\" (name kw))\n    kw))\n\n(defn extract-form [spec]\n  (if (seq? spec) spec (s/form spec)))\n\n(defn qualified-name [key]\n  (if (keyword? key)\n    (if-let [nn (namespace key)]\n      (str nn \"/\" (name key))\n      (name key))\n    key))\n\n(defn nilable-spec? [spec]\n  (let [form (and spec (s/form spec))]\n    (boolean\n      (if (seq? form)\n        (some-> form\n                seq\n                first\n                #{'clojure.spec.alpha/nilable\n                  'cljs.spec.alpha/nilable})))))\n\n(defn unwrap\n  \"Unwrap [x] to x. Asserts that coll has exactly one element.\"\n  [coll]\n  {:pre [(= 1 (count coll))]}\n  (first coll))\n\n(defn deep-merge [& values]\n  (cond\n    (every? map? values)\n    (apply merge-with deep-merge values)\n\n    (every? coll? values)\n    (reduce into values)\n\n    :else\n    (last values)))\n\n(defn unlift-keys [data ns-name]\n  (reduce\n    (fn [acc [k v]]\n      (if (= ns-name (namespace k))\n        (assoc acc (keyword (name k)) v)\n        acc))\n    {} data))\n\n;;\n;; FIXME: using ^:skip-wiki functions from clojure.spec. might break.\n;;\n\n(defn register-spec! [k s]\n  (s/def-impl k (s/form s) s))\n\n;;\n;; functional clojure.spec\n;;\n\n(defn coll-of-spec [pred type]\n  (let [form (form/resolve-form pred)\n        cpred (if (set? type) set? vector?)]\n    (clojure.spec.alpha/every-impl\n      form\n      pred\n      {:into type\n       ::s/conform-all true\n       ::s/describe `(s/coll-of ~form :into ~type),\n       ::s/cpred cpred,\n       ::s/kind-form (quote nil)}\n      nil)))\n\n(defn map-of-spec [kpred vpred]\n  (let [forms (map form/resolve-form [kpred vpred])\n        tuple (s/tuple-impl forms [kpred vpred])]\n    (clojure.spec.alpha/every-impl\n      `(s/tuple ~@forms)\n      tuple\n      {:into {}\n       :conform-keys true\n       ::s/kfn (fn [_ v] (nth v 0))\n       ::s/conform-all true\n       ::s/describe `(s/map-of ~@forms :conform-keys true),\n       ::s/cpred map?,\n       ::s/kind-form (quote nil)}\n      nil)))\n\n(defn keys-spec [{:keys [req opt req-un opt-un]}]\n  (let [req-specs (flatten (map polish (concat req req-un)))\n        opt-specs (flatten (map polish (concat opt opt-un)))\n        req-keys (flatten (concat (map polish req) (map polish-un req-un)))\n        opt-keys (flatten (concat (map polish opt) (map polish-un opt-un)))\n        pred-exprs (concat\n                     [#(map? %)]\n                     (map (fn [x] #(contains? % x)) req-keys))\n        pred-forms (concat\n                     [`(fn [~'%] (map? ~'%))]\n                     (map (fn [k] `(fn [~'%] (contains? ~'% ~k))) req-keys))\n        keys-pred (fn [x]\n                    (reduce\n                      (fn [_ p]\n                        (clojure.core/or (p x) (reduced false)))\n                      true\n                      pred-exprs))]\n\n    (s/map-spec-impl\n      {:req-un req-un\n       :opt-un opt-un\n       :pred-exprs pred-exprs\n       :keys-pred keys-pred\n       :opt-keys opt-keys\n       :req-specs req-specs\n       :req req\n       :req-keys req-keys\n       :opt-specs opt-specs\n       :pred-forms pred-forms\n       :opt opt})))\n\n(defn nilable-spec [pred]\n  (let [form (form/resolve-form pred)]\n    (s/nilable-impl form pred nil)))\n\n(defn or-spec [v]\n  (let [ks (mapv first v)\n        preds (mapv second v)\n        forms (mapv form/resolve-form preds)]\n    (s/or-spec-impl ks forms preds nil)))\n"]}