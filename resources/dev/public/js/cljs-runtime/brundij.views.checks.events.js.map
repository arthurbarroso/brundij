{"version":3,"sources":["brundij/views/checks/events.cljs"],"mappings":"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","names":["brundij.views.checks.events/download-file!","data","content-type","file-name","data-blob","js/Blob","link","js/document.createElement","js/URL.createObjectURL","js/document.body.appendChild","js/document.body.removeChild","re-frame.core/reg-fx","response","js/JSON","cljs.core/clj->js","re_frame.core.reg_event_db","p__77400","vec__77403","cljs.core.nth","db","_","new-input","cljs.core.assoc","p__77410","vec__77411","current-input-state","cljs.core/not","re_frame.core.reg_event_fx","p__77422","p__77423","map__77426","cljs.core/--destructure-map","cljs.core.get","vec__77427","health-id","ajax.core/json-request-format","ajax.core/json-response-format","p__77436","p__77437","map__77440","vec__77441","p__77448","p__77449","map__77451","vec__77452","uuid","brundij.uuids/generate-uuid","brundij.date/get-inst","p__77460","p__77461","map__77462","vec__77463","_data","p__77470","p__77471","map__77474","vec__77475"],"sourcesContent":["(ns brundij.views.checks.events\n  (:require [ajax.core :as ajax]\n            [brundij.date :as date]\n            [brundij.events :as events]\n            [brundij.uuids :as uuids]\n            [re-frame.core :as re-frame]))\n\n(defn download-file!\n  [data content-type file-name]\n  (let [data-blob (js/Blob. #js [data] #js {:type content-type})\n        link (js/document.createElement \"a\")]\n    (set! (.-href link) (js/URL.createObjectURL data-blob))\n    (.setAttribute link \"download\" file-name)\n    (js/document.body.appendChild link)\n    (.click link)\n    (js/document.body.removeChild link)))\n\n(re-frame/reg-fx\n  ::download!\n  (fn [response]\n    (download-file!\n      (.stringify js/JSON (clj->js response))\n      \"application/json\" \"results.json\")\n    {}))\n\n(re-frame/reg-event-db\n  ::change-health-id-input\n  (fn [db [_ new-input]]\n    (assoc db :health-id-input new-input)))\n\n(re-frame/reg-event-db\n  ::toggle-pre-existing-input?\n  (fn [db [_ _]]\n    (let [current-input-state (:pre-existing-input? db)]\n      (assoc db :pre-existing-input? (not current-input-state)))))\n\n(re-frame/reg-event-fx\n  ::fetch-results\n  (fn [{:keys [db]} [_ health-id]]\n    {:db (assoc db :loading true)\n     :http-xhrio {:method :get\n                  :uri (str \"https://brundij-api-demo.herokuapp.com/v1/healths/\" health-id \"/answers\")\n                  :format (ajax/json-request-format)\n                  :timeout 8000\n                  :response-format (ajax/json-response-format {:keywords? true})\n                  :on-success [::fetch-results-success]\n                  :on-failure [::fetch-results-failure]}}))\n\n(re-frame/reg-event-fx\n  ::fetch-results-success\n  (fn [{:keys [db]} [_ response]]\n    {:db (assoc db :loading false)\n     ::download! response}))\n\n(re-frame/reg-event-fx\n  ::fetch-results-failure\n  (fn [_]\n    {::events/show-failure-toast\n       {:toast-content\n          \"Failure downloading your health check's results. Please try again later\"}}))\n\n(re-frame/reg-event-fx\n  ::add-health-check-to-ds\n  (fn [{:keys [db]} [_ _]]\n    (let [uuid (uuids/generate-uuid)]\n      {:db (assoc db :health-uuid uuid)\n       ::events/transact! {:db/id -1\n                           :health/uuid uuid\n                           :health/created_at (date/get-inst)}\n       ::events/navigate! [:questions]})))\n\n(re-frame/reg-event-fx\n  ::create-health\n  (fn [{:keys [db]} [_ _data]]\n    (if (true? (:is-online? db))\n      {:db (assoc db :loading true)\n       :http-xhrio {:method :post\n                    :uri \"https://brundij-api-demo.herokuapp.com/v1/healths\"\n                    :format (ajax/json-request-format)\n                    :timeout 8000\n                    :response-format (ajax/json-response-format {:keywords? true})\n                    :on-success [::health-creation-success]\n                    :on-failure [::health-creation-failure]}}\n      {:db (assoc db :loading true)\n       :dispatch [::add-health-check-to-ds]})))\n\n(re-frame/reg-event-fx\n  ::health-creation-success\n  (fn [{:keys [db]} [_ response]]\n    {:db (assoc db\n           :loading false\n           :health-uuid (:health/uuid response))\n     ::events/navigate! [:questions]}))\n\n(re-frame/reg-event-fx\n  ::health-creation-failure\n  (fn [_]\n    {::events/show-failure-toast\n       {:toast-content\n          \"Failure creating your health check. Please try again later\"}}))\n"]}