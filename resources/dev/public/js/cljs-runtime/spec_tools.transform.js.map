{"version":3,"sources":["spec_tools/transform.cljc"],"mappings":"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","names":["spec-tools.transform/keyword->string","_","x","cljs.core/Keyword","spec-tools.impl/qualified-name","spec-tools.transform/keyword-or-string->","f","spec","G__77926","G__77927","spec-tools.transform/keyword->","G__77928","G__77929","spec-tools.transform/number->string","spec-tools.transform/number-or-string->","G__77930","G__77931","spec-tools.transform/string->long","e77932","x'","js/parseInt","js/isNaN","js/Error","spec-tools.transform/string->double","e77933","js/parseFloat","spec-tools.transform/string->keyword","cljs.core.keyword","spec-tools.transform/string->boolean","cljs.core._EQ_","spec-tools.transform/string->uri","e77934","js/goog.Uri.parse","spec-tools.transform/string->uuid","e77935","cljs.core/re-find","cljs.core/uuid","spec-tools.transform/string->date","e77936","js/Date","js/goog.date.UtcDateTime.fromIsoString","spec-tools.transform/date->string","cljs.core/inst?","e77937","spec-tools.transform/string->symbol","cljs.core.symbol","spec-tools.transform/string->nil","spec-tools.transform/any->string","spec-tools.transform/number->double","spec-tools.transform/any->any","p__77938","map__77939","cljs.core/--destructure-map","keys","cljs.core.get","spec-tools.transform/strip-extra-keys","and__4210__auto__","cljs.core/map?","cljs.core/select-keys","p__77940","map__77941","spec-tools.transform/fail-on-extra-keys","clojure.set/subset?","cljs.core/keys","cljs.core/set","p__77942","map__77943","items","spec-tools.transform/strip-extra-values","size","cljs.core/count","cljs.core/vector?","cljs.core.subvec","spec-tools.transform/json-type-decoders","cljs.core.merge","spec-tools.transform/string-type-decoders","spec-tools.transform/strip-extra-keys-type-decoders","spec-tools.transform/fail-on-extra-keys-type-decoders","spec-tools.transform/strip-extra-values-type-decoders","spec-tools.transform/json-type-encoders","spec-tools.transform/string-type-encoders"],"sourcesContent":["(ns spec-tools.transform\n  #?(:cljs (:refer-clojure :exclude [Inst Keyword UUID]))\n  (:require [clojure.spec.alpha :as s]\n            #?@(:cljs [[goog.date.UtcDateTime]\n                       [goog.date.Date]\n                       [goog.Uri]])\n            [clojure.set :as set]\n            [clojure.edn :as edn]\n            [spec-tools.parse :as parse]\n            [spec-tools.impl :as impl])\n  #?(:clj\n     (:import (java.util Date UUID)\n              (java.time Instant ZoneId)\n              (java.net URI)\n              (java.time.format DateTimeFormatter DateTimeFormatterBuilder)\n              (java.time.temporal ChronoField))))\n\n;;\n;; Keywords\n;;\n\n(defn keyword->string [_ x]\n  (if (keyword? x)\n    (impl/qualified-name x)\n    x))\n\n(defn keyword-or-string-> [f]\n  (fn [spec x]\n    (cond\n      (keyword? x) (f spec (keyword->string spec x))\n      (string? x) (f spec x)\n      :else x)))\n\n(defn keyword-> [f]\n  (fn [spec x]\n    (cond\n      (keyword? x) (f spec (keyword->string spec x))\n      :else x)))\n\n;; Numbers\n;;\n\n(defn number->string [_ x]\n  (if (number? x)\n    (str x)\n    x))\n\n(defn number-or-string-> [f]\n  (fn [spec x]\n    (cond\n      (number? x) (f spec (number->string spec x))\n      (string? x) (f spec x)\n      :else x)))\n;;\n;; Strings\n;;\n\n(defn string->long [_ x]\n  (if (string? x)\n    (try\n      #?(:clj  (Long/parseLong x)\n         :cljs (let [x' (js/parseInt x 10)]\n                 (if (js/isNaN x') x x')))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n(defn string->double [_ x]\n  (if (string? x)\n    (try\n      #?(:clj  (Double/parseDouble x)\n         :cljs (let [x' (js/parseFloat x)]\n                 (if (js/isNaN x') x x')))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n(defn string->keyword [_ x]\n  (if (string? x)\n    (keyword x)\n    x))\n\n(defn string->boolean [_ x]\n  (if (string? x)\n    (cond\n      (= \"true\" x) true\n      (= \"false\" x) false\n      :else x)\n    x))\n\n#?(:clj\n   (defn string->decimal [_ x]\n     (if (string? x)\n       (try\n         (BigDecimal. ^String x)\n         (catch Exception _ x))\n       x)))\n\n#?(:clj\n   (defn string->ratio [_ x]\n     (if (string? x)\n       (try\n         (let [parsed-x (edn/read-string ^String x)]\n           (if (ratio? parsed-x)\n             parsed-x\n             x))\n         (catch Exception _ x))\n       x)))\n\n(defn string->uri [_ x]\n  (if (string? x)\n    (try\n      #?(:clj  (URI/create x)\n         ;; https://stackoverflow.com/questions/11528249/uri-validation-in-javascript\n         :cljs (goog.Uri.parse x))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n(defn string->uuid [_ x]\n  (if (string? x)\n    (try\n      #?(:clj  (UUID/fromString x)\n         ;; http://stackoverflow.com/questions/7905929/how-to-test-valid-uuid-guid\n         :cljs (if (re-find #\"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\" x)\n                 (uuid x)\n                 x))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n#?(:clj\n   (def ^DateTimeFormatter +string->date-format+\n     (-> (DateTimeFormatterBuilder.)\n         (.appendPattern \"yyyy-MM-dd['T'HH:mm:ss[.SSS][XXXX][XXXXX]]\")\n         (.parseDefaulting ChronoField/HOUR_OF_DAY 0)\n         (.parseDefaulting ChronoField/OFFSET_SECONDS 0)\n         (.toFormatter))))\n\n(defn string->date [_ x]\n  (if (string? x)\n    (try\n      #?(:clj  (Date/from (Instant/from (.parse +string->date-format+ x)))\n         :cljs (js/Date. (.getTime (goog.date.UtcDateTime.fromIsoString x))))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n#?(:clj\n   (def ^DateTimeFormatter +date->string-format+\n     (-> (DateTimeFormatter/ofPattern \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\")\n         (.withZone (ZoneId/of \"UTC\")))))\n\n(defn date->string [_ x]\n  (if (inst? x)\n    (try\n      #?(:clj  (.format +date->string-format+ (Instant/ofEpochMilli (inst-ms x)))\n         :cljs (.toISOString x))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n(defn string->symbol [_ x]\n  (if (string? x)\n    (symbol x)\n    x))\n\n(defn string->nil [_ x]\n  (if (= \"\" x)\n    nil\n    x))\n\n(defn any->string [_ x]\n  (if-not (nil? x)\n    (str x)))\n\n(defn number->double [_ x]\n  (if (number? x)\n    (double x)\n    x))\n\n(defn any->any [_ x] x)\n\n;;\n;; Maps\n;;\n\n(defn strip-extra-keys [{:keys [::parse/keys]} x]\n  (if (and keys (map? x))\n    (select-keys x keys)\n    x))\n\n;; TODO: remove this as it couples transformation & validation?\n(defn fail-on-extra-keys [{:keys [::parse/keys]} x]\n  (if (and (map? x) (not (set/subset? (-> x (clojure.core/keys) (set)) keys)))\n    ::s/invalid\n    x))\n\n;;\n;; Tuples\n;;\n\n(defn strip-extra-values [{:keys [::parse/items]} x]\n  (let [size (count items)]\n    (if (and (vector? x) (> (count x) size))\n      (subvec x 0 size)\n      x)))\n\n;;\n;; type decoders\n;;\n\n(def json-type-decoders\n  (merge\n    {:keyword string->keyword\n     :uuid (keyword-or-string-> string->uuid)\n     :date (keyword-or-string-> string->date)\n     :symbol (keyword-or-string-> string->symbol)\n     :long (keyword-> string->long)\n     :double (keyword-> string->double)\n     :boolean (keyword-> string->boolean)\n     :string keyword->string}\n    #?(:clj\n       {:uri string->uri\n        :bigdec (number-or-string-> string->decimal)\n        :ratio string->ratio})))\n\n(def string-type-decoders\n  (merge\n    json-type-decoders\n    {:long (keyword-or-string-> string->long)\n     :double (keyword-or-string-> string->double)\n     :boolean (keyword-or-string-> string->boolean)}))\n\n(def strip-extra-keys-type-decoders\n  {:map strip-extra-keys})\n\n(def fail-on-extra-keys-type-decoders\n  {:map fail-on-extra-keys})\n\n(def strip-extra-values-type-decoders\n  {:tuple strip-extra-values})\n\n;;\n;; type encoders\n;;\n\n(def json-type-encoders\n  {:keyword keyword->string\n   :symbol any->string\n   :uuid any->string\n   :uri any->string\n   :bigdec any->string\n   :date date->string\n   :map any->any\n   :set any->any\n   :vector any->any\n   #?@(:clj [:ratio number->double])})\n\n(def string-type-encoders\n  (merge\n    json-type-encoders\n    {:long any->string\n     :double any->string}))\n"]}