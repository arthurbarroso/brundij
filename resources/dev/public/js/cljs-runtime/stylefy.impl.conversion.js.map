{"version":3,"sources":["stylefy/impl/conversion.cljc"],"mappings":"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","names":["stylefy.impl.conversion/garden-units->css","props","cljs.core.reduce","result","next-key","value","stylefy.impl.utils/is-garden-value?","cljs.core.assoc","garden.compiler/render-css","cljs.core/keys","stylefy.impl.conversion/convert-stylefy-vendors-to-garden","temp__5735__auto__","vendors","stylefy.impl.conversion/convert-stylefy-modes-to-garden","modes","handle-mode","mode-name","mode-props","js/Error","cljs.core/Keyword","clojure.string/starts-with?","cljs.core.pr_str","cljs.core/count","clojure.string.split","stylefy.impl.log/warn","cljs.core.keyword","cljs.core/map?","p1__71223#","cljs.core.mapv","cljs.core.get","cljs.core/vector?","p1__71224#","cljs.core/first","cljs.core/second","stylefy.impl.conversion/class-selector","hash","p__71232","map__71233","cljs.core/--destructure-map","stylefy.impl.conversion/convert-base-style-into-class","custom-selector","_style","options","css-props","stylefy.impl.utils/remove-special-keywords","css-selector","or__4212__auto__","garden-class-definition","garden-pseudo-classes","garden-vendors","garden-options","cljs.core.merge","css-class","garden.core.css","cljs.core.into","p__71234","map__71235","stylefy.impl.conversion/convert-media-queries","stylefy-media-queries","css-media-queries","cljs.core.map","media-query","media-query-props","media-query-css-props","garden.stylesheet.at_media","cljs.core.apply","cljs.core/str","p__71236","map__71237","stylefy.impl.conversion/convert-supports-rules","stylefy-supports","css-supports","supports-selector","supports-props","supports-css-props","css-media-queries-inside-supports","p__71239","map__71240","stylefy.impl.conversion/convert-manual-styles","stylefy-manual-styles","css-parent-selector","css-manual-styles","manual-style","manual-selector-and-css-props","p1__71238#","clojure.walk/walk","cljs.core/identity","garden-style-definition","var_args","G__71263","stylefy.impl.conversion/style->css","style","stylefy.impl.conversion.style__GT_css"],"sourcesContent":["(ns stylefy.impl.conversion\n  (:require\n    [clojure.walk :refer [walk]]\n    [garden.core :refer [css]]\n    [stylefy.impl.utils :as utils]\n    [garden.stylesheet :refer [at-media]]\n    [stylefy.impl.log :as log]\n    [clojure.string :as str]\n    [garden.compiler :as compiler]))\n\n(defn garden-units->css\n  \"Checks all values in the map and converts all Garden units to CSS.\"\n  [props]\n  (reduce\n    (fn [result next-key]\n      (let [value (next-key props)]\n        (if (utils/is-garden-value? value)\n          (assoc result next-key (compiler/render-css value))\n          result)))\n    props\n    (keys props)))\n\n(defn- convert-stylefy-vendors-to-garden [props]\n  (when-let [vendors (:stylefy.core/vendors props)]\n    {:vendors vendors\n     :auto-prefix (:stylefy.core/auto-prefix props)}))\n\n(defn- convert-stylefy-modes-to-garden [props]\n  (let [modes (:stylefy.core/mode props)\n        handle-mode (fn [mode-name mode-props]\n                      (assert (or (keyword? mode-name)\n                                  (and (string? mode-name)\n                                       (str/starts-with? mode-name \":\")))\n                              (str \"Mode must be specified as a keyword or string beginning with colon, got: \" (pr-str mode-name)))\n                      (when (and (string? mode-name)\n                                 (> (count (str/split mode-name \" \")) 1))\n                        (log/warn (str \"Incorrect mode detected, should not contain spaces. Mode was: \" (pr-str mode-name))))\n                      [(keyword (str \"&\" mode-name)) mode-props])]\n    (cond\n      (map? modes) (mapv #(handle-mode % (get modes %)) (keys modes))\n      (vector? modes) (mapv #(handle-mode (first %) (second %)) modes))))\n\n(defn class-selector [hash]\n  (keyword (str \".\" hash)))\n\n(defn- convert-base-style-into-class\n  \"Converts Clojure style map into CSS class.\"\n  [{:keys [props hash custom-selector] :as _style} options]\n  (let [css-props (utils/remove-special-keywords props)\n        css-selector (or custom-selector (class-selector hash))\n        garden-class-definition [css-selector css-props]\n        garden-pseudo-classes (convert-stylefy-modes-to-garden props)\n        garden-vendors (convert-stylefy-vendors-to-garden props)\n        garden-options (or (merge options garden-vendors) {})\n        css-class (css garden-options (into garden-class-definition\n                                            garden-pseudo-classes))]\n    css-class))\n\n(defn- convert-media-queries\n  \"Converts stylefy/media definition into CSS media query.\"\n  [{:keys [props hash custom-selector] :as _style} options]\n  (when-let [stylefy-media-queries (:stylefy.core/media props)]\n    (let [css-selector (or custom-selector (class-selector hash))\n          css-media-queries\n          (map\n            (fn [media-query]\n              (let [media-query-props (get stylefy-media-queries media-query)\n                    media-query-css-props (utils/remove-special-keywords media-query-props)\n                    garden-class-definition [css-selector media-query-css-props]\n                    garden-pseudo-classes (convert-stylefy-modes-to-garden media-query-props)\n                    garden-vendors (convert-stylefy-vendors-to-garden media-query-props)\n                    garden-options (or (merge options garden-vendors) {})]\n                (css garden-options (at-media media-query (into garden-class-definition\n                                                                garden-pseudo-classes)))))\n            (keys stylefy-media-queries))]\n      (apply str css-media-queries))))\n\n(defn- convert-supports-rules\n  \"Converts stylefy/supports definition into CSS feature query.\"\n  [{:keys [props hash custom-selector] :as _style} options]\n  (when-let [stylefy-supports (:stylefy.core/supports props)]\n    (let [css-selector (or custom-selector (class-selector hash))\n          css-supports (map\n                         (fn [supports-selector]\n                           (let [supports-props (get stylefy-supports supports-selector)\n                                 supports-css-props (utils/remove-special-keywords supports-props)\n                                 garden-class-definition [css-selector supports-css-props]\n                                 garden-pseudo-classes (convert-stylefy-modes-to-garden supports-props)\n                                 garden-vendors (convert-stylefy-vendors-to-garden supports-props)\n                                 garden-options (or (merge options garden-vendors) {})\n                                 css-media-queries-inside-supports\n                                 (convert-media-queries\n                                   {:props supports-props\n                                    :hash hash\n                                    :custom-selector custom-selector}\n                                   options)]\n                             (str \"@supports (\" supports-selector \") {\"\n                                  (css garden-options (into garden-class-definition\n                                                            garden-pseudo-classes))\n                                  css-media-queries-inside-supports\n                                  \"}\")))\n                         (keys stylefy-supports))]\n      (apply str css-supports))))\n\n(defn- convert-manual-styles\n  \"Converts stylefy/manual definition into CSS.\"\n  [{:keys [props hash custom-selector] :as _style} options]\n  (when-let [stylefy-manual-styles (:stylefy.core/manual props)]\n    (let [css-parent-selector (or custom-selector (class-selector hash))\n          css-manual-styles (map\n                             (fn [manual-style]\n                               (let [manual-selector-and-css-props (walk #(if (map? %)\n                                                                            (utils/remove-special-keywords %)\n                                                                            %)\n                                                                         identity\n                                                                         manual-style)\n                                     garden-style-definition (into [css-parent-selector] [manual-selector-and-css-props])\n                                     css-class (css options garden-style-definition)]\n                                 css-class))\n                             stylefy-manual-styles)]\n      (apply str css-manual-styles))))\n\n(defn style->css\n  \"Converts the given style to CSS. Options are sent directly to Garden\"\n  ([style] (style->css style {}))\n  ([style options]\n   (let [css-class (convert-base-style-into-class style options)\n         css-media-queries (convert-media-queries style options)\n         css-supports (convert-supports-rules style options)\n         css-manual-styles (convert-manual-styles style options)]\n     (str css-class\n          css-media-queries\n          css-supports\n          css-manual-styles))))\n"]}